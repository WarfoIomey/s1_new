
mqtt_test_stand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ed4  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c0  080072c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080072c0  080072c0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072c0  080072c0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080072c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001700  20000080  08007348  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001780  08007348  00021780  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f68  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331c  00000000  00000000  00036011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00039330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  0003a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc62  00000000  00000000  0003b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f64  00000000  00000000  00057eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ae52  00000000  00000000  0006be1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00106c70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f40  00000000  00000000  00106cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stabstr      0000003c  00000000  00000000  0010bc04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080063d4 	.word	0x080063d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080063d4 	.word	0x080063d4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b0c      	ldr	r3, [pc, #48]	; (8000194 <MX_DMA_Init+0x38>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <MX_DMA_Init+0x38>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b09      	ldr	r3, [pc, #36]	; (8000194 <MX_DMA_Init+0x38>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200d      	movs	r0, #13
 8000180:	f001 fce9 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000184:	200d      	movs	r0, #13
 8000186:	f001 fd02 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <esp8266_CheckRespond>:

static WIFI_StateTypeDef wifi_state = _OFFLINE;
static WIFI_StateTypeDef trans_state = _UNKNOWN_STATE;
static uint8_t wifi_config_step = 0;
/*********************ПРОВЕРКА ОТВЕТА ESP***********************************/
WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	u2_printf("(DBG:) USART2 CHECKING THE RESPONSE :\r\n%s\r\n", USART3_RxBUF); /*ПРОВЕРКА ОТВЕТА*/
 80001a0:	4913      	ldr	r1, [pc, #76]	; (80001f0 <esp8266_CheckRespond+0x58>)
 80001a2:	4814      	ldr	r0, [pc, #80]	; (80001f4 <esp8266_CheckRespond+0x5c>)
 80001a4:	f001 fb28 	bl	80017f8 <u2_printf>
	printf("(DBG:) USART2 CHECKING THE RESPONSE :\r\n%s\r\n", USART3_RxBUF);
 80001a8:	4911      	ldr	r1, [pc, #68]	; (80001f0 <esp8266_CheckRespond+0x58>)
 80001aa:	4812      	ldr	r0, [pc, #72]	; (80001f4 <esp8266_CheckRespond+0x5c>)
 80001ac:	f005 f8e0 	bl	8005370 <iprintf>
	if (strstr((const char*) USART3_RxBUF, (const char*) str) != NULL) {
 80001b0:	6879      	ldr	r1, [r7, #4]
 80001b2:	480f      	ldr	r0, [pc, #60]	; (80001f0 <esp8266_CheckRespond+0x58>)
 80001b4:	f005 f9dd 	bl	8005572 <strstr>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d00d      	beq.n	80001da <esp8266_CheckRespond+0x42>
		u2_printf("(DBG:) CONNECTION SUCCESSFUL\r\n");
 80001be:	480e      	ldr	r0, [pc, #56]	; (80001f8 <esp8266_CheckRespond+0x60>)
 80001c0:	f001 fb1a 	bl	80017f8 <u2_printf>
		printf("(DBG:) CONNECTION SUCCESSFUL\r\n");
 80001c4:	480d      	ldr	r0, [pc, #52]	; (80001fc <esp8266_CheckRespond+0x64>)
 80001c6:	f005 f959 	bl	800547c <puts>
		memset(USART3_RxBUF, 0, USART3_MAX_RECVLEN);
 80001ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ce:	2100      	movs	r1, #0
 80001d0:	4807      	ldr	r0, [pc, #28]	; (80001f0 <esp8266_CheckRespond+0x58>)
 80001d2:	f005 f81f 	bl	8005214 <memset>
		return _MATCHOK;
 80001d6:	2304      	movs	r3, #4
 80001d8:	e006      	b.n	80001e8 <esp8266_CheckRespond+0x50>
	}

	memset(USART3_RxBUF, 0, USART3_MAX_RECVLEN);
 80001da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001de:	2100      	movs	r1, #0
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <esp8266_CheckRespond+0x58>)
 80001e2:	f005 f817 	bl	8005214 <memset>
	return _MATCHERROR;
 80001e6:	2303      	movs	r3, #3
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20001328 	.word	0x20001328
 80001f4:	080063ec 	.word	0x080063ec
 80001f8:	08006418 	.word	0x08006418
 80001fc:	08006438 	.word	0x08006438

08000200 <esp8266_TransmitCmd>:
/*********************ПРОВЕРКА ОТВЕТА ESP***********************************/
/*********************ПРОВЕРКА  ОТПРАВКИ ESP***********************************/
WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
 800020c:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	74fb      	strb	r3, [r7, #19]
	memset(USART3_RxBUF, 0, USART3_MAX_RECVLEN);
 8000216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800021a:	2100      	movs	r1, #0
 800021c:	4836      	ldr	r0, [pc, #216]	; (80002f8 <esp8266_TransmitCmd+0xf8>)
 800021e:	f004 fff9 	bl	8005214 <memset>
	u2_printf("\r\n(DBG:) TRY SENDING cmd: %s\r\n", cmd);
 8000222:	68f9      	ldr	r1, [r7, #12]
 8000224:	4835      	ldr	r0, [pc, #212]	; (80002fc <esp8266_TransmitCmd+0xfc>)
 8000226:	f001 fae7 	bl	80017f8 <u2_printf>
	printf("\r\n(DBG:) TRY SENDING cmd: %s\r\n", cmd);
 800022a:	68f9      	ldr	r1, [r7, #12]
 800022c:	4833      	ldr	r0, [pc, #204]	; (80002fc <esp8266_TransmitCmd+0xfc>)
 800022e:	f005 f89f 	bl	8005370 <iprintf>
	if (newline == 0)
 8000232:	78fb      	ldrb	r3, [r7, #3]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d104      	bne.n	8000242 <esp8266_TransmitCmd+0x42>
		u3_transmit("%s", cmd);      // ОТПРАВКА ПО КОНСОЛИ ЧЕРЕЗ USART1
 8000238:	68f9      	ldr	r1, [r7, #12]
 800023a:	4831      	ldr	r0, [pc, #196]	; (8000300 <esp8266_TransmitCmd+0x100>)
 800023c:	f001 fb04 	bl	8001848 <u3_transmit>
 8000240:	e003      	b.n	800024a <esp8266_TransmitCmd+0x4a>
	else
		u3_transmit("%s\r\n", cmd); // ОТПРАВКА ПО КОНСОЛИ ЧЕРЕЗ USART1
 8000242:	68f9      	ldr	r1, [r7, #12]
 8000244:	482f      	ldr	r0, [pc, #188]	; (8000304 <esp8266_TransmitCmd+0x104>)
 8000246:	f001 faff 	bl	8001848 <u3_transmit>

	u2_printf("(DBG:) WAITING FOR A RESPONSE\r\n"); /*ожидание ответа*/
 800024a:	482f      	ldr	r0, [pc, #188]	; (8000308 <esp8266_TransmitCmd+0x108>)
 800024c:	f001 fad4 	bl	80017f8 <u2_printf>
	printf("(DBG:) WAITING FOR A RESPONSE \r\n");
 8000250:	482e      	ldr	r0, [pc, #184]	; (800030c <esp8266_TransmitCmd+0x10c>)
 8000252:	f005 f913 	bl	800547c <puts>
	while (timeout--) {
 8000256:	e022      	b.n	800029e <esp8266_TransmitCmd+0x9e>
		// u2_printf("%d ", timeout);
		// finish dma receive
		if (USART3_RecvEndFlag == 1) {
 8000258:	4b2d      	ldr	r3, [pc, #180]	; (8000310 <esp8266_TransmitCmd+0x110>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b01      	cmp	r3, #1
 8000260:	d11a      	bne.n	8000298 <esp8266_TransmitCmd+0x98>
			check = esp8266_CheckRespond(ack);
 8000262:	68b8      	ldr	r0, [r7, #8]
 8000264:	f7ff ff98 	bl	8000198 <esp8266_CheckRespond>
 8000268:	4603      	mov	r3, r0
 800026a:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
 800026c:	7cfb      	ldrb	r3, [r7, #19]
 800026e:	2b04      	cmp	r3, #4
 8000270:	d105      	bne.n	800027e <esp8266_TransmitCmd+0x7e>
				u2_printf("(DBG:) The CYCLE is COMPLETED\r\n"); /*цИКЛ ЗАВЕРШЕН*/
 8000272:	4828      	ldr	r0, [pc, #160]	; (8000314 <esp8266_TransmitCmd+0x114>)
 8000274:	f001 fac0 	bl	80017f8 <u2_printf>
				printf("(DBG:)The CYCLE is COMPLETED\r\n");
 8000278:	4827      	ldr	r0, [pc, #156]	; (8000318 <esp8266_TransmitCmd+0x118>)
 800027a:	f005 f8ff 	bl	800547c <puts>
			}

			USART3_RxLen = 0;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <esp8266_TransmitCmd+0x11c>)
 8000280:	2200      	movs	r2, #0
 8000282:	701a      	strb	r2, [r3, #0]
			USART3_RecvEndFlag = 0;
 8000284:	4b22      	ldr	r3, [pc, #136]	; (8000310 <esp8266_TransmitCmd+0x110>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, USART3_RxBUF, USART3_MAX_RECVLEN);
 800028a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800028e:	491a      	ldr	r1, [pc, #104]	; (80002f8 <esp8266_TransmitCmd+0xf8>)
 8000290:	4823      	ldr	r0, [pc, #140]	; (8000320 <esp8266_TransmitCmd+0x120>)
 8000292:	f003 fa6e 	bl	8003772 <HAL_UART_Receive_DMA>

			break;
 8000296:	e007      	b.n	80002a8 <esp8266_TransmitCmd+0xa8>
		}
		HAL_Delay(1);
 8000298:	2001      	movs	r0, #1
 800029a:	f001 fb83 	bl	80019a4 <HAL_Delay>
	while (timeout--) {
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	617a      	str	r2, [r7, #20]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1d7      	bne.n	8000258 <esp8266_TransmitCmd+0x58>
	}

	if (check == _MATCHERROR) {
 80002a8:	7cfb      	ldrb	r3, [r7, #19]
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d107      	bne.n	80002be <esp8266_TransmitCmd+0xbe>
		u2_printf("\r\n(DBG:) Cmd error\r\n");
 80002ae:	481d      	ldr	r0, [pc, #116]	; (8000324 <esp8266_TransmitCmd+0x124>)
 80002b0:	f001 faa2 	bl	80017f8 <u2_printf>
		printf("\r\n(DBG:) Cmd error\r\n");
 80002b4:	481c      	ldr	r0, [pc, #112]	; (8000328 <esp8266_TransmitCmd+0x128>)
 80002b6:	f005 f8e1 	bl	800547c <puts>
		return check;
 80002ba:	7cfb      	ldrb	r3, [r7, #19]
 80002bc:	e017      	b.n	80002ee <esp8266_TransmitCmd+0xee>
	}
	if (timeout <= 0) {
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	dc0d      	bgt.n	80002e0 <esp8266_TransmitCmd+0xe0>
		u2_printf("(DBG:) DOWNLOAD COMPLETED\r\n");
 80002c4:	4819      	ldr	r0, [pc, #100]	; (800032c <esp8266_TransmitCmd+0x12c>)
 80002c6:	f001 fa97 	bl	80017f8 <u2_printf>
		u2_printf("\r\n(DBG:) break\r\n");
 80002ca:	4819      	ldr	r0, [pc, #100]	; (8000330 <esp8266_TransmitCmd+0x130>)
 80002cc:	f001 fa94 	bl	80017f8 <u2_printf>
		printf("(DBG:) DOWNLOAD COMPLETED\r\n");
 80002d0:	4818      	ldr	r0, [pc, #96]	; (8000334 <esp8266_TransmitCmd+0x134>)
 80002d2:	f005 f8d3 	bl	800547c <puts>
		printf("\r\n(DBG:) break\r\n");
 80002d6:	4818      	ldr	r0, [pc, #96]	; (8000338 <esp8266_TransmitCmd+0x138>)
 80002d8:	f005 f8d0 	bl	800547c <puts>
		return _TIMEOUT;
 80002dc:	2302      	movs	r3, #2
 80002de:	e006      	b.n	80002ee <esp8266_TransmitCmd+0xee>
	}
	u2_printf("(DBG:) ok\r\n");
 80002e0:	4816      	ldr	r0, [pc, #88]	; (800033c <esp8266_TransmitCmd+0x13c>)
 80002e2:	f001 fa89 	bl	80017f8 <u2_printf>
	printf("(DBG:) ok\r\n");
 80002e6:	4816      	ldr	r0, [pc, #88]	; (8000340 <esp8266_TransmitCmd+0x140>)
 80002e8:	f005 f8c8 	bl	800547c <puts>
	return _SUCCEED;
 80002ec:	2301      	movs	r3, #1
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20001328 	.word	0x20001328
 80002fc:	08006458 	.word	0x08006458
 8000300:	08006478 	.word	0x08006478
 8000304:	0800647c 	.word	0x0800647c
 8000308:	08006484 	.word	0x08006484
 800030c:	080064a4 	.word	0x080064a4
 8000310:	200000a5 	.word	0x200000a5
 8000314:	080064c4 	.word	0x080064c4
 8000318:	080064e4 	.word	0x080064e4
 800031c:	200000a4 	.word	0x200000a4
 8000320:	200006e4 	.word	0x200006e4
 8000324:	08006504 	.word	0x08006504
 8000328:	0800651c 	.word	0x0800651c
 800032c:	08006530 	.word	0x08006530
 8000330:	0800654c 	.word	0x0800654c
 8000334:	08006560 	.word	0x08006560
 8000338:	0800657c 	.word	0x0800657c
 800033c:	0800658c 	.word	0x0800658c
 8000340:	08006598 	.word	0x08006598

08000344 <esp8266_HardwareReset>:
{
	WIFI_CH_PD_Disable();
}

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 8000350:	2200      	movs	r2, #0
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	4826      	ldr	r0, [pc, #152]	; (80003f0 <esp8266_HardwareReset+0xac>)
 8000356:	f002 f84b 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800035a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800035e:	f001 fb21 	bl	80019a4 <HAL_Delay>
	WIFI_RST_Disable();
 8000362:	2201      	movs	r2, #1
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	4822      	ldr	r0, [pc, #136]	; (80003f0 <esp8266_HardwareReset+0xac>)
 8000368:	f002 f842 	bl	80023f0 <HAL_GPIO_WritePin>
	printf("попытка hardware reset\r\n");
 800036c:	4821      	ldr	r0, [pc, #132]	; (80003f4 <esp8266_HardwareReset+0xb0>)
 800036e:	f005 f885 	bl	800547c <puts>
	while (timeout--)
 8000372:	e01e      	b.n	80003b2 <esp8266_HardwareReset+0x6e>
	{
		if (USART3_RecvEndFlag == 1)
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <esp8266_HardwareReset+0xb4>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b01      	cmp	r3, #1
 800037c:	d116      	bne.n	80003ac <esp8266_HardwareReset+0x68>
		{

			u2_printf("(DBG:) HARDWARE RESET OK!\r\n");
 800037e:	481f      	ldr	r0, [pc, #124]	; (80003fc <esp8266_HardwareReset+0xb8>)
 8000380:	f001 fa3a 	bl	80017f8 <u2_printf>
			printf("(DBG:) HARDWARE RESET OK!\r\n");
 8000384:	481e      	ldr	r0, [pc, #120]	; (8000400 <esp8266_HardwareReset+0xbc>)
 8000386:	f005 f879 	bl	800547c <puts>
			HAL_Delay(100);
 800038a:	2064      	movs	r0, #100	; 0x64
 800038c:	f001 fb0a 	bl	80019a4 <HAL_Delay>

			USART3_RxLen = 0;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <esp8266_HardwareReset+0xc0>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
			USART3_RecvEndFlag = 0;
 8000396:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <esp8266_HardwareReset+0xb4>)
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart3, USART3_RxBUF, USART3_MAX_RECVLEN);
 800039c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003a0:	4919      	ldr	r1, [pc, #100]	; (8000408 <esp8266_HardwareReset+0xc4>)
 80003a2:	481a      	ldr	r0, [pc, #104]	; (800040c <esp8266_HardwareReset+0xc8>)
 80003a4:	f003 f9e5 	bl	8003772 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 80003a8:	2301      	movs	r3, #1
 80003aa:	e01c      	b.n	80003e6 <esp8266_HardwareReset+0xa2>
		}
		HAL_Delay(1);
 80003ac:	2001      	movs	r0, #1
 80003ae:	f001 faf9 	bl	80019a4 <HAL_Delay>
	while (timeout--)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	60fa      	str	r2, [r7, #12]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1db      	bne.n	8000374 <esp8266_HardwareReset+0x30>
	}
	if (timeout <= 0)
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	dc0d      	bgt.n	80003de <esp8266_HardwareReset+0x9a>
	{
		u2_printf("(DBG:) DOWNLOAD COMPLETED\r\n");
 80003c2:	4813      	ldr	r0, [pc, #76]	; (8000410 <esp8266_HardwareReset+0xcc>)
 80003c4:	f001 fa18 	bl	80017f8 <u2_printf>
		u2_printf("\r\n(DBG:) break\r\n");
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <esp8266_HardwareReset+0xd0>)
 80003ca:	f001 fa15 	bl	80017f8 <u2_printf>
		printf("(DBG:) DOWNLOAD COMPLETED \r\n");
 80003ce:	4812      	ldr	r0, [pc, #72]	; (8000418 <esp8266_HardwareReset+0xd4>)
 80003d0:	f005 f854 	bl	800547c <puts>
		printf("\r\n(DBG:) break\r\n");
 80003d4:	4811      	ldr	r0, [pc, #68]	; (800041c <esp8266_HardwareReset+0xd8>)
 80003d6:	f005 f851 	bl	800547c <puts>
		return _TIMEOUT;
 80003da:	2302      	movs	r3, #2
 80003dc:	e003      	b.n	80003e6 <esp8266_HardwareReset+0xa2>
	}
	printf("Сброс не удался\r\n");
 80003de:	4810      	ldr	r0, [pc, #64]	; (8000420 <esp8266_HardwareReset+0xdc>)
 80003e0:	f005 f84c 	bl	800547c <puts>
	return _UNKNOWN_ERROR;
 80003e4:	23ff      	movs	r3, #255	; 0xff
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	080065a4 	.word	0x080065a4
 80003f8:	200000a5 	.word	0x200000a5
 80003fc:	080065c4 	.word	0x080065c4
 8000400:	080065e0 	.word	0x080065e0
 8000404:	200000a4 	.word	0x200000a4
 8000408:	20001328 	.word	0x20001328
 800040c:	200006e4 	.word	0x200006e4
 8000410:	08006530 	.word	0x08006530
 8000414:	0800654c 	.word	0x0800654c
 8000418:	080065fc 	.word	0x080065fc
 800041c:	0800657c 	.word	0x0800657c
 8000420:	08006618 	.word	0x08006618

08000424 <esp8266_ConnectAP>:
/*************************АППАРАТНЫЙ СБРОС************************************/
/*************************ПОДКЛЮЧЕНИЕ К ТОЧКЕ ДОСТУПА****************************************************/
WIFI_StateTypeDef esp8266_ConnectAP() {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 800042a:	2326      	movs	r3, #38	; 0x26
 800042c:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800042e:	88fb      	ldrh	r3, [r7, #6]
 8000430:	4618      	mov	r0, r3
 8000432:	f004 fed9 	bl	80051e8 <malloc>
 8000436:	4603      	mov	r3, r0
 8000438:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 800043a:	88fb      	ldrh	r3, [r7, #6]
 800043c:	461a      	mov	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	6838      	ldr	r0, [r7, #0]
 8000442:	f004 fee7 	bl	8005214 <memset>
	sprintf((char*) cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"", AP_SSID, AP_PSWD); // ПОДКЛЮЧЕНИЕ К ТОЧКЕ ДОСТУПА
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <esp8266_ConnectAP+0x5c>)
 8000448:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <esp8266_ConnectAP+0x60>)
 800044a:	490f      	ldr	r1, [pc, #60]	; (8000488 <esp8266_ConnectAP+0x64>)
 800044c:	6838      	ldr	r0, [r7, #0]
 800044e:	f005 f82d 	bl	80054ac <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECT",
 8000452:	2301      	movs	r3, #1
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <esp8266_ConnectAP+0x68>)
 8000456:	490e      	ldr	r1, [pc, #56]	; (8000490 <esp8266_ConnectAP+0x6c>)
 8000458:	6838      	ldr	r0, [r7, #0]
 800045a:	f7ff fed1 	bl	8000200 <esp8266_TransmitCmd>
 800045e:	4603      	mov	r3, r0
 8000460:	2b01      	cmp	r3, #1
 8000462:	d103      	bne.n	800046c <esp8266_ConnectAP+0x48>
			3 * ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
		wifi_state = _ONLINE;
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <esp8266_ConnectAP+0x70>)
 8000466:	2205      	movs	r2, #5
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	e002      	b.n	8000472 <esp8266_ConnectAP+0x4e>
	else
		wifi_state = _OFFLINE;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <esp8266_ConnectAP+0x70>)
 800046e:	2206      	movs	r2, #6
 8000470:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <esp8266_ConnectAP+0x70>)
 8000474:	781b      	ldrb	r3, [r3, #0]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	08006638 	.word	0x08006638
 8000484:	0800663c 	.word	0x0800663c
 8000488:	08006648 	.word	0x08006648
 800048c:	0002fffd 	.word	0x0002fffd
 8000490:	08006660 	.word	0x08006660
 8000494:	20000000 	.word	0x20000000

08000498 <esp8266_ConnectServer>:
/*************************ПОДКЛЮЧЕНИЕ К ТОЧКЕ ДОСТУПА****************************************************/
/*********************************УСТАНОВКА TCP СОЕДИНЕНИЯ**************************************************/
WIFI_StateTypeDef esp8266_ConnectServer() {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 30;
 800049e:	2334      	movs	r3, #52	; 0x34
 80004a0:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 fe9f 	bl	80051e8 <malloc>
 80004aa:	4603      	mov	r3, r0
 80004ac:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 80004ae:	88fb      	ldrh	r3, [r7, #6]
 80004b0:	461a      	mov	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	6838      	ldr	r0, [r7, #0]
 80004b6:	f004 fead 	bl	8005214 <memset>
	u2_printf((char*) cmd, "AT+CIPSTART=\"TCP\",\"%s\",%s", IpServer, ServerPort);
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <esp8266_ConnectServer+0x68>)
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <esp8266_ConnectServer+0x6c>)
 80004be:	4912      	ldr	r1, [pc, #72]	; (8000508 <esp8266_ConnectServer+0x70>)
 80004c0:	6838      	ldr	r0, [r7, #0]
 80004c2:	f001 f999 	bl	80017f8 <u2_printf>
	printf((char*) cmd, "AT+CIPSTART=\"TCP\",\"%s\",%s", IpServer, ServerPort);
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <esp8266_ConnectServer+0x68>)
 80004c8:	4a0e      	ldr	r2, [pc, #56]	; (8000504 <esp8266_ConnectServer+0x6c>)
 80004ca:	490f      	ldr	r1, [pc, #60]	; (8000508 <esp8266_ConnectServer+0x70>)
 80004cc:	6838      	ldr	r0, [r7, #0]
 80004ce:	f004 ff4f 	bl	8005370 <iprintf>
	if (esp8266_TransmitCmd(cmd, (uint8_t*) "connect", 3 * ESP8266_MAX_TIMEOUT,
 80004d2:	2301      	movs	r3, #1
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <esp8266_ConnectServer+0x74>)
 80004d6:	490e      	ldr	r1, [pc, #56]	; (8000510 <esp8266_ConnectServer+0x78>)
 80004d8:	6838      	ldr	r0, [r7, #0]
 80004da:	f7ff fe91 	bl	8000200 <esp8266_TransmitCmd>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d103      	bne.n	80004ec <esp8266_ConnectServer+0x54>
	WITH_NEWLINE) == _SUCCEED)
		wifi_state = _CONNECTED;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <esp8266_ConnectServer+0x7c>)
 80004e6:	2207      	movs	r2, #7
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e002      	b.n	80004f2 <esp8266_ConnectServer+0x5a>
	else
		wifi_state = _DISCONNECTED;
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <esp8266_ConnectServer+0x7c>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <esp8266_ConnectServer+0x7c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	08006670 	.word	0x08006670
 8000504:	08006678 	.word	0x08006678
 8000508:	0800668c 	.word	0x0800668c
 800050c:	0002fffd 	.word	0x0002fffd
 8000510:	080066a8 	.word	0x080066a8
 8000514:	20000000 	.word	0x20000000

08000518 <esp8266_SetUpTCPConnection>:

WIFI_StateTypeDef esp8266_SetUpTCPConnection() {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	71fb      	strb	r3, [r7, #7]

	/* СБРОС esp8266 */
	u2_printf("(DBG:) ATTEMPT TO RESET esp8266\r\n");
 8000522:	48b4      	ldr	r0, [pc, #720]	; (80007f4 <esp8266_SetUpTCPConnection+0x2dc>)
 8000524:	f001 f968 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO RESET esp8266\r\n");
 8000528:	48b3      	ldr	r0, [pc, #716]	; (80007f8 <esp8266_SetUpTCPConnection+0x2e0>)
 800052a:	f004 ffa7 	bl	800547c <puts>
	wifi_config_step++;
 800052e:	4bb3      	ldr	r3, [pc, #716]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4bb1      	ldr	r3, [pc, #708]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000538:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(10) != _SUCCEED) {
 800053a:	e01c      	b.n	8000576 <esp8266_SetUpTCPConnection+0x5e>
		retry_count++;
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	3301      	adds	r3, #1
 8000540:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000546:	f001 fa2d 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d912      	bls.n	8000576 <esp8266_SetUpTCPConnection+0x5e>
			u2_printf("(DBG:) RESET ATTEMPT FAILED\r\n");
 8000550:	48ab      	ldr	r0, [pc, #684]	; (8000800 <esp8266_SetUpTCPConnection+0x2e8>)
 8000552:	f001 f951 	bl	80017f8 <u2_printf>
			printf("(DBG:) RESET ATTEMPT FAILED\r\n");
 8000556:	48ab      	ldr	r0, [pc, #684]	; (8000804 <esp8266_SetUpTCPConnection+0x2ec>)
 8000558:	f004 ff90 	bl	800547c <puts>
			retry_count = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 8000560:	4ba9      	ldr	r3, [pc, #676]	; (8000808 <esp8266_SetUpTCPConnection+0x2f0>)
 8000562:	22ee      	movs	r2, #238	; 0xee
 8000564:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 8000566:	4ba5      	ldr	r3, [pc, #660]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	3b01      	subs	r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4ba3      	ldr	r3, [pc, #652]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000570:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000572:	2300      	movs	r3, #0
 8000574:	e2da      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_HardwareReset(10) != _SUCCEED) {
 8000576:	200a      	movs	r0, #10
 8000578:	f7ff fee4 	bl	8000344 <esp8266_HardwareReset>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d1dc      	bne.n	800053c <esp8266_SetUpTCPConnection+0x24>
		}
	}

	HAL_Delay(2000);		// ЖДЕМ 2 СЕКУНДУ
 8000582:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000586:	f001 fa0d 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		//СБРОС СЧЁТЧИК
 800058a:	2300      	movs	r3, #0
 800058c:	71fb      	strb	r3, [r7, #7]

	/* ОТКЛЮЧЕНИЕ ПРОЗРАЧНОЙ ПЕРЕДАЧИ */
	u2_printf("(DBG:) ATTEMPT TO DISABLE TRANSPARENT TRANSMISSION\r\n");
 800058e:	489f      	ldr	r0, [pc, #636]	; (800080c <esp8266_SetUpTCPConnection+0x2f4>)
 8000590:	f001 f932 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO DISABLE TRANSPARENT TRANSMISSION\r\n");
 8000594:	489e      	ldr	r0, [pc, #632]	; (8000810 <esp8266_SetUpTCPConnection+0x2f8>)
 8000596:	f004 ff71 	bl	800547c <puts>
	wifi_config_step++;
 800059a:	4b98      	ldr	r3, [pc, #608]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b96      	ldr	r3, [pc, #600]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80005a4:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(TRANS_QUIT_CMD, TRANS_QUIT_CMD,
 80005a6:	e019      	b.n	80005dc <esp8266_SetUpTCPConnection+0xc4>
	ESP8266_MAX_TIMEOUT,
	WITHOUT_NEWLINE) != _SUCCEED) {
		retry_count++;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3301      	adds	r3, #1
 80005ac:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1500);
 80005ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005b2:	f001 f9f7 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d90f      	bls.n	80005dc <esp8266_SetUpTCPConnection+0xc4>
			u2_printf("(DBG:) DISABLING TRANSPARENT TRANSMISSION REJECTED\r\n");
 80005bc:	4895      	ldr	r0, [pc, #596]	; (8000814 <esp8266_SetUpTCPConnection+0x2fc>)
 80005be:	f001 f91b 	bl	80017f8 <u2_printf>
			printf("(DBG:) DISABLING TRANSPARENT TRANSMISSION REJECTED\r\n");
 80005c2:	4895      	ldr	r0, [pc, #596]	; (8000818 <esp8266_SetUpTCPConnection+0x300>)
 80005c4:	f004 ff5a 	bl	800547c <puts>
			retry_count = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80005cc:	4b8b      	ldr	r3, [pc, #556]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b89      	ldr	r3, [pc, #548]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80005d6:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80005d8:	2300      	movs	r3, #0
 80005da:	e2a7      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd(TRANS_QUIT_CMD, TRANS_QUIT_CMD,
 80005dc:	2300      	movs	r3, #0
 80005de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005e2:	498e      	ldr	r1, [pc, #568]	; (800081c <esp8266_SetUpTCPConnection+0x304>)
 80005e4:	488d      	ldr	r0, [pc, #564]	; (800081c <esp8266_SetUpTCPConnection+0x304>)
 80005e6:	f7ff fe0b 	bl	8000200 <esp8266_TransmitCmd>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1db      	bne.n	80005a8 <esp8266_SetUpTCPConnection+0x90>
		}
	}

	trans_state = _TRANS_DISABLE;
 80005f0:	4b85      	ldr	r3, [pc, #532]	; (8000808 <esp8266_SetUpTCPConnection+0x2f0>)
 80005f2:	220a      	movs	r2, #10
 80005f4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1500);
 80005f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005fa:	f001 f9d3 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИК
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]

	/* ЗАКРЫТИЕ echo */
	u2_printf("(DBG:) ATTEMPT TO CLOSE ECHO\r\n");
 8000602:	4887      	ldr	r0, [pc, #540]	; (8000820 <esp8266_SetUpTCPConnection+0x308>)
 8000604:	f001 f8f8 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO CLOSE ECHO\r\n");
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <esp8266_SetUpTCPConnection+0x30c>)
 800060a:	f004 ff37 	bl	800547c <puts>
	wifi_config_step++;
 800060e:	4b7b      	ldr	r3, [pc, #492]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b79      	ldr	r3, [pc, #484]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000618:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800061a:	e019      	b.n	8000650 <esp8266_SetUpTCPConnection+0x138>
			!= _SUCCEED) {
		retry_count++;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	3301      	adds	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f001 f9bd 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d90f      	bls.n	8000650 <esp8266_SetUpTCPConnection+0x138>
			u2_printf("(DBG:) CLOSE echo Rejected\r\n");
 8000630:	487d      	ldr	r0, [pc, #500]	; (8000828 <esp8266_SetUpTCPConnection+0x310>)
 8000632:	f001 f8e1 	bl	80017f8 <u2_printf>
			printf("(DBG:) CLOSE echo Rejected\r\n");
 8000636:	487d      	ldr	r0, [pc, #500]	; (800082c <esp8266_SetUpTCPConnection+0x314>)
 8000638:	f004 ff20 	bl	800547c <puts>
			retry_count = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000640:	4b6e      	ldr	r3, [pc, #440]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b6c      	ldr	r3, [pc, #432]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 800064a:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800064c:	2300      	movs	r3, #0
 800064e:	e26d      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 8000650:	2301      	movs	r3, #1
 8000652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000656:	4976      	ldr	r1, [pc, #472]	; (8000830 <esp8266_SetUpTCPConnection+0x318>)
 8000658:	4876      	ldr	r0, [pc, #472]	; (8000834 <esp8266_SetUpTCPConnection+0x31c>)
 800065a:	f7ff fdd1 	bl	8000200 <esp8266_TransmitCmd>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d1db      	bne.n	800061c <esp8266_SetUpTCPConnection+0x104>
		}
	}

	HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f001 f99d 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		//СБРОС СЧЁТЧИК
 800066a:	2300      	movs	r3, #0
 800066c:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА WIFI РЕЖИМА 0:AP 1:STA 2:AP+STA */
	u2_printf("(DBG:) ATTEMPT TO SET WI FI MODE\r\n");
 800066e:	4872      	ldr	r0, [pc, #456]	; (8000838 <esp8266_SetUpTCPConnection+0x320>)
 8000670:	f001 f8c2 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO SET WI FI MODE\r\n");
 8000674:	4871      	ldr	r0, [pc, #452]	; (800083c <esp8266_SetUpTCPConnection+0x324>)
 8000676:	f004 ff01 	bl	800547c <puts>
	wifi_config_step++;
 800067a:	4b60      	ldr	r3, [pc, #384]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b5e      	ldr	r3, [pc, #376]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000684:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE_CUR=1", OK_ACK, 500,
 8000686:	e019      	b.n	80006bc <esp8266_SetUpTCPConnection+0x1a4>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	3301      	adds	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f001 f987 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d90f      	bls.n	80006bc <esp8266_SetUpTCPConnection+0x1a4>
			u2_printf("(DBG:) WI FI MODE SETTING IS REJECTED\r\n");
 800069c:	4868      	ldr	r0, [pc, #416]	; (8000840 <esp8266_SetUpTCPConnection+0x328>)
 800069e:	f001 f8ab 	bl	80017f8 <u2_printf>
			printf("(DBG:) WI FI MODE SETTING IS REJECTED\r\n");
 80006a2:	4868      	ldr	r0, [pc, #416]	; (8000844 <esp8266_SetUpTCPConnection+0x32c>)
 80006a4:	f004 feea 	bl	800547c <puts>
			retry_count = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80006ac:	4b53      	ldr	r3, [pc, #332]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80006b6:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e237      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE_CUR=1", OK_ACK, 500,
 80006bc:	2301      	movs	r3, #1
 80006be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006c2:	495b      	ldr	r1, [pc, #364]	; (8000830 <esp8266_SetUpTCPConnection+0x318>)
 80006c4:	4860      	ldr	r0, [pc, #384]	; (8000848 <esp8266_SetUpTCPConnection+0x330>)
 80006c6:	f7ff fd9b 	bl	8000200 <esp8266_TransmitCmd>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d1db      	bne.n	8000688 <esp8266_SetUpTCPConnection+0x170>
		}
	}

	HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	; 0x64
 80006d2:	f001 f967 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		//СБРОС СЧЁТЧИК
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]

	/* ОТКЛЮЧЕНО АВТОПОДКЛЮЧЕНИЕ */
	u2_printf("(DBG:) ATTEMPT TO DISABLE AUTO-CONNECTION\r\n");
 80006da:	485c      	ldr	r0, [pc, #368]	; (800084c <esp8266_SetUpTCPConnection+0x334>)
 80006dc:	f001 f88c 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO DISABLE AUTO-CONNECTION\r\n");
 80006e0:	485b      	ldr	r0, [pc, #364]	; (8000850 <esp8266_SetUpTCPConnection+0x338>)
 80006e2:	f004 fecb 	bl	800547c <puts>
	wifi_config_step++;
 80006e6:	4b45      	ldr	r3, [pc, #276]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b43      	ldr	r3, [pc, #268]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80006f0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 80006f2:	e019      	b.n	8000728 <esp8266_SetUpTCPConnection+0x210>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	3301      	adds	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80006fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fe:	f001 f951 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d90f      	bls.n	8000728 <esp8266_SetUpTCPConnection+0x210>
			u2_printf("(DBG:) DISABLING AUTO-CONNECTION REJECTED\r\n");
 8000708:	4852      	ldr	r0, [pc, #328]	; (8000854 <esp8266_SetUpTCPConnection+0x33c>)
 800070a:	f001 f875 	bl	80017f8 <u2_printf>
			printf("(DBG:) DISABLING AUTO-CONNECTION REJECTED\r\n");
 800070e:	4852      	ldr	r0, [pc, #328]	; (8000858 <esp8266_SetUpTCPConnection+0x340>)
 8000710:	f004 feb4 	bl	800547c <puts>
			retry_count = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000718:	4b38      	ldr	r3, [pc, #224]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3b01      	subs	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b36      	ldr	r3, [pc, #216]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000722:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000724:	2300      	movs	r3, #0
 8000726:	e201      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 8000728:	2301      	movs	r3, #1
 800072a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800072e:	4940      	ldr	r1, [pc, #256]	; (8000830 <esp8266_SetUpTCPConnection+0x318>)
 8000730:	484a      	ldr	r0, [pc, #296]	; (800085c <esp8266_SetUpTCPConnection+0x344>)
 8000732:	f7ff fd65 	bl	8000200 <esp8266_TransmitCmd>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d1db      	bne.n	80006f4 <esp8266_SetUpTCPConnection+0x1dc>
		}
	}

	HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f001 f931 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИК
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	u2_printf("(DBG:) Trying to connect to AP\r\n");
 8000746:	4846      	ldr	r0, [pc, #280]	; (8000860 <esp8266_SetUpTCPConnection+0x348>)
 8000748:	f001 f856 	bl	80017f8 <u2_printf>
	printf("(DBG:) Trying to connect to AP\r\n");
 800074c:	4845      	ldr	r0, [pc, #276]	; (8000864 <esp8266_SetUpTCPConnection+0x34c>)
 800074e:	f004 fe95 	bl	800547c <puts>
	wifi_config_step++;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 800075c:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 800075e:	e019      	b.n	8000794 <esp8266_SetUpTCPConnection+0x27c>
		retry_count++;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	3301      	adds	r3, #1
 8000764:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f001 f91b 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d90f      	bls.n	8000794 <esp8266_SetUpTCPConnection+0x27c>
			u2_printf("(DBG:) Connect to AP failed\r\n");
 8000774:	483c      	ldr	r0, [pc, #240]	; (8000868 <esp8266_SetUpTCPConnection+0x350>)
 8000776:	f001 f83f 	bl	80017f8 <u2_printf>
			printf("(DBG:) Connect to AP failed\r\n");
 800077a:	483c      	ldr	r0, [pc, #240]	; (800086c <esp8266_SetUpTCPConnection+0x354>)
 800077c:	f004 fe7e 	bl	800547c <puts>
			retry_count = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 800078e:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000790:	2300      	movs	r3, #0
 8000792:	e1cb      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_ConnectAP() != _ONLINE) {
 8000794:	f7ff fe46 	bl	8000424 <esp8266_ConnectAP>
 8000798:	4603      	mov	r3, r0
 800079a:	2b05      	cmp	r3, #5
 800079c:	d1e0      	bne.n	8000760 <esp8266_SetUpTCPConnection+0x248>
		}
	}

	HAL_Delay(1000);
 800079e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a2:	f001 f8ff 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИК
 80007a6:	2300      	movs	r3, #0
 80007a8:	71fb      	strb	r3, [r7, #7]

	/* ПОПЫТКА ПОЛУЧЕНИЯ AP ИНФОРМАЦИИ */
	if (wifi_state == _ONLINE) {
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <esp8266_SetUpTCPConnection+0x358>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b05      	cmp	r3, #5
 80007b0:	d170      	bne.n	8000894 <esp8266_SetUpTCPConnection+0x37c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP_CUR?", OK_ACK,
 80007b2:	e065      	b.n	8000880 <esp8266_SetUpTCPConnection+0x368>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3301      	adds	r3, #1
 80007b8:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f001 f8f1 	bl	80019a4 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d05b      	beq.n	8000880 <esp8266_SetUpTCPConnection+0x368>
				u2_printf("(DBG:) RECEIVING AP MESSAGE REJECTED\r\n");
 80007c8:	482a      	ldr	r0, [pc, #168]	; (8000874 <esp8266_SetUpTCPConnection+0x35c>)
 80007ca:	f001 f815 	bl	80017f8 <u2_printf>
				u2_printf("(DBG:) THE SERVER CONNECTION PROCESS WILL NOT BE COMPLETED");
 80007ce:	482a      	ldr	r0, [pc, #168]	; (8000878 <esp8266_SetUpTCPConnection+0x360>)
 80007d0:	f001 f812 	bl	80017f8 <u2_printf>
				printf("(DBG:) ПОЛУЧЕНИЕ AP СООБЩЕНИЕ ОТКЛОНЕНО\r\n");
 80007d4:	4829      	ldr	r0, [pc, #164]	; (800087c <esp8266_SetUpTCPConnection+0x364>)
 80007d6:	f004 fe51 	bl	800547c <puts>
				printf("(DBG:) THE SERVER CONNECTION PROCESS WILL NOT BE COMPLETED");
 80007da:	4827      	ldr	r0, [pc, #156]	; (8000878 <esp8266_SetUpTCPConnection+0x360>)
 80007dc:	f004 fdc8 	bl	8005370 <iprintf>
				retry_count = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3b01      	subs	r3, #1
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <esp8266_SetUpTCPConnection+0x2e4>)
 80007ee:	701a      	strb	r2, [r3, #0]
				break;
 80007f0:	e050      	b.n	8000894 <esp8266_SetUpTCPConnection+0x37c>
 80007f2:	bf00      	nop
 80007f4:	080066b0 	.word	0x080066b0
 80007f8:	080066d4 	.word	0x080066d4
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	080066f8 	.word	0x080066f8
 8000804:	08006718 	.word	0x08006718
 8000808:	20000001 	.word	0x20000001
 800080c:	08006738 	.word	0x08006738
 8000810:	08006770 	.word	0x08006770
 8000814:	080067a4 	.word	0x080067a4
 8000818:	080067dc 	.word	0x080067dc
 800081c:	08006810 	.word	0x08006810
 8000820:	08006814 	.word	0x08006814
 8000824:	08006834 	.word	0x08006834
 8000828:	08006854 	.word	0x08006854
 800082c:	08006874 	.word	0x08006874
 8000830:	08006890 	.word	0x08006890
 8000834:	08006894 	.word	0x08006894
 8000838:	0800689c 	.word	0x0800689c
 800083c:	080068c0 	.word	0x080068c0
 8000840:	080068e4 	.word	0x080068e4
 8000844:	0800690c 	.word	0x0800690c
 8000848:	08006934 	.word	0x08006934
 800084c:	08006944 	.word	0x08006944
 8000850:	08006970 	.word	0x08006970
 8000854:	0800699c 	.word	0x0800699c
 8000858:	080069c8 	.word	0x080069c8
 800085c:	080069f4 	.word	0x080069f4
 8000860:	08006a04 	.word	0x08006a04
 8000864:	08006a28 	.word	0x08006a28
 8000868:	08006a48 	.word	0x08006a48
 800086c:	08006a68 	.word	0x08006a68
 8000870:	20000000 	.word	0x20000000
 8000874:	08006a88 	.word	0x08006a88
 8000878:	08006ab0 	.word	0x08006ab0
 800087c:	08006aec 	.word	0x08006aec
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP_CUR?", OK_ACK,
 8000880:	2301      	movs	r3, #1
 8000882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000886:	49ab      	ldr	r1, [pc, #684]	; (8000b34 <esp8266_SetUpTCPConnection+0x61c>)
 8000888:	48ab      	ldr	r0, [pc, #684]	; (8000b38 <esp8266_SetUpTCPConnection+0x620>)
 800088a:	f7ff fcb9 	bl	8000200 <esp8266_TransmitCmd>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d18f      	bne.n	80007b4 <esp8266_SetUpTCPConnection+0x29c>
			}
		}
	}

	HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000898:	f001 f884 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИКА
 800089c:	2300      	movs	r3, #0
 800089e:	71fb      	strb	r3, [r7, #7]

	/* ПОПЫТКА УСТАНОВИТЬ IP ИНФОРМАЦИИ */
	if (wifi_state == _ONLINE) {
 80008a0:	4ba6      	ldr	r3, [pc, #664]	; (8000b3c <esp8266_SetUpTCPConnection+0x624>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b05      	cmp	r3, #5
 80008a6:	d129      	bne.n	80008fc <esp8266_SetUpTCPConnection+0x3e4>
		while (esp8266_TransmitCmd((uint8_t*) "	AT+CIPSTA_CUR?", OK_ACK,
 80008a8:	e01e      	b.n	80008e8 <esp8266_SetUpTCPConnection+0x3d0>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	3301      	adds	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 80008b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b4:	f001 f876 	bl	80019a4 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d014      	beq.n	80008e8 <esp8266_SetUpTCPConnection+0x3d0>
				u2_printf("(DBG:) INSTALLATION OF IP INFORMATION IS REJECTED\r\n");	//УСТАНОВКА IP ИНФОРМАЦИИ ОТКЛОНЕНА
 80008be:	48a0      	ldr	r0, [pc, #640]	; (8000b40 <esp8266_SetUpTCPConnection+0x628>)
 80008c0:	f000 ff9a 	bl	80017f8 <u2_printf>
				u2_printf("(DBG:) THE SERVER CONNECTION PROCESS WILL NOT BE COMPLETED");	//ПРОЦЕСС ПОДКЛЮЧЕНИЯ СЕРВЕРА НЕ БУДЕТ ЗАВЕРШЕН
 80008c4:	489f      	ldr	r0, [pc, #636]	; (8000b44 <esp8266_SetUpTCPConnection+0x62c>)
 80008c6:	f000 ff97 	bl	80017f8 <u2_printf>
				printf("(DBG:) INSTALLATION OF IP INFORMATION IS REJECTED\r\n");
 80008ca:	489f      	ldr	r0, [pc, #636]	; (8000b48 <esp8266_SetUpTCPConnection+0x630>)
 80008cc:	f004 fdd6 	bl	800547c <puts>
				printf("(DBG:) THE SERVER CONNECTION PROCESS WILL NOT BE COMPLETED");
 80008d0:	489c      	ldr	r0, [pc, #624]	; (8000b44 <esp8266_SetUpTCPConnection+0x62c>)
 80008d2:	f004 fd4d 	bl	8005370 <iprintf>
				retry_count = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 80008da:	4b9c      	ldr	r3, [pc, #624]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b9a      	ldr	r3, [pc, #616]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 80008e4:	701a      	strb	r2, [r3, #0]
				break;
 80008e6:	e009      	b.n	80008fc <esp8266_SetUpTCPConnection+0x3e4>
		while (esp8266_TransmitCmd((uint8_t*) "	AT+CIPSTA_CUR?", OK_ACK,
 80008e8:	2301      	movs	r3, #1
 80008ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ee:	4991      	ldr	r1, [pc, #580]	; (8000b34 <esp8266_SetUpTCPConnection+0x61c>)
 80008f0:	4897      	ldr	r0, [pc, #604]	; (8000b50 <esp8266_SetUpTCPConnection+0x638>)
 80008f2:	f7ff fc85 	bl	8000200 <esp8266_TransmitCmd>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d1d6      	bne.n	80008aa <esp8266_SetUpTCPConnection+0x392>
			}
		}
	}

	HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000900:	f001 f850 	bl	80019a4 <HAL_Delay>
	retry_count = 0;		// СБРОС СЧЁТЧИКА
 8000904:	2300      	movs	r3, #0
 8000906:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА  DHCP */
	u2_printf("(DBG:) Trying to set DHCP mode\r\n");
 8000908:	4892      	ldr	r0, [pc, #584]	; (8000b54 <esp8266_SetUpTCPConnection+0x63c>)
 800090a:	f000 ff75 	bl	80017f8 <u2_printf>
	printf("(DBG:) Trying to set DHCP mode\r\n");
 800090e:	4892      	ldr	r0, [pc, #584]	; (8000b58 <esp8266_SetUpTCPConnection+0x640>)
 8000910:	f004 fdb4 	bl	800547c <puts>
	wifi_config_step++;
 8000914:	4b8d      	ldr	r3, [pc, #564]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b8b      	ldr	r3, [pc, #556]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 800091e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP_CUR=1,1", OK_ACK, 1000,
 8000920:	e019      	b.n	8000956 <esp8266_SetUpTCPConnection+0x43e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	3301      	adds	r3, #1
 8000926:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000928:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092c:	f001 f83a 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d90f      	bls.n	8000956 <esp8266_SetUpTCPConnection+0x43e>
			u2_printf("(DBG:) THE INSTALLATION OF THE DHCP MODEL IS REJECTED\r\n");	// УСТАНОВКА DHCP МОДЕЛИ ОТКЛОНЕНА
 8000936:	4889      	ldr	r0, [pc, #548]	; (8000b5c <esp8266_SetUpTCPConnection+0x644>)
 8000938:	f000 ff5e 	bl	80017f8 <u2_printf>
			printf("(DBG:) THE INSTALLATION OF THE DHCP MODEL IS REJECTED\r\n");
 800093c:	4888      	ldr	r0, [pc, #544]	; (8000b60 <esp8266_SetUpTCPConnection+0x648>)
 800093e:	f004 fd9d 	bl	800547c <puts>
			retry_count = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000946:	4b81      	ldr	r3, [pc, #516]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000950:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000952:	2300      	movs	r3, #0
 8000954:	e0ea      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP_CUR=1,1", OK_ACK, 1000,
 8000956:	2301      	movs	r3, #1
 8000958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095c:	4975      	ldr	r1, [pc, #468]	; (8000b34 <esp8266_SetUpTCPConnection+0x61c>)
 800095e:	4881      	ldr	r0, [pc, #516]	; (8000b64 <esp8266_SetUpTCPConnection+0x64c>)
 8000960:	f7ff fc4e 	bl	8000200 <esp8266_TransmitCmd>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1db      	bne.n	8000922 <esp8266_SetUpTCPConnection+0x40a>
		}
	}

	HAL_Delay(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f001 f819 	bl	80019a4 <HAL_Delay>
	retry_count = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА ОДИНОЧНОГО СОЕДИНЕНИЕ */
	u2_printf("(DBG:) ATTEMPT TO ESTABLISH A SINGLE CONNECTION\r\n");	//ПОПЫТКА УСТАНОВКИ ОДИНОЧНОГО СОЕДИНЕНИЯ
 8000976:	487c      	ldr	r0, [pc, #496]	; (8000b68 <esp8266_SetUpTCPConnection+0x650>)
 8000978:	f000 ff3e 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO ESTABLISH A SINGLE CONNECTION\r\n");
 800097c:	487b      	ldr	r0, [pc, #492]	; (8000b6c <esp8266_SetUpTCPConnection+0x654>)
 800097e:	f004 fd7d 	bl	800547c <puts>
	wifi_config_step++;
 8000982:	4b72      	ldr	r3, [pc, #456]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b70      	ldr	r3, [pc, #448]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 800098c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 800098e:	e019      	b.n	80009c4 <esp8266_SetUpTCPConnection+0x4ac>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	3301      	adds	r3, #1
 8000994:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099a:	f001 f803 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d90f      	bls.n	80009c4 <esp8266_SetUpTCPConnection+0x4ac>
			u2_printf("(DBG:) SINGLE CONNECTION SETUP REJECTED\r\n");	//УСТАНОВКА ОДИНОЧНОГО СОЕДИНЕНИЯ ОТКЛОНЕНО
 80009a4:	4872      	ldr	r0, [pc, #456]	; (8000b70 <esp8266_SetUpTCPConnection+0x658>)
 80009a6:	f000 ff27 	bl	80017f8 <u2_printf>
			printf("(DBG:) SINGLE CONNECTION SETUP REJECTED\r\n");
 80009aa:	4872      	ldr	r0, [pc, #456]	; (8000b74 <esp8266_SetUpTCPConnection+0x65c>)
 80009ac:	f004 fd66 	bl	800547c <puts>
			retry_count = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80009b4:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b63      	ldr	r3, [pc, #396]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 80009be:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80009c0:	2300      	movs	r3, #0
 80009c2:	e0b3      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 80009c4:	2301      	movs	r3, #1
 80009c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ca:	495a      	ldr	r1, [pc, #360]	; (8000b34 <esp8266_SetUpTCPConnection+0x61c>)
 80009cc:	486a      	ldr	r0, [pc, #424]	; (8000b78 <esp8266_SetUpTCPConnection+0x660>)
 80009ce:	f7ff fc17 	bl	8000200 <esp8266_TransmitCmd>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d1db      	bne.n	8000990 <esp8266_SetUpTCPConnection+0x478>
		}
	}

	HAL_Delay(1000);
 80009d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009dc:	f000 ffe2 	bl	80019a4 <HAL_Delay>
	retry_count = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	71fb      	strb	r3, [r7, #7]

	/* УСТАНОВКА РЕЖИМА ПРОЗРАЧНОЙ ПЕРЕДАЧИ */
	u2_printf("(DBG:) ATTEMPT TO SET TRANSPARENT TRANSMISSION MODE\r\n"); // ПОПЫТКА УСТАНОВИТЬ РЕЖИМ ПРОЗРАЧНОЙ ПЕРЕДАЧИ
 80009e4:	4865      	ldr	r0, [pc, #404]	; (8000b7c <esp8266_SetUpTCPConnection+0x664>)
 80009e6:	f000 ff07 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO SET TRANSPARENT TRANSMISSION MODE\r\n");
 80009ea:	4865      	ldr	r0, [pc, #404]	; (8000b80 <esp8266_SetUpTCPConnection+0x668>)
 80009ec:	f004 fd46 	bl	800547c <puts>
	wifi_config_step++;
 80009f0:	4b56      	ldr	r3, [pc, #344]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 80009fa:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 80009fc:	e019      	b.n	8000a32 <esp8266_SetUpTCPConnection+0x51a>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	3301      	adds	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a08:	f000 ffcc 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d90f      	bls.n	8000a32 <esp8266_SetUpTCPConnection+0x51a>
			u2_printf("(DBG:) THE SERVER CONNECTION PROCESS WILL NOT BE COMPLETED\r\n");	//ПРОЦЕСС ПОДКЛЮЧЕНИЯ СЕРВЕРА НЕ БУДЕТ ЗАВЕРШЕН
 8000a12:	485c      	ldr	r0, [pc, #368]	; (8000b84 <esp8266_SetUpTCPConnection+0x66c>)
 8000a14:	f000 fef0 	bl	80017f8 <u2_printf>
			printf("(DBG:) THE SERVER CONNECTION PROCESS WILL NOT BE COMPLETED\r\n");
 8000a18:	485b      	ldr	r0, [pc, #364]	; (8000b88 <esp8266_SetUpTCPConnection+0x670>)
 8000a1a:	f004 fd2f 	bl	800547c <puts>
			retry_count = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000a22:	4b4a      	ldr	r3, [pc, #296]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000a2c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e07c      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8000a32:	2301      	movs	r3, #1
 8000a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a38:	493e      	ldr	r1, [pc, #248]	; (8000b34 <esp8266_SetUpTCPConnection+0x61c>)
 8000a3a:	4854      	ldr	r0, [pc, #336]	; (8000b8c <esp8266_SetUpTCPConnection+0x674>)
 8000a3c:	f7ff fbe0 	bl	8000200 <esp8266_TransmitCmd>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d1db      	bne.n	80009fe <esp8266_SetUpTCPConnection+0x4e6>
		}
	}

	HAL_Delay(1000);
 8000a46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4a:	f000 ffab 	bl	80019a4 <HAL_Delay>
	retry_count = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]

	/* ПОДКЛЮЧЕНИЕ К TCP СЕРВЕРУ */
	u2_printf("(DBG:) ATTEMPT TO CONNECT TO A TCP SERVER\r\n"); //ПОПЫТКА ПОДКЛЮЧИТЬСЯ К TCP СЕРВЕРУ
 8000a52:	484f      	ldr	r0, [pc, #316]	; (8000b90 <esp8266_SetUpTCPConnection+0x678>)
 8000a54:	f000 fed0 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO CONNECT TO A TCP SERVER\r\n");
 8000a58:	484e      	ldr	r0, [pc, #312]	; (8000b94 <esp8266_SetUpTCPConnection+0x67c>)
 8000a5a:	f004 fd0f 	bl	800547c <puts>
	wifi_config_step++;
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000a68:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectServer() != _CONNECTED) {
 8000a6a:	e019      	b.n	8000aa0 <esp8266_SetUpTCPConnection+0x588>
		retry_count++;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a76:	f000 ff95 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d90f      	bls.n	8000aa0 <esp8266_SetUpTCPConnection+0x588>
			u2_printf("(DBG:) CONNECTION TO TCP SERVER REJECTED\r\n");	//ПОДКЛЮЧЕНИЕ К TCP СЕРВЕРУ ОТКЛОНЕНО
 8000a80:	4845      	ldr	r0, [pc, #276]	; (8000b98 <esp8266_SetUpTCPConnection+0x680>)
 8000a82:	f000 feb9 	bl	80017f8 <u2_printf>
			printf("(DBG:) CONNECTION TO TCP SERVER REJECTED\r\n");
 8000a86:	4845      	ldr	r0, [pc, #276]	; (8000b9c <esp8266_SetUpTCPConnection+0x684>)
 8000a88:	f004 fcf8 	bl	800547c <puts>
			retry_count = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b2c      	ldr	r3, [pc, #176]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000a9a:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e045      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_ConnectServer() != _CONNECTED) {
 8000aa0:	f7ff fcfa 	bl	8000498 <esp8266_ConnectServer>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b07      	cmp	r3, #7
 8000aa8:	d1e0      	bne.n	8000a6c <esp8266_SetUpTCPConnection+0x554>
		}
	}

	HAL_Delay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f000 ff79 	bl	80019a4 <HAL_Delay>
	retry_count = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]

	/* ВКЛЮЧЕНИЕ ПЕРЕДАЧИ ДАННЫХ (ПРОЗРАЧНЫЙ РЕЖИМ ПЕРЕДАЧИ) */
	u2_printf("(DBG:) ATTEMPT TO ENABLE DATA TRANSMISSION\r\n");	//ПОПЫТКА ВКЛЮЧЕНИЕЯ ПЕРЕДАЧИ ДАННЫХ
 8000ab6:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <esp8266_SetUpTCPConnection+0x688>)
 8000ab8:	f000 fe9e 	bl	80017f8 <u2_printf>
	printf("(DBG:) ATTEMPT TO ENABLE DATA TRANSMISSION\r\n");
 8000abc:	4839      	ldr	r0, [pc, #228]	; (8000ba4 <esp8266_SetUpTCPConnection+0x68c>)
 8000abe:	f004 fcdd 	bl	800547c <puts>
	wifi_config_step++;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000acc:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSEND", OK_ACK, 1000,
 8000ace:	e019      	b.n	8000b04 <esp8266_SetUpTCPConnection+0x5ec>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8000ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ada:	f000 ff63 	bl	80019a4 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d90f      	bls.n	8000b04 <esp8266_SetUpTCPConnection+0x5ec>
			u2_printf("(DBG:) SETTING TRANSPARENT TRANSMISSION MODE REJECTED\r\n");	//УСТАНОВКА ПРОЗРАЧНОГО РЕЖИМА ПЕРЕДАЧИ ОТКЛОНЕНО
 8000ae4:	4830      	ldr	r0, [pc, #192]	; (8000ba8 <esp8266_SetUpTCPConnection+0x690>)
 8000ae6:	f000 fe87 	bl	80017f8 <u2_printf>
			printf("(DBG:) SETTING TRANSPARENT TRANSMISSION MODE REJECTED\r\n");
 8000aea:	4830      	ldr	r0, [pc, #192]	; (8000bac <esp8266_SetUpTCPConnection+0x694>)
 8000aec:	f004 fcc6 	bl	800547c <puts>
			retry_count = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <esp8266_SetUpTCPConnection+0x634>)
 8000afe:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8000b00:	2300      	movs	r3, #0
 8000b02:	e013      	b.n	8000b2c <esp8266_SetUpTCPConnection+0x614>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSEND", OK_ACK, 1000,
 8000b04:	2301      	movs	r3, #1
 8000b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0a:	490a      	ldr	r1, [pc, #40]	; (8000b34 <esp8266_SetUpTCPConnection+0x61c>)
 8000b0c:	4828      	ldr	r0, [pc, #160]	; (8000bb0 <esp8266_SetUpTCPConnection+0x698>)
 8000b0e:	f7ff fb77 	bl	8000200 <esp8266_TransmitCmd>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d1db      	bne.n	8000ad0 <esp8266_SetUpTCPConnection+0x5b8>
		}
	}

	trans_state = _TRANS_ENBALE;
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <esp8266_SetUpTCPConnection+0x69c>)
 8000b1a:	2209      	movs	r2, #9
 8000b1c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 8000b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b22:	f000 ff3f 	bl	80019a4 <HAL_Delay>
	retry_count = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]

	/* send test msg */
//	u2_printf("Test msg is sending to TCP Server\r\n");
//	u2_transmit("This msg means TCP connection has been set up\r\n");
//	u2_printf("Test msg has been send to TCP Server\r\n");
	return _SUCCEED;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08006890 	.word	0x08006890
 8000b38:	08006b30 	.word	0x08006b30
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08006b40 	.word	0x08006b40
 8000b44:	08006ab0 	.word	0x08006ab0
 8000b48:	08006b74 	.word	0x08006b74
 8000b4c:	2000009c 	.word	0x2000009c
 8000b50:	08006ba8 	.word	0x08006ba8
 8000b54:	08006bb8 	.word	0x08006bb8
 8000b58:	08006bdc 	.word	0x08006bdc
 8000b5c:	08006bfc 	.word	0x08006bfc
 8000b60:	08006c34 	.word	0x08006c34
 8000b64:	08006c6c 	.word	0x08006c6c
 8000b68:	08006c80 	.word	0x08006c80
 8000b6c:	08006cb4 	.word	0x08006cb4
 8000b70:	08006ce8 	.word	0x08006ce8
 8000b74:	08006d14 	.word	0x08006d14
 8000b78:	08006d40 	.word	0x08006d40
 8000b7c:	08006d4c 	.word	0x08006d4c
 8000b80:	08006d84 	.word	0x08006d84
 8000b84:	08006dbc 	.word	0x08006dbc
 8000b88:	08006dfc 	.word	0x08006dfc
 8000b8c:	08006e38 	.word	0x08006e38
 8000b90:	08006e48 	.word	0x08006e48
 8000b94:	08006e74 	.word	0x08006e74
 8000b98:	08006ea0 	.word	0x08006ea0
 8000b9c:	08006ecc 	.word	0x08006ecc
 8000ba0:	08006ef8 	.word	0x08006ef8
 8000ba4:	08006f28 	.word	0x08006f28
 8000ba8:	08006f54 	.word	0x08006f54
 8000bac:	08006f8c 	.word	0x08006f8c
 8000bb0:	08006fc4 	.word	0x08006fc4
 8000bb4:	20000001 	.word	0x20000001

08000bb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0310 	add.w	r3, r7, #16
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a47      	ldr	r2, [pc, #284]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a41      	ldr	r2, [pc, #260]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a3b      	ldr	r2, [pc, #236]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a35      	ldr	r2, [pc, #212]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <MX_GPIO_Init+0x138>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEV3_Pin|Z2_Pin|Y3_Pin|IN3_Pin
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f243 3170 	movw	r1, #13168	; 0x3370
 8000c32:	4830      	ldr	r0, [pc, #192]	; (8000cf4 <MX_GPIO_Init+0x13c>)
 8000c34:	f001 fbdc 	bl	80023f0 <HAL_GPIO_WritePin>
                          |IN5_Pin|IN6_Pin|INT_ETH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y1_Pin|V24_Pin|X1_Pin|Z1_Pin
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f649 71f3 	movw	r1, #40947	; 0x9ff3
 8000c3e:	482e      	ldr	r0, [pc, #184]	; (8000cf8 <MX_GPIO_Init+0x140>)
 8000c40:	f001 fbd6 	bl	80023f0 <HAL_GPIO_WritePin>
                          |Y2_Pin|X2_Pin|IN7_Pin|IN8_Pin
                          |IN9_Pin|DEV1_Pin|DEV2_Pin|C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X3_Pin|Z3_Pin|IN1_Pin|IN2_Pin
 8000c44:	2200      	movs	r2, #0
 8000c46:	f641 71d3 	movw	r1, #8147	; 0x1fd3
 8000c4a:	482c      	ldr	r0, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x144>)
 8000c4c:	f001 fbd0 	bl	80023f0 <HAL_GPIO_WritePin>
                          |RST_ETH_Pin|PB4_Pin|CH_PD_WF_Pin|RST_WF_Pin
                          |B_Pin|A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ETH_GPIO_Port, CS_ETH_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2104      	movs	r1, #4
 8000c54:	482a      	ldr	r0, [pc, #168]	; (8000d00 <MX_GPIO_Init+0x148>)
 8000c56:	f001 fbcb 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DEV3_Pin|Z2_Pin|Y3_Pin|IN3_Pin
 8000c5a:	f243 3370 	movw	r3, #13168	; 0x3370
 8000c5e:	613b      	str	r3, [r7, #16]
                          |IN5_Pin|IN6_Pin|INT_ETH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	4820      	ldr	r0, [pc, #128]	; (8000cf4 <MX_GPIO_Init+0x13c>)
 8000c74:	f001 fa38 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Y1_Pin|V24_Pin|X1_Pin|Z1_Pin
 8000c78:	f649 73f3 	movw	r3, #40947	; 0x9ff3
 8000c7c:	613b      	str	r3, [r7, #16]
                          |Y2_Pin|X2_Pin|IN7_Pin|IN8_Pin
                          |IN9_Pin|DEV1_Pin|DEV2_Pin|C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4819      	ldr	r0, [pc, #100]	; (8000cf8 <MX_GPIO_Init+0x140>)
 8000c92:	f001 fa29 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = X3_Pin|Z3_Pin|IN1_Pin|IN2_Pin
 8000c96:	f641 73d3 	movw	r3, #8147	; 0x1fd3
 8000c9a:	613b      	str	r3, [r7, #16]
                          |RST_ETH_Pin|PB4_Pin|CH_PD_WF_Pin|RST_WF_Pin
                          |B_Pin|A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4813      	ldr	r0, [pc, #76]	; (8000cfc <MX_GPIO_Init+0x144>)
 8000cb0:	f001 fa1a 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN4_Pin;
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_GPIO_Init+0x14c>)
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <MX_GPIO_Init+0x13c>)
 8000cc8:	f001 fa0e 	bl	80020e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_ETH_Pin;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_ETH_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <MX_GPIO_Init+0x148>)
 8000ce4:	f001 fa00 	bl	80020e8 <HAL_GPIO_Init>

}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	40010c00 	.word	0x40010c00
 8000d00:	40011400 	.word	0x40011400
 8000d04:	10110000 	.word	0x10110000

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000d0c:	f004 f8ce 	bl	8004eac <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fe16 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f838 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f7ff ff4e 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1c:	f7ff fa1e 	bl	800015c <MX_DMA_Init>
  MX_TIM2_Init();
 8000d20:	f000 fbd8 	bl	80014d4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000d24:	f000 f980 	bl	8001028 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000d28:	f000 f9b6 	bl	8001098 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000d2c:	f000 fc6e 	bl	800160c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000d30:	f000 fc42 	bl	80015b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	printf("(DBG:) System Enable!\r\n");
 8000d34:	4810      	ldr	r0, [pc, #64]	; (8000d78 <main+0x70>)
 8000d36:	f004 fba1 	bl	800547c <puts>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (esp8266_SetUpTCPConnection() == _SUCCEED) { //ЕСЛ�? ПОДКЛЮЧЕН�?Е К СЕРВЕРУ УСПЕШНО ТО СЧЁТЧ�?К СБРАСЫВАЕТ, �?НАЧЕ МЕРЦАЕТ СВЕТОД�?ОД �? УВЕЛ ЗНАЧ. СЧЁТЧ�?КА
 8000d3a:	f7ff fbed 	bl	8000518 <esp8266_SetUpTCPConnection>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d103      	bne.n	8000d4c <main+0x44>
	  			retry_count = 0;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <main+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	  			break;
 8000d4a:	e00c      	b.n	8000d66 <main+0x5e>
	  		}
	  		//LED_Blink(3, 200, LED_Final_Off);
	  		retry_count++;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <main+0x74>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	3301      	adds	r3, #1
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <main+0x74>)
 8000d56:	701a      	strb	r2, [r3, #0]
	  		if (retry_count >= 10) { // ЕСЛ�? ЗНАЧЕН�?Е СЧЕТЧ�?КА ПРЕВЫС�?Л�? 10, ТО ОТПРАВ�?ТЬ СООБЩЕН�?Е В КОНСОЛЬ
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <main+0x74>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b09      	cmp	r3, #9
 8000d5e:	d9ec      	bls.n	8000d3a <main+0x32>
	  			printf("(DBG:) esp8266 ПОДКЛЮЧЕН�?Е К СЕРВЕРУ ОТКЛОНЕНО\r\n");
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <main+0x78>)
 8000d62:	f004 fb8b 	bl	800547c <puts>
	  			//LED_On();
	  			break;
	  		}
	  	}

	  	if (mqtt_ConnectServer() != 1) {
 8000d66:	f000 f8b5 	bl	8000ed4 <mqtt_ConnectServer>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d002      	beq.n	8000d76 <main+0x6e>
	  		printf("(DBG:) ПОДКЛЮЧЕН�?Е К MQTT СЕРВЕРУ ОТКЛОНЕНО\r\n");
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <main+0x7c>)
 8000d72:	f004 fb83 	bl	800547c <puts>
	  		//LED_On();
	  	}

	  	while (1) {
 8000d76:	e7fe      	b.n	8000d76 <main+0x6e>
 8000d78:	08006fd0 	.word	0x08006fd0
 8000d7c:	2000009d 	.word	0x2000009d
 8000d80:	08006fe8 	.word	0x08006fe8
 8000d84:	08007038 	.word	0x08007038

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fa3c 	bl	8005214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fb25 	bl	8002420 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ddc:	f000 f82c 	bl	8000e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fd90 	bl	8002920 <HAL_RCC_ClockConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e06:	f000 f817 	bl	8000e38 <Error_Handler>
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	3740      	adds	r7, #64	; 0x40
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d101      	bne.n	8000e2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e26:	f000 fda1 	bl	800196c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012c00 	.word	0x40012c00

08000e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <mqtt_transport_sendPacketBuffer>:
uint32_t mqtt_msgId = 0;

int mqtt_buflen = MQTT_PacketBuffSize;
uint8_t mqtt_PacketBuf[MQTT_PacketBuffSize];
/***********************ОТПРАВКА БУФЕР ПАКЕТА*****************************************/
int mqtt_transport_sendPacketBuffer(uint8_t *buf, int buflen) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]

	// MQTT Head may have 0x00
	USART3_RecvEndFlag = 0;
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <mqtt_transport_sendPacketBuffer+0x34>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	memset(USART3_RxBUF, 0, USART3_MAX_RECVLEN);
 8000e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <mqtt_transport_sendPacketBuffer+0x38>)
 8000e5c:	f004 f9da 	bl	8005214 <memset>
	HAL_UART_Transmit(&huart3, buf, buflen, 0xff);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	23ff      	movs	r3, #255	; 0xff
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <mqtt_transport_sendPacketBuffer+0x3c>)
 8000e6a:	f002 fbf0 	bl	800364e <HAL_UART_Transmit>

	return buflen;
 8000e6e:	683b      	ldr	r3, [r7, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000a5 	.word	0x200000a5
 8000e7c:	20001328 	.word	0x20001328
 8000e80:	200006e4 	.word	0x200006e4

08000e84 <mqtt_transport_getdata>:
/***********************ОТПРАВКА БУФЕР ПАКЕТА*****************************************/
/***********************ОТПРАВКА ПОЛУЧЕННЫХ ДАННЫХ************************************/
int mqtt_transport_getdata(uint8_t *buf, int buflen) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]

	if (MQTT_RecvEndFlag == 1) {
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <mqtt_transport_getdata+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d111      	bne.n	8000ebc <mqtt_transport_getdata+0x38>
		memcpy(buf, (const char*) USART3_RxBUF, buflen);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	490b      	ldr	r1, [pc, #44]	; (8000ecc <mqtt_transport_getdata+0x48>)
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f004 f9aa 	bl	80051f8 <memcpy>

		USART3_RxLen = 0;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <mqtt_transport_getdata+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
		USART3_RecvEndFlag = 0;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <mqtt_transport_getdata+0x44>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
		memset(USART3_RxBUF, 0, USART3_MAX_RECVLEN);
 8000eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <mqtt_transport_getdata+0x48>)
 8000eb8:	f004 f9ac 	bl	8005214 <memset>
	}

	return buflen;
 8000ebc:	683b      	ldr	r3, [r7, #0]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000a5 	.word	0x200000a5
 8000ecc:	20001328 	.word	0x20001328
 8000ed0:	200000a4 	.word	0x200000a4

08000ed4 <mqtt_ConnectServer>:
/***************************ОТПРАВКА ЗАКРЫТА******************************************/
int mqtt_transport_close(int sock) {
	return 0;
}
/***************************ОТПРАВКА ЗАКРРЫТА******************************************/
uint8_t mqtt_ConnectServer() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b098      	sub	sp, #96	; 0x60
 8000ed8:	af00      	add	r7, sp, #0

	uint8_t responMsg = 0xff;
 8000eda:	23ff      	movs	r3, #255	; 0xff
 8000edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t sessionPresent = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t connack_rc = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	mqtt_buflen = sizeof(mqtt_PacketBuf);
 8000eec:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <mqtt_ConnectServer+0x11c>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	601a      	str	r2, [r3, #0]

	MQTTPacket_connectData ConnectData = MQTTPacket_connectData_initializer;
 8000ef4:	4a3f      	ldr	r2, [pc, #252]	; (8000ff4 <mqtt_ConnectServer+0x120>)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4611      	mov	r1, r2
 8000efa:	2258      	movs	r2, #88	; 0x58
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 f97b 	bl	80051f8 <memcpy>
	ConnectData.clientID.cstring = MQTT_CLIENTID;
 8000f02:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <mqtt_ConnectServer+0x124>)
 8000f04:	613b      	str	r3, [r7, #16]
	ConnectData.username.cstring = MQTT_USERNAME;
 8000f06:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <mqtt_ConnectServer+0x128>)
 8000f08:	647b      	str	r3, [r7, #68]	; 0x44
	ConnectData.password.cstring = MQTT_PASSWORD;
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <mqtt_ConnectServer+0x12c>)
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
	ConnectData.keepAliveInterval = MQTT_KeepAliveInterval;
 8000f0e:	233c      	movs	r3, #60	; 0x3c
 8000f10:	83bb      	strh	r3, [r7, #28]
	ConnectData.MQTTVersion = 4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	733b      	strb	r3, [r7, #12]
	ConnectData.cleansession = 1;
 8000f16:	2301      	movs	r3, #1
 8000f18:	77bb      	strb	r3, [r7, #30]

	u2_printf("(DBG:) ПОПЫТКА ПОДКЛЮЧИТЬСЯ MQTT СЕРВЕРУ\r\n\n");
 8000f1a:	483a      	ldr	r0, [pc, #232]	; (8001004 <mqtt_ConnectServer+0x130>)
 8000f1c:	f000 fc6c 	bl	80017f8 <u2_printf>
	printf("(DBG:) ПОПЫТКА ПОДКЛЮЧИТЬСЯ MQTT СЕРВЕРУ\r\n\n");
 8000f20:	4839      	ldr	r0, [pc, #228]	; (8001008 <mqtt_ConnectServer+0x134>)
 8000f22:	f004 faab 	bl	800547c <puts>


	// ИСПОЛЬЗОВАНИЕ CONNACK В КАЧЕСТВЕ ДЛИННЫ
	connack_rc = MQTTSerialize_connect(mqtt_PacketBuf, mqtt_buflen,
 8000f26:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <mqtt_ConnectServer+0x11c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1d3a      	adds	r2, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4837      	ldr	r0, [pc, #220]	; (800100c <mqtt_ConnectServer+0x138>)
 8000f30:	f003 fa38 	bl	80043a4 <MQTTSerialize_connect>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			&ConnectData); // СБОРКА ПАКЕТА ПОДКЛЮЧЕНИЯ
	mqtt_transport_sendPacketBuffer(mqtt_PacketBuf, connack_rc);
 8000f3c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000f40:	4619      	mov	r1, r3
 8000f42:	4832      	ldr	r0, [pc, #200]	; (800100c <mqtt_ConnectServer+0x138>)
 8000f44:	f7ff ff7e 	bl	8000e44 <mqtt_transport_sendPacketBuffer>

	do {
		while (responMsg != CONNACK) {
 8000f48:	e009      	b.n	8000f5e <mqtt_ConnectServer+0x8a>
			responMsg = MQTTPacket_read(mqtt_PacketBuf, mqtt_buflen,
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <mqtt_ConnectServer+0x11c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <mqtt_ConnectServer+0x13c>)
 8000f50:	4619      	mov	r1, r3
 8000f52:	482e      	ldr	r0, [pc, #184]	; (800100c <mqtt_ConnectServer+0x138>)
 8000f54:	f003 fd2d 	bl	80049b2 <MQTTPacket_read>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		while (responMsg != CONNACK) {
 8000f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d1f1      	bne.n	8000f4a <mqtt_ConnectServer+0x76>
					mqtt_transport_getdata);
		}

		HAL_UART_Receive_DMA(&huart3, USART3_RxBUF, USART3_MAX_RECVLEN);
 8000f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6a:	492a      	ldr	r1, [pc, #168]	; (8001014 <mqtt_ConnectServer+0x140>)
 8000f6c:	482a      	ldr	r0, [pc, #168]	; (8001018 <mqtt_ConnectServer+0x144>)
 8000f6e:	f002 fc00 	bl	8003772 <HAL_UART_Receive_DMA>

	} while (MQTTDeserialize_connack(&sessionPresent, &connack_rc,
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <mqtt_ConnectServer+0x11c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f107 015d 	add.w	r1, r7, #93	; 0x5d
 8000f7a:	f107 005e 	add.w	r0, r7, #94	; 0x5e
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <mqtt_ConnectServer+0x138>)
 8000f80:	f003 fafc 	bl	800457c <MQTTDeserialize_connack>
 8000f84:	4603      	mov	r3, r0
			mqtt_PacketBuf, mqtt_buflen) != 1 || connack_rc != 0);
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d1e9      	bne.n	8000f5e <mqtt_ConnectServer+0x8a>
 8000f8a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1e5      	bne.n	8000f5e <mqtt_ConnectServer+0x8a>

	if (connack_rc != 0) {
 8000f92:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <mqtt_ConnectServer+0xde>
		u2_printf("connack_rc:%uc\r\n", connack_rc);
 8000f9a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481e      	ldr	r0, [pc, #120]	; (800101c <mqtt_ConnectServer+0x148>)
 8000fa2:	f000 fc29 	bl	80017f8 <u2_printf>
		printf("connack_rc:%uc\r\n", connack_rc);
 8000fa6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000faa:	4619      	mov	r1, r3
 8000fac:	481b      	ldr	r0, [pc, #108]	; (800101c <mqtt_ConnectServer+0x148>)
 8000fae:	f004 f9df 	bl	8005370 <iprintf>

	}

	u2_printf("CONNECT OK!\r\n");
 8000fb2:	481b      	ldr	r0, [pc, #108]	; (8001020 <mqtt_ConnectServer+0x14c>)
 8000fb4:	f000 fc20 	bl	80017f8 <u2_printf>
	printf("CONNECT OK!\r\n");
 8000fb8:	481a      	ldr	r0, [pc, #104]	; (8001024 <mqtt_ConnectServer+0x150>)
 8000fba:	f004 fa5f 	bl	800547c <puts>


	HAL_Delay(3000);
 8000fbe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fc2:	f000 fcef 	bl	80019a4 <HAL_Delay>
	connack_rc = MQTTSerialize_disconnect(mqtt_PacketBuf, mqtt_buflen);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <mqtt_ConnectServer+0x11c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <mqtt_ConnectServer+0x138>)
 8000fce:	f003 fb62 	bl	8004696 <MQTTSerialize_disconnect>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	mqtt_transport_sendPacketBuffer(mqtt_PacketBuf, connack_rc);
 8000fda:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <mqtt_ConnectServer+0x138>)
 8000fe2:	f7ff ff2f 	bl	8000e44 <mqtt_transport_sendPacketBuffer>

	return 1;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3760      	adds	r7, #96	; 0x60
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	0800717c 	.word	0x0800717c
 8000ff8:	08007084 	.word	0x08007084
 8000ffc:	08007098 	.word	0x08007098
 8001000:	080070a8 	.word	0x080070a8
 8001004:	080070b8 	.word	0x080070b8
 8001008:	08007100 	.word	0x08007100
 800100c:	20000160 	.word	0x20000160
 8001010:	08000e85 	.word	0x08000e85
 8001014:	20001328 	.word	0x20001328
 8001018:	200006e4 	.word	0x200006e4
 800101c:	08007148 	.word	0x08007148
 8001020:	0800715c 	.word	0x0800715c
 8001024:	0800716c 	.word	0x0800716c

08001028 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_SPI1_Init+0x68>)
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <MX_SPI1_Init+0x6c>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_SPI1_Init+0x68>)
 8001034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_SPI1_Init+0x68>)
 800103c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001040:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <MX_SPI1_Init+0x68>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI1_Init+0x68>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <MX_SPI1_Init+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI1_Init+0x68>)
 8001056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI1_Init+0x68>)
 800105e:	2208      	movs	r2, #8
 8001060:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <MX_SPI1_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI1_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <MX_SPI1_Init+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI1_Init+0x68>)
 8001076:	220a      	movs	r2, #10
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_SPI1_Init+0x68>)
 800107c:	f001 fe1c 	bl	8002cb8 <HAL_SPI_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001086:	f7ff fed7 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200005b8 	.word	0x200005b8
 8001094:	40013000 	.word	0x40013000

08001098 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <MX_SPI2_Init+0x64>)
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <MX_SPI2_Init+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_SPI2_Init+0x64>)
 80010a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_SPI2_Init+0x64>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_SPI2_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_SPI2_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_SPI2_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_SPI2_Init+0x64>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_SPI2_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <MX_SPI2_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_SPI2_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010dc:	4b07      	ldr	r3, [pc, #28]	; (80010fc <MX_SPI2_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_SPI2_Init+0x64>)
 80010e4:	220a      	movs	r2, #10
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <MX_SPI2_Init+0x64>)
 80010ea:	f001 fde5 	bl	8002cb8 <HAL_SPI_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010f4:	f7ff fea0 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000560 	.word	0x20000560
 8001100:	40003800 	.word	0x40003800

08001104 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a38      	ldr	r2, [pc, #224]	; (8001200 <HAL_SPI_MspInit+0xfc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d132      	bne.n	800118a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001124:	4b37      	ldr	r3, [pc, #220]	; (8001204 <HAL_SPI_MspInit+0x100>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a36      	ldr	r2, [pc, #216]	; (8001204 <HAL_SPI_MspInit+0x100>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <HAL_SPI_MspInit+0x100>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_SPI_MspInit+0x100>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a30      	ldr	r2, [pc, #192]	; (8001204 <HAL_SPI_MspInit+0x100>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_SPI_MspInit+0x100>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CK_IND_Pin|MOSI_IND_Pin;
 8001154:	2328      	movs	r3, #40	; 0x28
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	4828      	ldr	r0, [pc, #160]	; (8001208 <HAL_SPI_MspInit+0x104>)
 8001168:	f000 ffbe 	bl	80020e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_SPI_MspInit+0x108>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_SPI_MspInit+0x108>)
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001188:	e036      	b.n	80011f8 <HAL_SPI_MspInit+0xf4>
  else if(spiHandle->Instance==SPI2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_SPI_MspInit+0x10c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d131      	bne.n	80011f8 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_SPI_MspInit+0x100>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <HAL_SPI_MspInit+0x100>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119e:	61d3      	str	r3, [r2, #28]
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_SPI_MspInit+0x100>)
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_SPI_MspInit+0x100>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_SPI_MspInit+0x100>)
 80011b2:	f043 0308 	orr.w	r3, r3, #8
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_SPI_MspInit+0x100>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CK_ETH_Pin|MOSI_ETH_Pin;
 80011c4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_SPI_MspInit+0x104>)
 80011da:	f000 ff85 	bl	80020e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MISO_ETH_Pin;
 80011de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MISO_ETH_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_SPI_MspInit+0x104>)
 80011f4:	f000 ff78 	bl	80020e8 <HAL_GPIO_Init>
}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40013000 	.word	0x40013000
 8001204:	40021000 	.word	0x40021000
 8001208:	40010c00 	.word	0x40010c00
 800120c:	40010000 	.word	0x40010000
 8001210:	40003800 	.word	0x40003800

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_MspInit+0x68>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_MspInit+0x68>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_MspInit+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_MspInit+0x68>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_MspInit+0x68>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x68>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	210f      	movs	r1, #15
 800124e:	f06f 0001 	mvn.w	r0, #1
 8001252:	f000 fc80 	bl	8001b56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_MspInit+0x6c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_MspInit+0x6c>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	40010000 	.word	0x40010000

08001284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <HAL_InitTick+0xd0>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <HAL_InitTick+0xd0>)
 80012a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_InitTick+0xd0>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b2:	f107 020c 	add.w	r2, r7, #12
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 fcad 	bl	8002c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012c2:	f001 fc97 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 80012c6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	4a23      	ldr	r2, [pc, #140]	; (8001358 <HAL_InitTick+0xd4>)
 80012cc:	fba2 2303 	umull	r2, r3, r2, r3
 80012d0:	0c9b      	lsrs	r3, r3, #18
 80012d2:	3b01      	subs	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_InitTick+0xd8>)
 80012d8:	4a21      	ldr	r2, [pc, #132]	; (8001360 <HAL_InitTick+0xdc>)
 80012da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_InitTick+0xd8>)
 80012de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <HAL_InitTick+0xd8>)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_InitTick+0xd8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_InitTick+0xd8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_InitTick+0xd8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012fc:	4817      	ldr	r0, [pc, #92]	; (800135c <HAL_InitTick+0xd8>)
 80012fe:	f001 fd5f 	bl	8002dc0 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800130c:	2b00      	cmp	r3, #0
 800130e:	d11b      	bne.n	8001348 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <HAL_InitTick+0xd8>)
 8001312:	f001 fda5 	bl	8002e60 <HAL_TIM_Base_Start_IT>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800131c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001320:	2b00      	cmp	r3, #0
 8001322:	d111      	bne.n	8001348 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001324:	2019      	movs	r0, #25
 8001326:	f000 fc32 	bl	8001b8e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d808      	bhi.n	8001342 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	2019      	movs	r0, #25
 8001336:	f000 fc0e 	bl	8001b56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_InitTick+0xe0>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	e002      	b.n	8001348 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800134c:	4618      	mov	r0, r3
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	431bde83 	.word	0x431bde83
 800135c:	20000610 	.word	0x20000610
 8001360:	40012c00 	.word	0x40012c00
 8001364:	2000000c 	.word	0x2000000c

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
	...

08001394 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <DMA1_Channel3_IRQHandler+0x10>)
 800139a:	f000 fd71 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200006a0 	.word	0x200006a0

080013a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <TIM1_UP_IRQHandler+0x10>)
 80013ae:	f001 fda9 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000610 	.word	0x20000610

080013bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <TIM2_IRQHandler+0x10>)
 80013c2:	f001 fd9f 	bl	8002f04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000658 	.word	0x20000658

080013d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint32_t tmp_flag = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
		uint32_t temp;
		tmp_flag = __HAL_UART_GET_FLAG(&huart3, UART_FLAG_IDLE);
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <USART3_IRQHandler+0x7c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b10      	cmp	r3, #16
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	60fb      	str	r3, [r7, #12]
		if ((tmp_flag != RESET)) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d022      	beq.n	800143c <USART3_IRQHandler+0x6c>
			__HAL_UART_CLEAR_IDLEFLAG(&huart3);
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <USART3_IRQHandler+0x7c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <USART3_IRQHandler+0x7c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
			temp = huart3.Instance->SR;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <USART3_IRQHandler+0x7c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60bb      	str	r3, [r7, #8]
			temp = huart3.Instance->DR;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <USART3_IRQHandler+0x7c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	60bb      	str	r3, [r7, #8]
			HAL_UART_DMAStop(&huart3);
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <USART3_IRQHandler+0x7c>)
 800141e:	f002 f9d8 	bl	80037d2 <HAL_UART_DMAStop>
			temp = hdma_usart3_rx.Instance->CNDTR;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <USART3_IRQHandler+0x80>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	60bb      	str	r3, [r7, #8]
			USART3_RxLen = USART3_MAX_RECVLEN - temp;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	425b      	negs	r3, r3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <USART3_IRQHandler+0x84>)
 8001434:	701a      	strb	r2, [r3, #0]
			USART3_RecvEndFlag = 1;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <USART3_IRQHandler+0x88>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800143c:	4803      	ldr	r0, [pc, #12]	; (800144c <USART3_IRQHandler+0x7c>)
 800143e:	f002 fa23 	bl	8003888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200006e4 	.word	0x200006e4
 8001450:	200006a0 	.word	0x200006a0
 8001454:	200000a4 	.word	0x200000a4
 8001458:	200000a5 	.word	0x200000a5

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f003 fd88 	bl	8004fa0 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20005000 	.word	0x20005000
 80014bc:	00000800 	.word	0x00000800
 80014c0:	200000a0 	.word	0x200000a0
 80014c4:	20001780 	.word	0x20001780

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM2_Init+0x98>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM2_Init+0x98>)
 80014fa:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80014fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM2_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM2_Init+0x98>)
 8001508:	f240 12f3 	movw	r2, #499	; 0x1f3
 800150c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM2_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM2_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_TIM2_Init+0x98>)
 800151c:	f001 fc50 	bl	8002dc0 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001526:	f7ff fc87 	bl	8000e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_TIM2_Init+0x98>)
 8001538:	f001 fdec 	bl	8003114 <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001542:	f7ff fc79 	bl	8000e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM2_Init+0x98>)
 8001554:	f001 ffbe 	bl	80034d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800155e:	f7ff fc6b 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000658 	.word	0x20000658

08001570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001580:	d113      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_TIM_Base_MspInit+0x44>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_TIM_Base_MspInit+0x44>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_TIM_Base_MspInit+0x44>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	201c      	movs	r0, #28
 80015a0:	f000 fad9 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a4:	201c      	movs	r0, #28
 80015a6:	f000 faf2 	bl	8001b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <MX_USART2_UART_Init+0x50>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ee:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_USART2_UART_Init+0x4c>)
 80015f0:	f001 ffe0 	bl	80035b4 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015fa:	f7ff fc1d 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20001728 	.word	0x20001728
 8001608:	40004400 	.word	0x40004400

0800160c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_USART3_UART_Init+0x50>)
 8001614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_USART3_UART_Init+0x4c>)
 8001644:	f001 ffb6 	bl	80035b4 <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800164e:	f7ff fbf3 	bl	8000e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200006e4 	.word	0x200006e4
 800165c:	40004800 	.word	0x40004800

08001660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a57      	ldr	r2, [pc, #348]	; (80017d8 <HAL_UART_MspInit+0x178>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d130      	bne.n	80016e2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001680:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_UART_MspInit+0x17c>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_UART_MspInit+0x17c>)
 8001686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168a:	61d3      	str	r3, [r2, #28]
 800168c:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_UART_MspInit+0x17c>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_UART_MspInit+0x17c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <HAL_UART_MspInit+0x17c>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_UART_MspInit+0x17c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_RS232_Pin;
 80016b0:	2304      	movs	r3, #4
 80016b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b8:	2303      	movs	r3, #3
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(TX_RS232_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4847      	ldr	r0, [pc, #284]	; (80017e0 <HAL_UART_MspInit+0x180>)
 80016c4:	f000 fd10 	bl	80020e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_RS232_Pin;
 80016c8:	2308      	movs	r3, #8
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RX_RS232_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4841      	ldr	r0, [pc, #260]	; (80017e0 <HAL_UART_MspInit+0x180>)
 80016dc:	f000 fd04 	bl	80020e8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016e0:	e076      	b.n	80017d0 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART3)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3f      	ldr	r2, [pc, #252]	; (80017e4 <HAL_UART_MspInit+0x184>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d171      	bne.n	80017d0 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_UART_MspInit+0x17c>)
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <HAL_UART_MspInit+0x17c>)
 80016f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f6:	61d3      	str	r3, [r2, #28]
 80016f8:	4b38      	ldr	r3, [pc, #224]	; (80017dc <HAL_UART_MspInit+0x17c>)
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001704:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_UART_MspInit+0x17c>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a34      	ldr	r2, [pc, #208]	; (80017dc <HAL_UART_MspInit+0x17c>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_UART_MspInit+0x17c>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_WF_Pin;
 800171c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(TX_WF_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	482d      	ldr	r0, [pc, #180]	; (80017e8 <HAL_UART_MspInit+0x188>)
 8001732:	f000 fcd9 	bl	80020e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX_WF_Pin;
 8001736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RX_WF_GPIO_Port, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4827      	ldr	r0, [pc, #156]	; (80017e8 <HAL_UART_MspInit+0x188>)
 800174c:	f000 fccc 	bl	80020e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001750:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_UART_MspInit+0x18c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_UART_MspInit+0x18c>)
 8001770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001772:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_UART_MspInit+0x190>)
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_UART_MspInit+0x194>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_UART_MspInit+0x190>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_UART_MspInit+0x190>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_UART_MspInit+0x190>)
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_UART_MspInit+0x190>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_UART_MspInit+0x190>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_UART_MspInit+0x190>)
 800179a:	2200      	movs	r2, #0
 800179c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_UART_MspInit+0x190>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017a4:	4812      	ldr	r0, [pc, #72]	; (80017f0 <HAL_UART_MspInit+0x190>)
 80017a6:	f000 fa01 	bl	8001bac <HAL_DMA_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_UART_MspInit+0x154>
      Error_Handler();
 80017b0:	f7ff fb42 	bl	8000e38 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_UART_MspInit+0x190>)
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
 80017ba:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_UART_MspInit+0x190>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2105      	movs	r1, #5
 80017c4:	2027      	movs	r0, #39	; 0x27
 80017c6:	f000 f9c6 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ca:	2027      	movs	r0, #39	; 0x27
 80017cc:	f000 f9df 	bl	8001b8e <HAL_NVIC_EnableIRQ>
}
 80017d0:	bf00      	nop
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40004400 	.word	0x40004400
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010800 	.word	0x40010800
 80017e4:	40004800 	.word	0x40004800
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40010000 	.word	0x40010000
 80017f0:	200006a0 	.word	0x200006a0
 80017f4:	40020030 	.word	0x40020030

080017f8 <u2_printf>:
  }
}

/* USER CODE BEGIN 1 */

void u2_printf(char *fmt, ...) {
 80017f8:	b40f      	push	{r0, r1, r2, r3}
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
	uint16_t i;
	va_list ap;
	va_start(ap, fmt);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART2_TxBUF, fmt, ap);
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <u2_printf+0x48>)
 800180c:	f003 fede 	bl	80055cc <vsiprintf>
	va_end(ap);
	i = strlen((const char*) USART2_TxBUF);
 8001810:	480b      	ldr	r0, [pc, #44]	; (8001840 <u2_printf+0x48>)
 8001812:	f7fe fc9b 	bl	800014c <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart2, USART2_TxBUF, i, 100);
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <u2_printf+0x48>)
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <u2_printf+0x4c>)
 8001822:	f001 ff14 	bl	800364e <HAL_UART_Transmit>

	memset(USART2_TxBUF, 0, USART2_MAX_SENDLEN);
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	2100      	movs	r1, #0
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <u2_printf+0x48>)
 800182e:	f003 fcf1 	bl	8005214 <memset>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800183c:	b004      	add	sp, #16
 800183e:	4770      	bx	lr
 8001840:	20000728 	.word	0x20000728
 8001844:	20001728 	.word	0x20001728

08001848 <u3_transmit>:

void u3_transmit(char *fmt, ...) {
 8001848:	b40f      	push	{r0, r1, r2, r3}
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	603b      	str	r3, [r7, #0]
	vsprintf((char*) USART3_TxBUF, fmt, ap);
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	4822      	ldr	r0, [pc, #136]	; (80018e4 <u3_transmit+0x9c>)
 800185c:	f003 feb6 	bl	80055cc <vsiprintf>
	va_end(ap);

	for (i = 0; i < USART3_MAX_SENDLEN; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	80fb      	strh	r3, [r7, #6]
 8001864:	e019      	b.n	800189a <u3_transmit+0x52>
		j = i + 1;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	3301      	adds	r3, #1
 800186a:	80bb      	strh	r3, [r7, #4]
		if (USART3_TxBUF[i] == '\00') {
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <u3_transmit+0x9c>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10e      	bne.n	8001894 <u3_transmit+0x4c>
			for (; j < USART3_MAX_SENDLEN; j++) {
 8001876:	e009      	b.n	800188c <u3_transmit+0x44>
				USART3_TxBUF[j - 1] = USART3_TxBUF[j];
 8001878:	88ba      	ldrh	r2, [r7, #4]
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	3b01      	subs	r3, #1
 800187e:	4919      	ldr	r1, [pc, #100]	; (80018e4 <u3_transmit+0x9c>)
 8001880:	5c89      	ldrb	r1, [r1, r2]
 8001882:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <u3_transmit+0x9c>)
 8001884:	54d1      	strb	r1, [r2, r3]
			for (; j < USART3_MAX_SENDLEN; j++) {
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	80bb      	strh	r3, [r7, #4]
 800188c:	88bb      	ldrh	r3, [r7, #4]
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001892:	d3f1      	bcc.n	8001878 <u3_transmit+0x30>
	for (i = 0; i < USART3_MAX_SENDLEN; i++) {
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	3301      	adds	r3, #1
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a0:	d3e1      	bcc.n	8001866 <u3_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) USART3_TxBUF);
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <u3_transmit+0x9c>)
 80018a4:	f7fe fc52 	bl	800014c <strlen>
 80018a8:	4603      	mov	r3, r0
 80018aa:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&huart3, USART3_TxBUF, i, 100);
 80018ac:	88fa      	ldrh	r2, [r7, #6]
 80018ae:	2364      	movs	r3, #100	; 0x64
 80018b0:	490c      	ldr	r1, [pc, #48]	; (80018e4 <u3_transmit+0x9c>)
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <u3_transmit+0xa0>)
 80018b4:	f001 fecb 	bl	800364e <HAL_UART_Transmit>

	memset(USART3_TxBUF, 0, USART3_MAX_SENDLEN);
 80018b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018bc:	2100      	movs	r1, #0
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <u3_transmit+0x9c>)
 80018c0:	f003 fca8 	bl	8005214 <memset>
	memset(USART3_RxBUF, 0, USART3_MAX_RECVLEN);
 80018c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c8:	2100      	movs	r1, #0
 80018ca:	4808      	ldr	r0, [pc, #32]	; (80018ec <u3_transmit+0xa4>)
 80018cc:	f003 fca2 	bl	8005214 <memset>
	USART3_RecvEndFlag = 0;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <u3_transmit+0xa8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018e0:	b004      	add	sp, #16
 80018e2:	4770      	bx	lr
 80018e4:	20000f28 	.word	0x20000f28
 80018e8:	200006e4 	.word	0x200006e4
 80018ec:	20001328 	.word	0x20001328
 80018f0:	200000a5 	.word	0x200000a5

080018f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	; (800192c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	; (8001938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800191a:	f7ff fdd5 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191e:	f003 fc3b 	bl	8005198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001922:	f7ff f9f1 	bl	8000d08 <main>
  bx lr
 8001926:	4770      	bx	lr
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001930:	080072c8 	.word	0x080072c8
  ldr r2, =_sbss
 8001934:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001938:	20001780 	.word	0x20001780

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_Init+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x28>)
 800194a:	f043 0310 	orr.w	r3, r3, #16
 800194e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 f8f5 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f7ff fc94 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fc5a 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000

0800196c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_IncTick+0x1c>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_IncTick+0x20>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_IncTick+0x20>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	20000010 	.word	0x20000010
 800198c:	2000176c 	.word	0x2000176c

08001990 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_GetTick+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	2000176c 	.word	0x2000176c

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff fff0 	bl	8001990 <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffe0 	bl	8001990 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000010 	.word	0x20000010

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0b      	blt.n	8001a7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4906      	ldr	r1, [pc, #24]	; (8001a84 <__NVIC_EnableIRQ+0x34>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff4f 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff64 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ffb2 	bl	8001adc <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff81 	bl	8001a88 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff57 	bl	8001a50 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e043      	b.n	8001c4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_DMA_Init+0xa8>)
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_DMA_Init+0xac>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	009a      	lsls	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <HAL_DMA_Init+0xb0>)
 8001bde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2202      	movs	r2, #2
 8001be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bf6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	bffdfff8 	.word	0xbffdfff8
 8001c58:	cccccccd 	.word	0xcccccccd
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Start_IT+0x20>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e04a      	b.n	8001d16 <HAL_DMA_Start_IT+0xb6>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d13a      	bne.n	8001d08 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f9e8 	bl	800208c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 020e 	orr.w	r2, r2, #14
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0204 	bic.w	r2, r2, #4
 8001ce4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 020a 	orr.w	r2, r2, #10
 8001cf4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e005      	b.n	8001d14 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
 8001d12:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d008      	beq.n	8001d46 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2204      	movs	r2, #4
 8001d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e020      	b.n	8001d88 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 020e 	bic.w	r2, r2, #14
 8001d54:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d005      	beq.n	8001db6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2204      	movs	r2, #4
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e051      	b.n	8001e5a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 020e 	bic.w	r2, r2, #14
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a22      	ldr	r2, [pc, #136]	; (8001e64 <HAL_DMA_Abort_IT+0xd0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d029      	beq.n	8001e34 <HAL_DMA_Abort_IT+0xa0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_DMA_Abort_IT+0xd4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d022      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x9c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <HAL_DMA_Abort_IT+0xd8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d01a      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x96>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_DMA_Abort_IT+0xdc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d012      	beq.n	8001e24 <HAL_DMA_Abort_IT+0x90>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <HAL_DMA_Abort_IT+0xe0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00a      	beq.n	8001e1e <HAL_DMA_Abort_IT+0x8a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <HAL_DMA_Abort_IT+0xe4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d102      	bne.n	8001e18 <HAL_DMA_Abort_IT+0x84>
 8001e12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e16:	e00e      	b.n	8001e36 <HAL_DMA_Abort_IT+0xa2>
 8001e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1c:	e00b      	b.n	8001e36 <HAL_DMA_Abort_IT+0xa2>
 8001e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e22:	e008      	b.n	8001e36 <HAL_DMA_Abort_IT+0xa2>
 8001e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e28:	e005      	b.n	8001e36 <HAL_DMA_Abort_IT+0xa2>
 8001e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2e:	e002      	b.n	8001e36 <HAL_DMA_Abort_IT+0xa2>
 8001e30:	2310      	movs	r3, #16
 8001e32:	e000      	b.n	8001e36 <HAL_DMA_Abort_IT+0xa2>
 8001e34:	2301      	movs	r3, #1
 8001e36:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_DMA_Abort_IT+0xe8>)
 8001e38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
    } 
  }
  return status;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40020008 	.word	0x40020008
 8001e68:	4002001c 	.word	0x4002001c
 8001e6c:	40020030 	.word	0x40020030
 8001e70:	40020044 	.word	0x40020044
 8001e74:	40020058 	.word	0x40020058
 8001e78:	4002006c 	.word	0x4002006c
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d04f      	beq.n	8001f48 <HAL_DMA_IRQHandler+0xc8>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d04a      	beq.n	8001f48 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a66      	ldr	r2, [pc, #408]	; (8002070 <HAL_DMA_IRQHandler+0x1f0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d029      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xae>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a65      	ldr	r2, [pc, #404]	; (8002074 <HAL_DMA_IRQHandler+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_IRQHandler+0xaa>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_DMA_IRQHandler+0x1f8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0xa4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a62      	ldr	r2, [pc, #392]	; (800207c <HAL_DMA_IRQHandler+0x1fc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d012      	beq.n	8001f1e <HAL_DMA_IRQHandler+0x9e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a60      	ldr	r2, [pc, #384]	; (8002080 <HAL_DMA_IRQHandler+0x200>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00a      	beq.n	8001f18 <HAL_DMA_IRQHandler+0x98>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a5f      	ldr	r2, [pc, #380]	; (8002084 <HAL_DMA_IRQHandler+0x204>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d102      	bne.n	8001f12 <HAL_DMA_IRQHandler+0x92>
 8001f0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f10:	e00e      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f16:	e00b      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f1c:	e008      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f22:	e005      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f28:	e002      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f2a:	2340      	movs	r3, #64	; 0x40
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_IRQHandler+0xb0>
 8001f2e:	2304      	movs	r3, #4
 8001f30:	4a55      	ldr	r2, [pc, #340]	; (8002088 <HAL_DMA_IRQHandler+0x208>)
 8001f32:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8094 	beq.w	8002066 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f46:	e08e      	b.n	8002066 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d056      	beq.n	8002006 <HAL_DMA_IRQHandler+0x186>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d051      	beq.n	8002006 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0320 	and.w	r3, r3, #32
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 020a 	bic.w	r2, r2, #10
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	; (8002070 <HAL_DMA_IRQHandler+0x1f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d029      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x166>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a37      	ldr	r2, [pc, #220]	; (8002074 <HAL_DMA_IRQHandler+0x1f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d022      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x162>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a35      	ldr	r2, [pc, #212]	; (8002078 <HAL_DMA_IRQHandler+0x1f8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0x15c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_DMA_IRQHandler+0x1fc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d012      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x156>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a32      	ldr	r2, [pc, #200]	; (8002080 <HAL_DMA_IRQHandler+0x200>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x150>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a31      	ldr	r2, [pc, #196]	; (8002084 <HAL_DMA_IRQHandler+0x204>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d102      	bne.n	8001fca <HAL_DMA_IRQHandler+0x14a>
 8001fc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc8:	e00e      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	e00b      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd4:	e008      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fda:	e005      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe0:	e002      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e000      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x168>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <HAL_DMA_IRQHandler+0x208>)
 8001fea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d034      	beq.n	8002066 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002004:	e02f      	b.n	8002066 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2208      	movs	r2, #8
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d028      	beq.n	8002068 <HAL_DMA_IRQHandler+0x1e8>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020e 	bic.w	r2, r2, #14
 800202e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002038:	2101      	movs	r1, #1
 800203a:	fa01 f202 	lsl.w	r2, r1, r2
 800203e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
    }
  }
  return;
 8002066:	bf00      	nop
 8002068:	bf00      	nop
}
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40020008 	.word	0x40020008
 8002074:	4002001c 	.word	0x4002001c
 8002078:	40020030 	.word	0x40020030
 800207c:	40020044 	.word	0x40020044
 8002080:	40020058 	.word	0x40020058
 8002084:	4002006c 	.word	0x4002006c
 8002088:	40020000 	.word	0x40020000

0800208c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d108      	bne.n	80020cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ca:	e007      	b.n	80020dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b08b      	sub	sp, #44	; 0x2c
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e169      	b.n	80023d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020fc:	2201      	movs	r2, #1
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 8158 	bne.w	80023ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4a9a      	ldr	r2, [pc, #616]	; (8002388 <HAL_GPIO_Init+0x2a0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d05e      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002124:	4a98      	ldr	r2, [pc, #608]	; (8002388 <HAL_GPIO_Init+0x2a0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d875      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800212a:	4a98      	ldr	r2, [pc, #608]	; (800238c <HAL_GPIO_Init+0x2a4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d058      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002130:	4a96      	ldr	r2, [pc, #600]	; (800238c <HAL_GPIO_Init+0x2a4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d86f      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002136:	4a96      	ldr	r2, [pc, #600]	; (8002390 <HAL_GPIO_Init+0x2a8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d052      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 800213c:	4a94      	ldr	r2, [pc, #592]	; (8002390 <HAL_GPIO_Init+0x2a8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d869      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002142:	4a94      	ldr	r2, [pc, #592]	; (8002394 <HAL_GPIO_Init+0x2ac>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d04c      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002148:	4a92      	ldr	r2, [pc, #584]	; (8002394 <HAL_GPIO_Init+0x2ac>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d863      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800214e:	4a92      	ldr	r2, [pc, #584]	; (8002398 <HAL_GPIO_Init+0x2b0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d046      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
 8002154:	4a90      	ldr	r2, [pc, #576]	; (8002398 <HAL_GPIO_Init+0x2b0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d85d      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 800215a:	2b12      	cmp	r3, #18
 800215c:	d82a      	bhi.n	80021b4 <HAL_GPIO_Init+0xcc>
 800215e:	2b12      	cmp	r3, #18
 8002160:	d859      	bhi.n	8002216 <HAL_GPIO_Init+0x12e>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_GPIO_Init+0x80>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	080021e3 	.word	0x080021e3
 800216c:	080021bd 	.word	0x080021bd
 8002170:	080021cf 	.word	0x080021cf
 8002174:	08002211 	.word	0x08002211
 8002178:	08002217 	.word	0x08002217
 800217c:	08002217 	.word	0x08002217
 8002180:	08002217 	.word	0x08002217
 8002184:	08002217 	.word	0x08002217
 8002188:	08002217 	.word	0x08002217
 800218c:	08002217 	.word	0x08002217
 8002190:	08002217 	.word	0x08002217
 8002194:	08002217 	.word	0x08002217
 8002198:	08002217 	.word	0x08002217
 800219c:	08002217 	.word	0x08002217
 80021a0:	08002217 	.word	0x08002217
 80021a4:	08002217 	.word	0x08002217
 80021a8:	08002217 	.word	0x08002217
 80021ac:	080021c5 	.word	0x080021c5
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	4a79      	ldr	r2, [pc, #484]	; (800239c <HAL_GPIO_Init+0x2b4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ba:	e02c      	b.n	8002216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	623b      	str	r3, [r7, #32]
          break;
 80021c2:	e029      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	3304      	adds	r3, #4
 80021ca:	623b      	str	r3, [r7, #32]
          break;
 80021cc:	e024      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	3308      	adds	r3, #8
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e01f      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	330c      	adds	r3, #12
 80021de:	623b      	str	r3, [r7, #32]
          break;
 80021e0:	e01a      	b.n	8002218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d102      	bne.n	80021f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ea:	2304      	movs	r3, #4
 80021ec:	623b      	str	r3, [r7, #32]
          break;
 80021ee:	e013      	b.n	8002218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f8:	2308      	movs	r3, #8
 80021fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	611a      	str	r2, [r3, #16]
          break;
 8002202:	e009      	b.n	8002218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002204:	2308      	movs	r3, #8
 8002206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	615a      	str	r2, [r3, #20]
          break;
 800220e:	e003      	b.n	8002218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x130>
          break;
 8002216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2bff      	cmp	r3, #255	; 0xff
 800221c:	d801      	bhi.n	8002222 <HAL_GPIO_Init+0x13a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_Init+0x13e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	; 0xff
 800222c:	d802      	bhi.n	8002234 <HAL_GPIO_Init+0x14c>
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	e002      	b.n	800223a <HAL_GPIO_Init+0x152>
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	3b08      	subs	r3, #8
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	210f      	movs	r1, #15
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	fa01 f303 	lsl.w	r3, r1, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	401a      	ands	r2, r3
 800224c:	6a39      	ldr	r1, [r7, #32]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	431a      	orrs	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80b1 	beq.w	80023ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002268:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <HAL_GPIO_Init+0x2b8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <HAL_GPIO_Init+0x2b8>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <HAL_GPIO_Init+0x2b8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002280:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_GPIO_Init+0x2bc>)
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a40      	ldr	r2, [pc, #256]	; (80023a8 <HAL_GPIO_Init+0x2c0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d013      	beq.n	80022d4 <HAL_GPIO_Init+0x1ec>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <HAL_GPIO_Init+0x2c4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d00d      	beq.n	80022d0 <HAL_GPIO_Init+0x1e8>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3e      	ldr	r2, [pc, #248]	; (80023b0 <HAL_GPIO_Init+0x2c8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <HAL_GPIO_Init+0x1e4>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3d      	ldr	r2, [pc, #244]	; (80023b4 <HAL_GPIO_Init+0x2cc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d101      	bne.n	80022c8 <HAL_GPIO_Init+0x1e0>
 80022c4:	2303      	movs	r3, #3
 80022c6:	e006      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022c8:	2304      	movs	r3, #4
 80022ca:	e004      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e002      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_GPIO_Init+0x1ee>
 80022d4:	2300      	movs	r3, #0
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	f002 0203 	and.w	r2, r2, #3
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4093      	lsls	r3, r2
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022e6:	492f      	ldr	r1, [pc, #188]	; (80023a4 <HAL_GPIO_Init+0x2bc>)
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d006      	beq.n	800230e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	492c      	ldr	r1, [pc, #176]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	43db      	mvns	r3, r3
 8002316:	4928      	ldr	r1, [pc, #160]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002318:	4013      	ands	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4922      	ldr	r1, [pc, #136]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
 8002334:	e006      	b.n	8002344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	43db      	mvns	r3, r3
 800233e:	491e      	ldr	r1, [pc, #120]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002340:	4013      	ands	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4918      	ldr	r1, [pc, #96]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	43db      	mvns	r3, r3
 8002366:	4914      	ldr	r1, [pc, #80]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 8002368:	4013      	ands	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d021      	beq.n	80023bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <HAL_GPIO_Init+0x2d0>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
 8002384:	e021      	b.n	80023ca <HAL_GPIO_Init+0x2e2>
 8002386:	bf00      	nop
 8002388:	10320000 	.word	0x10320000
 800238c:	10310000 	.word	0x10310000
 8002390:	10220000 	.word	0x10220000
 8002394:	10210000 	.word	0x10210000
 8002398:	10120000 	.word	0x10120000
 800239c:	10110000 	.word	0x10110000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010800 	.word	0x40010800
 80023ac:	40010c00 	.word	0x40010c00
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40011400 	.word	0x40011400
 80023b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_GPIO_Init+0x304>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4909      	ldr	r1, [pc, #36]	; (80023ec <HAL_GPIO_Init+0x304>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	3301      	adds	r3, #1
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f47f ae8e 	bne.w	80020fc <HAL_GPIO_Init+0x14>
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	372c      	adds	r7, #44	; 0x2c
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40010400 	.word	0x40010400

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e26c      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8087 	beq.w	800254e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002440:	4b92      	ldr	r3, [pc, #584]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b04      	cmp	r3, #4
 800244a:	d00c      	beq.n	8002466 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800244c:	4b8f      	ldr	r3, [pc, #572]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d112      	bne.n	800247e <HAL_RCC_OscConfig+0x5e>
 8002458:	4b8c      	ldr	r3, [pc, #560]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002464:	d10b      	bne.n	800247e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002466:	4b89      	ldr	r3, [pc, #548]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d06c      	beq.n	800254c <HAL_RCC_OscConfig+0x12c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d168      	bne.n	800254c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e246      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x76>
 8002488:	4b80      	ldr	r3, [pc, #512]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a7f      	ldr	r2, [pc, #508]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e02e      	b.n	80024f4 <HAL_RCC_OscConfig+0xd4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x98>
 800249e:	4b7b      	ldr	r3, [pc, #492]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7a      	ldr	r2, [pc, #488]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b78      	ldr	r3, [pc, #480]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a77      	ldr	r2, [pc, #476]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xd4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0xbc>
 80024c2:	4b72      	ldr	r3, [pc, #456]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a71      	ldr	r2, [pc, #452]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6e      	ldr	r2, [pc, #440]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xd4>
 80024dc:	4b6b      	ldr	r3, [pc, #428]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6a      	ldr	r2, [pc, #424]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b68      	ldr	r3, [pc, #416]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a67      	ldr	r2, [pc, #412]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fa48 	bl	8001990 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff fa44 	bl	8001990 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e1fa      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b5d      	ldr	r3, [pc, #372]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xe4>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7ff fa34 	bl	8001990 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff fa30 	bl	8001990 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	; 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1e6      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x10c>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d063      	beq.n	8002622 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255a:	4b4c      	ldr	r3, [pc, #304]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b08      	cmp	r3, #8
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x18c>
 8002572:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x176>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1ba      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4939      	ldr	r1, [pc, #228]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	e03a      	b.n	8002622 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d020      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_RCC_OscConfig+0x270>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7ff f9e9 	bl	8001990 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7ff f9e5 	bl	8001990 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e19b      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4927      	ldr	r1, [pc, #156]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCC_OscConfig+0x270>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff f9c8 	bl	8001990 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002604:	f7ff f9c4 	bl	8001990 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e17a      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d03a      	beq.n	80026a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d019      	beq.n	800266a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <HAL_RCC_OscConfig+0x274>)
 8002638:	2201      	movs	r2, #1
 800263a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7ff f9a8 	bl	8001990 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7ff f9a4 	bl	8001990 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e15a      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <HAL_RCC_OscConfig+0x26c>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002662:	2001      	movs	r0, #1
 8002664:	f000 fb0a 	bl	8002c7c <RCC_Delay>
 8002668:	e01c      	b.n	80026a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_RCC_OscConfig+0x274>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7ff f98e 	bl	8001990 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002676:	e00f      	b.n	8002698 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7ff f98a 	bl	8001990 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d908      	bls.n	8002698 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e140      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000
 8002690:	42420000 	.word	0x42420000
 8002694:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	4b9e      	ldr	r3, [pc, #632]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1e9      	bne.n	8002678 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a6 	beq.w	80027fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b6:	4b97      	ldr	r3, [pc, #604]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b94      	ldr	r3, [pc, #592]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	4a93      	ldr	r2, [pc, #588]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	61d3      	str	r3, [r2, #28]
 80026ce:	4b91      	ldr	r3, [pc, #580]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026de:	4b8e      	ldr	r3, [pc, #568]	; (8002918 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ea:	4b8b      	ldr	r3, [pc, #556]	; (8002918 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a8a      	ldr	r2, [pc, #552]	; (8002918 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7ff f94b 	bl	8001990 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7ff f947 	bl	8001990 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e0fd      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b81      	ldr	r3, [pc, #516]	; (8002918 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x312>
 8002724:	4b7b      	ldr	r3, [pc, #492]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a7a      	ldr	r2, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	e02d      	b.n	800278e <HAL_RCC_OscConfig+0x36e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x334>
 800273a:	4b76      	ldr	r3, [pc, #472]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a75      	ldr	r2, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a72      	ldr	r2, [pc, #456]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	e01c      	b.n	800278e <HAL_RCC_OscConfig+0x36e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d10c      	bne.n	8002776 <HAL_RCC_OscConfig+0x356>
 800275c:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a69      	ldr	r2, [pc, #420]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	e00b      	b.n	800278e <HAL_RCC_OscConfig+0x36e>
 8002776:	4b67      	ldr	r3, [pc, #412]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4a66      	ldr	r2, [pc, #408]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	6213      	str	r3, [r2, #32]
 8002782:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d015      	beq.n	80027c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7ff f8fb 	bl	8001990 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7ff f8f7 	bl	8001990 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0ab      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	4b57      	ldr	r3, [pc, #348]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ee      	beq.n	800279e <HAL_RCC_OscConfig+0x37e>
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7ff f8e5 	bl	8001990 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7ff f8e1 	bl	8001990 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e095      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b48      	ldr	r3, [pc, #288]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a47      	ldr	r2, [pc, #284]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8081 	beq.w	800290a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002808:	4b42      	ldr	r3, [pc, #264]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d061      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d146      	bne.n	80028aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <HAL_RCC_OscConfig+0x4fc>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7ff f8b5 	bl	8001990 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7ff f8b1 	bl	8001990 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e067      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283c:	4b35      	ldr	r3, [pc, #212]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d108      	bne.n	8002864 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002852:	4b30      	ldr	r3, [pc, #192]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	492d      	ldr	r1, [pc, #180]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b2b      	ldr	r3, [pc, #172]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a19      	ldr	r1, [r3, #32]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	430b      	orrs	r3, r1
 8002876:	4927      	ldr	r1, [pc, #156]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x4fc>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7ff f885 	bl	8001990 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7ff f881 	bl	8001990 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e037      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x46a>
 80028a8:	e02f      	b.n	800290a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_RCC_OscConfig+0x4fc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff f86e 	bl	8001990 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b8:	f7ff f86a 	bl	8001990 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e020      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x498>
 80028d6:	e018      	b.n	800290a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e013      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
 800291c:	42420060 	.word	0x42420060

08002920 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0d0      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d910      	bls.n	8002964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b67      	ldr	r3, [pc, #412]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 0207 	bic.w	r2, r3, #7
 800294a:	4965      	ldr	r1, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002986:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800299e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d040      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d115      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e073      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ee:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06b      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f023 0203 	bic.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4936      	ldr	r1, [pc, #216]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a10:	f7fe ffbe 	bl	8001990 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a18:	f7fe ffba 	bl	8001990 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e053      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 020c 	and.w	r2, r3, #12
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d1eb      	bne.n	8002a18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d210      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1cc>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fbd8 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	080071f4 	.word	0x080071f4
 8002aec:	20000008 	.word	0x20000008
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	b490      	push	{r4, r7}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002afa:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002afc:	1d3c      	adds	r4, r7, #4
 8002afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b04:	f240 2301 	movw	r3, #513	; 0x201
 8002b08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0x46>
 8002b32:	e02d      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b36:	623b      	str	r3, [r7, #32]
      break;
 8002b38:	e02d      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	0c9b      	lsrs	r3, r3, #18
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b46:	4413      	add	r3, r2
 8002b48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0c5b      	lsrs	r3, r3, #17
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b66:	4413      	add	r3, r2
 8002b68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	fb02 f203 	mul.w	r2, r2, r3
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e004      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b84:	fb02 f303 	mul.w	r3, r2, r3
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	623b      	str	r3, [r7, #32]
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b92:	623b      	str	r3, [r7, #32]
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	6a3b      	ldr	r3, [r7, #32]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3728      	adds	r7, #40	; 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc90      	pop	{r4, r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	080071d4 	.word	0x080071d4
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	00b71b00 	.word	0x00b71b00
 8002bb0:	003d0900 	.word	0x003d0900
 8002bb4:	007a1200 	.word	0x007a1200

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000008 	.word	0x20000008

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff2 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08007204 	.word	0x08007204

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	0adb      	lsrs	r3, r3, #11
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08007204 	.word	0x08007204

08002c1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	220f      	movs	r2, #15
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_GetClockConfig+0x58>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCC_GetClockConfig+0x58>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_GetClockConfig+0x58>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <HAL_RCC_GetClockConfig+0x58>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_GetClockConfig+0x5c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0207 	and.w	r2, r3, #7
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40022000 	.word	0x40022000

08002c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <RCC_Delay+0x34>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <RCC_Delay+0x38>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a5b      	lsrs	r3, r3, #9
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c98:	bf00      	nop
  }
  while (Delay --);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	60fa      	str	r2, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f9      	bne.n	8002c98 <RCC_Delay+0x1c>
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	10624dd3 	.word	0x10624dd3

08002cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e076      	b.n	8002db8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d108      	bne.n	8002ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cda:	d009      	beq.n	8002cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
 8002ce2:	e005      	b.n	8002cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe f9fa 	bl	8001104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	ea42 0103 	orr.w	r1, r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	0c1a      	lsrs	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f002 0204 	and.w	r2, r2, #4
 8002d96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e041      	b.n	8002e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fe fbc2 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f000 fa70 	bl	80032e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d001      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e03a      	b.n	8002eee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_TIM_Base_Start_IT+0x98>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x58>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d009      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x58>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <HAL_TIM_Base_Start_IT+0x9c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x58>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_TIM_Base_Start_IT+0xa0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d111      	bne.n	8002edc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d010      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eda:	e007      	b.n	8002eec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800

08002f04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9b1 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9a4 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f9b3 	bl	80032c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0204 	mvn.w	r2, #4
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f987 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f97a 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f989 	bl	80032c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d122      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d11b      	bne.n	8003008 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0208 	mvn.w	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f95d 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f950 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f95f 	bl	80032c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b10      	cmp	r3, #16
 8003014:	d122      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b10      	cmp	r3, #16
 8003022:	d11b      	bne.n	800305c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0210 	mvn.w	r2, #16
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2208      	movs	r2, #8
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f933 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f926 	bl	800329c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f935 	bl	80032c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0201 	mvn.w	r2, #1
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fec6 	bl	8000e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b80      	cmp	r3, #128	; 0x80
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa77 	bl	80035a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8f9 	bl	80032d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0320 	and.w	r3, r3, #32
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d107      	bne.n	800310c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0220 	mvn.w	r2, #32
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa42 	bl	8003590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_TIM_ConfigClockSource+0x18>
 8003128:	2302      	movs	r3, #2
 800312a:	e0b3      	b.n	8003294 <HAL_TIM_ConfigClockSource+0x180>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800314a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003152:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003164:	d03e      	beq.n	80031e4 <HAL_TIM_ConfigClockSource+0xd0>
 8003166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316a:	f200 8087 	bhi.w	800327c <HAL_TIM_ConfigClockSource+0x168>
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	f000 8085 	beq.w	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	d87f      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 800317c:	2b70      	cmp	r3, #112	; 0x70
 800317e:	d01a      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0xa2>
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d87b      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 8003184:	2b60      	cmp	r3, #96	; 0x60
 8003186:	d050      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x116>
 8003188:	2b60      	cmp	r3, #96	; 0x60
 800318a:	d877      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 800318c:	2b50      	cmp	r3, #80	; 0x50
 800318e:	d03c      	beq.n	800320a <HAL_TIM_ConfigClockSource+0xf6>
 8003190:	2b50      	cmp	r3, #80	; 0x50
 8003192:	d873      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 8003194:	2b40      	cmp	r3, #64	; 0x40
 8003196:	d058      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x136>
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d86f      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 800319c:	2b30      	cmp	r3, #48	; 0x30
 800319e:	d064      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x156>
 80031a0:	2b30      	cmp	r3, #48	; 0x30
 80031a2:	d86b      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d060      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x156>
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d867      	bhi.n	800327c <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05c      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x156>
 80031b0:	2b10      	cmp	r3, #16
 80031b2:	d05a      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031b4:	e062      	b.n	800327c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6899      	ldr	r1, [r3, #8]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f000 f966 	bl	8003496 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	609a      	str	r2, [r3, #8]
      break;
 80031e2:	e04e      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6899      	ldr	r1, [r3, #8]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f000 f94f 	bl	8003496 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003206:	609a      	str	r2, [r3, #8]
      break;
 8003208:	e03b      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	461a      	mov	r2, r3
 8003218:	f000 f8c6 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2150      	movs	r1, #80	; 0x50
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f91d 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8003228:	e02b      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	461a      	mov	r2, r3
 8003238:	f000 f8e4 	bl	8003404 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2160      	movs	r1, #96	; 0x60
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f90d 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8003248:	e01b      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	461a      	mov	r2, r3
 8003258:	f000 f8a6 	bl	80033a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2140      	movs	r1, #64	; 0x40
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f8fd 	bl	8003462 <TIM_ITRx_SetConfig>
      break;
 8003268:	e00b      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f000 f8f4 	bl	8003462 <TIM_ITRx_SetConfig>
        break;
 800327a:	e002      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003280:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <TIM_Base_SetConfig+0xb8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <TIM_Base_SetConfig+0x30>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d007      	beq.n	8003314 <TIM_Base_SetConfig+0x30>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <TIM_Base_SetConfig+0xbc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0x30>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <TIM_Base_SetConfig+0xc0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d108      	bne.n	8003326 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1c      	ldr	r2, [pc, #112]	; (800339c <TIM_Base_SetConfig+0xb8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0x62>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0x62>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <TIM_Base_SetConfig+0xbc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0x62>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <TIM_Base_SetConfig+0xc0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a07      	ldr	r2, [pc, #28]	; (800339c <TIM_Base_SetConfig+0xb8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d103      	bne.n	800338c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	615a      	str	r2, [r3, #20]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00
 80033a0:	40000400 	.word	0x40000400
 80033a4:	40000800 	.word	0x40000800

080033a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f023 030a 	bic.w	r3, r3, #10
 80033e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f023 0210 	bic.w	r2, r3, #16
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800342e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	031b      	lsls	r3, r3, #12
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003440:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr

08003462 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003462:	b480      	push	{r7}
 8003464:	b085      	sub	sp, #20
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003478:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	f043 0307 	orr.w	r3, r3, #7
 8003484:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	021a      	lsls	r2, r3, #8
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	609a      	str	r2, [r3, #8]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e046      	b.n	800357a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003538:	d009      	beq.n	800354e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a10      	ldr	r2, [pc, #64]	; (800358c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10c      	bne.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	4313      	orrs	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800

08003590 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e03f      	b.n	8003646 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe f840 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fde3 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800360c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800361c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08a      	sub	sp, #40	; 0x28
 8003652:	af02      	add	r7, sp, #8
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	d17c      	bne.n	8003768 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_UART_Transmit+0x2c>
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e075      	b.n	800376a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_UART_Transmit+0x3e>
 8003688:	2302      	movs	r3, #2
 800368a:	e06e      	b.n	800376a <HAL_UART_Transmit+0x11c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2221      	movs	r2, #33	; 0x21
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a2:	f7fe f975 	bl	8001990 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036bc:	d108      	bne.n	80036d0 <HAL_UART_Transmit+0x82>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e003      	b.n	80036d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036e0:	e02a      	b.n	8003738 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fb54 	bl	8003d9a <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e036      	b.n	800376a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3302      	adds	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e007      	b.n	800372a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1cf      	bne.n	80036e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fb24 	bl	8003d9a <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e006      	b.n	800376a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
  }
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	4613      	mov	r3, r2
 800377e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	d11d      	bne.n	80037c8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_UART_Receive_DMA+0x26>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e016      	b.n	80037ca <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Receive_DMA+0x38>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e00f      	b.n	80037ca <HAL_UART_Receive_DMA+0x58>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fb36 	bl	8003e30 <UART_Start_Receive_DMA>
 80037c4:	4603      	mov	r3, r0
 80037c6:	e000      	b.n	80037ca <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b21      	cmp	r3, #33	; 0x21
 80037fe:	d116      	bne.n	800382e <HAL_UART_DMAStop+0x5c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003814:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fa7b 	bl	8001d1e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb65 	bl	8003ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b22      	cmp	r3, #34	; 0x22
 800384e:	d116      	bne.n	800387e <HAL_UART_DMAStop+0xac>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d013      	beq.n	800387e <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003864:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fa53 	bl	8001d1e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb52 	bl	8003f22 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_UART_IRQHandler+0x52>
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fbcc 	bl	8004070 <UART_Receive_IT>
      return;
 80038d8:	e17b      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80b1 	beq.w	8003a44 <HAL_UART_IRQHandler+0x1bc>
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_UART_IRQHandler+0x70>
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80a6 	beq.w	8003a44 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_UART_IRQHandler+0x90>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0201 	orr.w	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_UART_IRQHandler+0xb0>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_UART_IRQHandler+0xd0>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00f      	beq.n	8003982 <HAL_UART_IRQHandler+0xfa>
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_UART_IRQHandler+0xee>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0208 	orr.w	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 811e 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_UART_IRQHandler+0x11e>
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f003 0320 	and.w	r3, r3, #32
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fb65 	bl	8004070 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <HAL_UART_IRQHandler+0x146>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d031      	beq.n	8003a32 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 faa7 	bl	8003f22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d023      	beq.n	8003a2a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d013      	beq.n	8003a22 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	4a76      	ldr	r2, [pc, #472]	; (8003bd8 <HAL_UART_IRQHandler+0x350>)
 8003a00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe f9c4 	bl	8001d94 <HAL_DMA_Abort_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a20:	e00e      	b.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f8f5 	bl	8003c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a28:	e00a      	b.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8f1 	bl	8003c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	e006      	b.n	8003a40 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8ed 	bl	8003c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a3e:	e0c3      	b.n	8003bc8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a40:	bf00      	nop
    return;
 8003a42:	e0c1      	b.n	8003bc8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 80a1 	bne.w	8003b90 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 809b 	beq.w	8003b90 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8095 	beq.w	8003b90 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04e      	beq.n	8003b28 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a94:	8a3b      	ldrh	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8098 	beq.w	8003bcc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aa0:	8a3a      	ldrh	r2, [r7, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	f080 8092 	bcs.w	8003bcc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8a3a      	ldrh	r2, [r7, #16]
 8003aac:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d02b      	beq.n	8003b10 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0210 	bic.w	r2, r2, #16
 8003b04:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe f907 	bl	8001d1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4619      	mov	r1, r3
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f87f 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b26:	e051      	b.n	8003bcc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d047      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003b40:	8a7b      	ldrh	r3, [r7, #18]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d044      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b54:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0210 	bic.w	r2, r2, #16
 8003b82:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b84:	8a7b      	ldrh	r3, [r7, #18]
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f84b 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b8e:	e01f      	b.n	8003bd0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_UART_IRQHandler+0x324>
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f9fc 	bl	8003fa2 <UART_Transmit_IT>
    return;
 8003baa:	e012      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fa3d 	bl	8004040 <UART_EndTransmit_IT>
    return;
 8003bc6:	e004      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
    return;
 8003bc8:	bf00      	nop
 8003bca:	e002      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_UART_IRQHandler+0x34a>
      return;
 8003bd0:	bf00      	nop
  }
}
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	08003f7b 	.word	0x08003f7b

08003bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d12a      	bne.n	8003cac <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c6a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0210 	bic.w	r2, r2, #16
 8003caa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb8:	4619      	mov	r1, r3
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ffb2 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cc0:	e002      	b.n	8003cc8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff ff93 	bl	8003bee <HAL_UART_RxCpltCallback>
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cea:	085b      	lsrs	r3, r3, #1
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff ff97 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cf6:	e002      	b.n	8003cfe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff81 	bl	8003c00 <HAL_UART_RxHalfCpltCallback>
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b21      	cmp	r3, #33	; 0x21
 8003d38:	d108      	bne.n	8003d4c <UART_DMAError+0x46>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	f000 f8d6 	bl	8003ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf14      	ite	ne
 8003d5a:	2301      	movne	r3, #1
 8003d5c:	2300      	moveq	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b22      	cmp	r3, #34	; 0x22
 8003d6c:	d108      	bne.n	8003d80 <UART_DMAError+0x7a>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d7a:	68b8      	ldr	r0, [r7, #8]
 8003d7c:	f000 f8d1 	bl	8003f22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f043 0210 	orr.w	r2, r3, #16
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d8c:	68b8      	ldr	r0, [r7, #8]
 8003d8e:	f7ff ff40 	bl	8003c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	603b      	str	r3, [r7, #0]
 8003da6:	4613      	mov	r3, r2
 8003da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003daa:	e02c      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d028      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <UART_WaitOnFlagUntilTimeout+0x30>
 8003dba:	f7fd fde9 	bl	8001990 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d21d      	bcs.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e00f      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	bf0c      	ite	eq
 8003e16:	2301      	moveq	r3, #1
 8003e18:	2300      	movne	r3, #0
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d0c3      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2222      	movs	r2, #34	; 0x22
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	4a23      	ldr	r2, [pc, #140]	; (8003eec <UART_Start_Receive_DMA+0xbc>)
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <UART_Start_Receive_DMA+0xc0>)
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <UART_Start_Receive_DMA+0xc4>)
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	2200      	movs	r2, #0
 8003e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e78:	f107 0308 	add.w	r3, r7, #8
 8003e7c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4619      	mov	r1, r3
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	f7fd fee6 	bl	8001c60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08003c3b 	.word	0x08003c3b
 8003ef0:	08003cd1 	.word	0x08003cd1
 8003ef4:	08003d07 	.word	0x08003d07

08003ef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003f0e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr

08003f22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0210 	bic.w	r2, r2, #16
 8003f60:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff fe3c 	bl	8003c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b21      	cmp	r3, #33	; 0x21
 8003fb4:	d13e      	bne.n	8004034 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbe:	d114      	bne.n	8003fea <UART_Transmit_IT+0x48>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d110      	bne.n	8003fea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fdc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	1c9a      	adds	r2, r3, #2
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]
 8003fe8:	e008      	b.n	8003ffc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6211      	str	r1, [r2, #32]
 8003ff4:	781a      	ldrb	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800401e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004056:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fdbb 	bl	8003bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b22      	cmp	r3, #34	; 0x22
 8004082:	f040 8099 	bne.w	80041b8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d117      	bne.n	80040c0 <UART_Receive_IT+0x50>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d113      	bne.n	80040c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	1c9a      	adds	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
 80040be:	e026      	b.n	800410e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	d007      	beq.n	80040e4 <UART_Receive_IT+0x74>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <UART_Receive_IT+0x82>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e008      	b.n	8004104 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4619      	mov	r1, r3
 800411c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800411e:	2b00      	cmp	r3, #0
 8004120:	d148      	bne.n	80041b4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0220 	bic.w	r2, r2, #32
 8004130:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004140:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	2b01      	cmp	r3, #1
 8004160:	d123      	bne.n	80041aa <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0210 	bic.w	r2, r2, #16
 8004176:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d10a      	bne.n	800419c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7ff fd3e 	bl	8003c24 <HAL_UARTEx_RxEventCallback>
 80041a8:	e002      	b.n	80041b0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fd1f 	bl	8003bee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e002      	b.n	80041ba <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041fe:	f023 030c 	bic.w	r3, r3, #12
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	430b      	orrs	r3, r1
 800420a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <UART_SetConfig+0x114>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d103      	bne.n	8004234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800422c:	f7fe fce2 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	e002      	b.n	800423a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004234:	f7fe fcca 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8004238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004250:	4a22      	ldr	r2, [pc, #136]	; (80042dc <UART_SetConfig+0x118>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	0119      	lsls	r1, r3, #4
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <UART_SetConfig+0x118>)
 8004272:	fba3 0302 	umull	r0, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2064      	movs	r0, #100	; 0x64
 800427a:	fb00 f303 	mul.w	r3, r0, r3
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	3332      	adds	r3, #50	; 0x32
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <UART_SetConfig+0x118>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004290:	4419      	add	r1, r3
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	009a      	lsls	r2, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <UART_SetConfig+0x118>)
 80042aa:	fba3 0302 	umull	r0, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2064      	movs	r0, #100	; 0x64
 80042b2:	fb00 f303 	mul.w	r3, r0, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	3332      	adds	r3, #50	; 0x32
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <UART_SetConfig+0x118>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	440a      	add	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40013800 	.word	0x40013800
 80042dc:	51eb851f 	.word	0x51eb851f

080042e0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80042e0:	b590      	push	{r4, r7, lr}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	int len = 0;
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7a1b      	ldrb	r3, [r3, #8]
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d102      	bne.n	80042fa <MQTTSerialize_connectLength+0x1a>
		len = 12; /* ПЕРЕМЕННАЯ В ЗАВИСИМОТИ ОТ ВЕРСИИ MQTT  */
 80042f4:	230c      	movs	r3, #12
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e005      	b.n	8004306 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	7a1b      	ldrb	r3, [r3, #8]
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d101      	bne.n	8004306 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8004302:	230a      	movs	r3, #10
 8004304:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	330c      	adds	r3, #12
 800430a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800430e:	f000 fb37 	bl	8004980 <MQTTstrlen>
 8004312:	4603      	mov	r3, r0
 8004314:	3302      	adds	r3, #2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7edb      	ldrb	r3, [r3, #27]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3324      	adds	r3, #36	; 0x24
 8004328:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800432c:	f000 fb28 	bl	8004980 <MQTTstrlen>
 8004330:	4603      	mov	r3, r0
 8004332:	1c9c      	adds	r4, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3330      	adds	r3, #48	; 0x30
 8004338:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800433c:	f000 fb20 	bl	8004980 <MQTTstrlen>
 8004340:	4603      	mov	r3, r0
 8004342:	4423      	add	r3, r4
 8004344:	3302      	adds	r3, #2
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <MQTTSerialize_connectLength+0x7c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3340      	adds	r3, #64	; 0x40
 8004360:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004364:	f000 fb0c 	bl	8004980 <MQTTstrlen>
 8004368:	4603      	mov	r3, r0
 800436a:	3302      	adds	r3, #2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <MQTTSerialize_connectLength+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	334c      	adds	r3, #76	; 0x4c
 8004386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800438a:	f000 faf9 	bl	8004980 <MQTTstrlen>
 800438e:	4603      	mov	r3, r0
 8004390:	3302      	adds	r3, #2
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8004398:	68fb      	ldr	r3, [r7, #12]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}
	...

080043a4 <MQTTSerialize_connect>:
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
/*********************************СОЕДИНЕНИЕ*******************************************************/
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
	int len = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
	int rc = -1;
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff8a 	bl	80042e0 <MQTTSerialize_connectLength>
 80043cc:	6238      	str	r0, [r7, #32]
 80043ce:	6a38      	ldr	r0, [r7, #32]
 80043d0:	f000 f9da 	bl	8004788 <MQTTPacket_len>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4293      	cmp	r3, r2
 80043da:	da03      	bge.n	80043e4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80043dc:	f06f 0301 	mvn.w	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 80043e2:	e0c2      	b.n	800456a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80043e8:	7e3b      	ldrb	r3, [r7, #24]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f362 1307 	bfi	r3, r2, #4, #4
 80043f0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte);
 80043f2:	7e3a      	ldrb	r2, [r7, #24]
 80043f4:	f107 031c 	add.w	r3, r7, #28
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa37 	bl	800486e <writeChar>

	ptr += MQTTPacket_encode(ptr, len);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	6a39      	ldr	r1, [r7, #32]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f955 	bl	80046b4 <MQTTPacket_encode>
 800440a:	4602      	mov	r2, r0
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	7a1b      	ldrb	r3, [r3, #8]
 8004416:	2b04      	cmp	r3, #4
 8004418:	d10c      	bne.n	8004434 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800441a:	f107 031c 	add.w	r3, r7, #28
 800441e:	4955      	ldr	r1, [pc, #340]	; (8004574 <MQTTSerialize_connect+0x1d0>)
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fa60 	bl	80048e6 <writeCString>
		writeChar(&ptr, (char) 4);
 8004426:	f107 031c 	add.w	r3, r7, #28
 800442a:	2104      	movs	r1, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fa1e 	bl	800486e <writeChar>
 8004432:	e00b      	b.n	800444c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8004434:	f107 031c 	add.w	r3, r7, #28
 8004438:	494f      	ldr	r1, [pc, #316]	; (8004578 <MQTTSerialize_connect+0x1d4>)
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fa53 	bl	80048e6 <writeCString>
		writeChar(&ptr, (char) 3);
 8004440:	f107 031c 	add.w	r3, r7, #28
 8004444:	2103      	movs	r1, #3
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa11 	bl	800486e <writeChar>
	}

	flags.all = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7e9b      	ldrb	r3, [r3, #26]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	7d3b      	ldrb	r3, [r7, #20]
 800445c:	f362 0341 	bfi	r3, r2, #1, #1
 8004460:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7edb      	ldrb	r3, [r3, #27]
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf14      	ite	ne
 800446a:	2301      	movne	r3, #1
 800446c:	2300      	moveq	r3, #0
 800446e:	b2da      	uxtb	r2, r3
 8004470:	7d3b      	ldrb	r3, [r7, #20]
 8004472:	f362 0382 	bfi	r3, r2, #2, #1
 8004476:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8004478:	7d3b      	ldrb	r3, [r7, #20]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	b2da      	uxtb	r2, r3
 8004490:	7d3b      	ldrb	r3, [r7, #20]
 8004492:	f362 03c4 	bfi	r3, r2, #3, #2
 8004496:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	7d3b      	ldrb	r3, [r7, #20]
 80044a6:	f362 1345 	bfi	r3, r2, #5, #1
 80044aa:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <MQTTSerialize_connect+0x118>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80044bc:	7d3b      	ldrb	r3, [r7, #20]
 80044be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d103      	bne.n	80044d4 <MQTTSerialize_connect+0x130>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80044d4:	7d3b      	ldrb	r3, [r7, #20]
 80044d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044da:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80044dc:	7d3a      	ldrb	r2, [r7, #20]
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 f9c2 	bl	800486e <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8b1b      	ldrh	r3, [r3, #24]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f9cd 	bl	8004896 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f107 001c 	add.w	r0, r7, #28
 8004502:	330c      	adds	r3, #12
 8004504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004506:	f000 fa0d 	bl	8004924 <writeMQTTString>
	if (options->willFlag)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7edb      	ldrb	r3, [r3, #27]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f107 001c 	add.w	r0, r7, #28
 8004518:	3324      	adds	r3, #36	; 0x24
 800451a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800451c:	f000 fa02 	bl	8004924 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f107 001c 	add.w	r0, r7, #28
 8004526:	3330      	adds	r3, #48	; 0x30
 8004528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800452a:	f000 f9fb 	bl	8004924 <writeMQTTString>
	}
	if (flags.bits.username)
 800452e:	7d3b      	ldrb	r3, [r7, #20]
 8004530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d006      	beq.n	8004548 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f107 001c 	add.w	r0, r7, #28
 8004540:	3340      	adds	r3, #64	; 0x40
 8004542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004544:	f000 f9ee 	bl	8004924 <writeMQTTString>
	if (flags.bits.password)
 8004548:	7d3b      	ldrb	r3, [r7, #20]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f107 001c 	add.w	r0, r7, #28
 800455a:	334c      	adds	r3, #76	; 0x4c
 800455c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800455e:	f000 f9e1 	bl	8004924 <writeMQTTString>

	rc = ptr - buf;
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800456c:	4618      	mov	r0, r3
 800456e:	3728      	adds	r7, #40	; 0x28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	080071e4 	.word	0x080071e4
 8004578:	080071ec 	.word	0x080071ec

0800457c <MQTTDeserialize_connack>:
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
/****************************************CONNACK***********************************************************************/
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800459e:	f107 0318 	add.w	r3, r7, #24
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f950 	bl	8004848 <readChar>
 80045a8:	4603      	mov	r3, r0
 80045aa:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80045ac:	7f3b      	ldrb	r3, [r7, #28]
 80045ae:	f023 030f 	bic.w	r3, r3, #15
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d12e      	bne.n	8004616 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	f107 0214 	add.w	r2, r7, #20
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f92b 	bl	800481c <MQTTPacket_decodeBuf>
 80045c6:	6278      	str	r0, [r7, #36]	; 0x24
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6a3a      	ldr	r2, [r7, #32]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	dd1b      	ble.n	800461a <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 80045e2:	f107 0318 	add.w	r3, r7, #24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f92e 	bl	8004848 <readChar>
 80045ec:	4603      	mov	r3, r0
 80045ee:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 80045f0:	7c3b      	ldrb	r3, [r7, #16]
 80045f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80045fe:	f107 0318 	add.w	r3, r7, #24
 8004602:	4618      	mov	r0, r3
 8004604:	f000 f920 	bl	8004848 <readChar>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8004610:	2301      	movs	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
 8004614:	e002      	b.n	800461c <MQTTDeserialize_connack+0xa0>
		goto exit;
 8004616:	bf00      	nop
 8004618:	e000      	b.n	800461c <MQTTDeserialize_connack+0xa0>
		goto exit;
 800461a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	4613      	mov	r3, r2
 8004632:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b01      	cmp	r3, #1
 8004646:	dc03      	bgt.n	8004650 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8004648:	f06f 0301 	mvn.w	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
		goto exit;
 800464e:	e01d      	b.n	800468c <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	b2da      	uxtb	r2, r3
 800465c:	7e3b      	ldrb	r3, [r7, #24]
 800465e:	f362 1307 	bfi	r3, r2, #4, #4
 8004662:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte);
 8004664:	7e3a      	ldrb	r2, [r7, #24]
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	4611      	mov	r1, r2
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f8fe 	bl	800486e <writeChar>

	ptr += MQTTPacket_encode(ptr, 0);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f81c 	bl	80046b4 <MQTTPacket_encode>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4413      	add	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800468c:	69fb      	ldr	r3, [r7, #28]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
/**********************ОТКЛЮЧЕНИЕ********************************************/
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80046a0:	220e      	movs	r2, #14
 80046a2:	6839      	ldr	r1, [r7, #0]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ffbe 	bl	8004626 <MQTTSerialize_zero>
 80046aa:	4603      	mov	r3, r0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	425a      	negs	r2, r3
 80046c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046ce:	bf58      	it	pl
 80046d0:	4253      	negpl	r3, r2
 80046d2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da00      	bge.n	80046dc <MQTTPacket_encode+0x28>
 80046da:	337f      	adds	r3, #127	; 0x7f
 80046dc:	11db      	asrs	r3, r3, #7
 80046de:	603b      	str	r3, [r7, #0]
		/* ЕСЛИ ДЛЯ КОДИРОВАНИЯ НУЖНО БОЛЬШЕ ЦИФР УСТАНОВИТЕ ВЕРХНИЙ БИТ БОЛЬШЕ */
		if (length > 0)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	dd03      	ble.n	80046ee <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80046e6:	7afb      	ldrb	r3, [r7, #11]
 80046e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ec:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	60fa      	str	r2, [r7, #12]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	7afa      	ldrb	r2, [r7, #11]
 80046fc:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	dcde      	bgt.n	80046c2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8004704:	68fb      	ldr	r3, [r7, #12]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <MQTTPacket_decode>:
 * @param получает указатель charfn на функцию для чтения следующего символа из источника данных
 * @param значение возвращаемой декодированной длины
 * @возвращает количество байт, считанных из сокета
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
	int len = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8004728:	f04f 33ff 	mov.w	r3, #4294967295
 800472c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3301      	adds	r3, #1
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b04      	cmp	r3, #4
 8004738:	dd03      	ble.n	8004742 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* ОШИБКА ДАННЫХ */
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	60fb      	str	r3, [r7, #12]
			goto exit;
 8004740:	e01d      	b.n	800477e <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8004742:	f107 020b 	add.w	r2, r7, #11
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2101      	movs	r1, #1
 800474a:	4610      	mov	r0, r2
 800474c:	4798      	blx	r3
 800474e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d112      	bne.n	800477c <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	441a      	add	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8004772:	7afb      	ldrb	r3, [r7, #11]
 8004774:	b25b      	sxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	dbd6      	blt.n	8004728 <MQTTPacket_decode+0x18>
exit:
 800477a:	e000      	b.n	800477e <MQTTPacket_decode+0x6e>
			goto exit;
 800477c:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800477e:	693b      	ldr	r3, [r7, #16]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	rem_len += 1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3301      	adds	r3, #1
 8004794:	607b      	str	r3, [r7, #4]

	if (rem_len < 128)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b7f      	cmp	r3, #127	; 0x7f
 800479a:	dc03      	bgt.n	80047a4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3301      	adds	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	e012      	b.n	80047ca <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047aa:	da03      	bge.n	80047b4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3302      	adds	r3, #2
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	e00a      	b.n	80047ca <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <MQTTPacket_len+0x50>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	dc03      	bgt.n	80047c4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3303      	adds	r3, #3
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	e002      	b.n	80047ca <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	607b      	str	r3, [r7, #4]
	return rem_len;
 80047ca:	687b      	ldr	r3, [r7, #4]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bc80      	pop	{r7}
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	001ffffe 	.word	0x001ffffe

080047dc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e00a      	b.n	8004802 <bufchar+0x26>
		*c = *bufptr++;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <bufchar+0x3c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	4909      	ldr	r1, [pc, #36]	; (8004818 <bufchar+0x3c>)
 80047f4:	600a      	str	r2, [r1, #0]
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	dbf0      	blt.n	80047ec <bufchar+0x10>
	return count;
 800480a:	683b      	ldr	r3, [r7, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200000a8 	.word	0x200000a8

0800481c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8004826:	4a06      	ldr	r2, [pc, #24]	; (8004840 <MQTTPacket_decodeBuf+0x24>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <MQTTPacket_decodeBuf+0x28>)
 8004830:	f7ff ff6e 	bl	8004710 <MQTTPacket_decode>
 8004834:	4603      	mov	r3, r0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200000a8 	.word	0x200000a8
 8004844:	080047dd 	.word	0x080047dd

08004848 <readChar>:
* Считывает один символ из входного буфера.
 * @param pptr указатель на входной буфер - увеличивается на количество использованных и возвращенных байтов
 * @возвращает прочитанный символ
 */
char readChar(unsigned char** pptr)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
	return c;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <writeChar>:
* Записывает один символ в выходной буфер.
 * @param pptr указатель на выходной буфер - увеличивается на количество использованных и возвращенных байтов
 * @param c символ для записи
 */
void writeChar(unsigned char** pptr, char c)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr

08004896 <writeInt>:
* Записывает целое число в виде 2 байт в выходной буфер.
 * @param pptr указатель на выходной буфер - увеличивается на количество использованных и возвращенных байтов
 * @param не является целым числом для записи
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	da00      	bge.n	80048a8 <writeInt+0x12>
 80048a6:	33ff      	adds	r3, #255	; 0xff
 80048a8:	121b      	asrs	r3, r3, #8
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	425a      	negs	r2, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	bf58      	it	pl
 80048c8:	4253      	negpl	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	601a      	str	r2, [r3, #0]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr

080048e6 <writeCString>:
Записывает строку "UTF" в выходной буфер. Преобразует строку C в строку с разделителями по длине.
 * @param pptr указатель на выходной буфер - увеличивается на количество использованных и возвращенных байтов
 * @param string строка C для записи
 */
void writeCString(unsigned char** pptr, const char* string)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 80048f0:	6838      	ldr	r0, [r7, #0]
 80048f2:	f7fb fc2b 	bl	800014c <strlen>
 80048f6:	4603      	mov	r3, r0
 80048f8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ffca 	bl	8004896 <writeInt>
	memcpy(*pptr, string, len);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fc74 	bl	80051f8 <memcpy>
	*pptr += len;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	441a      	add	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	4638      	mov	r0, r7
 800492e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dd12      	ble.n	800495e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4619      	mov	r1, r3
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff ffaa 	bl	8004896 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fc54 	bl	80051f8 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	441a      	add	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800495c:	e00c      	b.n	8004978 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7ff ffbc 	bl	80048e6 <writeCString>
}
 800496e:	e003      	b.n	8004978 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8004970:	2100      	movs	r1, #0
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff ff8f 	bl	8004896 <writeInt>
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <MQTTstrlen>:
* Возвращает длину строки MQTTstring - C, если таковая имеется, в противном случае строка с разделителями длины
 * @param mqttstring строка, возвращающая длину
* @возвращает длину строки
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	1d3b      	adds	r3, r7, #4
 8004988:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d006      	beq.n	80049a4 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fb fbd7 	bl	800014c <strlen>
 800499e:	4603      	mov	r3, r0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e001      	b.n	80049a8 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	617b      	str	r3, [r7, #20]
	return rc;
 80049a8:	697b      	ldr	r3, [r7, #20]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <MQTTPacket_read>:
* @*@param получить указатель fn на функцию, которая будет считывать любое количество байтов из нужного источника
* @возвращает целочисленный тип пакета MQTT или -1 при ошибке
* @примечание все сообщение должно быть помещено в буфер вызывающего абонента
 */
int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
	int rc = -1;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
	int len = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
	int rem_len = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	613b      	str	r3, [r7, #16]

	/* 1. считайте байт заголовка. В нем указан тип пакета */
	if ((*getfn)(buf, 1) != 1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2101      	movs	r1, #1
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	4798      	blx	r3
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d12f      	bne.n	8004a3e <MQTTPacket_read+0x8c>
		goto exit;

	len = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
	/* 2. прочитайте оставшуюся длину.  Это само по себе изменчиво */
	MQTTPacket_decode(getfn, &rem_len);
 80049e2:	f107 0310 	add.w	r3, r7, #16
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fe91 	bl	8004710 <MQTTPacket_decode>
	len += MQTTPacket_encode(buf + 1, rem_len); /* поместите исходную оставшуюся длину обратно в буфер */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fe5c 	bl	80046b4 <MQTTPacket_encode>
 80049fc:	4602      	mov	r2, r0
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	4413      	add	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]

	/* 3. считайте оставшуюся часть буфера, используя обратный вызов для предоставления остальных данных */
	if((rem_len + len) > buflen)
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	4413      	add	r3, r2
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	db18      	blt.n	8004a42 <MQTTPacket_read+0x90>
		goto exit;
	if (rem_len && ((*getfn)(buf + len, rem_len) != rem_len))
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <MQTTPacket_read+0x7a>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	441a      	add	r2, r3
 8004a1c:	6939      	ldr	r1, [r7, #16]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4610      	mov	r0, r2
 8004a22:	4798      	blx	r3
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d10c      	bne.n	8004a46 <MQTTPacket_read+0x94>
		goto exit;

	header.byte = buf[0];
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	753b      	strb	r3, [r7, #20]
	rc = header.bits.type;
 8004a32:	7d3b      	ldrb	r3, [r7, #20]
 8004a34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	e004      	b.n	8004a48 <MQTTPacket_read+0x96>
		goto exit;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <MQTTPacket_read+0x96>
		goto exit;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <MQTTPacket_read+0x96>
		goto exit;
 8004a46:	bf00      	nop
exit:
	return rc;
 8004a48:	69fb      	ldr	r3, [r7, #28]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <findslot>:
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <findslot+0x2c>)
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4604      	mov	r4, r0
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	b118      	cbz	r0, 8004a66 <findslot+0x12>
 8004a5e:	6983      	ldr	r3, [r0, #24]
 8004a60:	b90b      	cbnz	r3, 8004a66 <findslot+0x12>
 8004a62:	f000 fafb 	bl	800505c <__sinit>
 8004a66:	2c13      	cmp	r4, #19
 8004a68:	d807      	bhi.n	8004a7a <findslot+0x26>
 8004a6a:	4806      	ldr	r0, [pc, #24]	; (8004a84 <findslot+0x30>)
 8004a6c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004a70:	3201      	adds	r2, #1
 8004a72:	d002      	beq.n	8004a7a <findslot+0x26>
 8004a74:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e7fc      	b.n	8004a78 <findslot+0x24>
 8004a7e:	bf00      	nop
 8004a80:	2000001c 	.word	0x2000001c
 8004a84:	200000b8 	.word	0x200000b8

08004a88 <checkerror>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	d109      	bne.n	8004aa4 <checkerror+0x1c>
 8004a90:	f000 fa86 	bl	8004fa0 <__errno>
 8004a94:	2613      	movs	r6, #19
 8004a96:	4605      	mov	r5, r0
 8004a98:	2700      	movs	r7, #0
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	beab      	bkpt	0x00ab
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	602e      	str	r6, [r5, #0]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004aa8 <error>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	f000 fa78 	bl	8004fa0 <__errno>
 8004ab0:	2613      	movs	r6, #19
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	2700      	movs	r7, #0
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4639      	mov	r1, r7
 8004aba:	beab      	bkpt	0x00ab
 8004abc:	4606      	mov	r6, r0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	602e      	str	r6, [r5, #0]
 8004ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ac4 <_swiread>:
 8004ac4:	b530      	push	{r4, r5, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	2406      	movs	r4, #6
 8004aca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004ace:	9203      	str	r2, [sp, #12]
 8004ad0:	ad01      	add	r5, sp, #4
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	beab      	bkpt	0x00ab
 8004ad8:	4604      	mov	r4, r0
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7ff ffd4 	bl	8004a88 <checkerror>
 8004ae0:	b005      	add	sp, #20
 8004ae2:	bd30      	pop	{r4, r5, pc}

08004ae4 <_read>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	460e      	mov	r6, r1
 8004ae8:	4615      	mov	r5, r2
 8004aea:	f7ff ffb3 	bl	8004a54 <findslot>
 8004aee:	4604      	mov	r4, r0
 8004af0:	b930      	cbnz	r0, 8004b00 <_read+0x1c>
 8004af2:	f000 fa55 	bl	8004fa0 <__errno>
 8004af6:	2309      	movs	r3, #9
 8004af8:	6003      	str	r3, [r0, #0]
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	462a      	mov	r2, r5
 8004b02:	4631      	mov	r1, r6
 8004b04:	6800      	ldr	r0, [r0, #0]
 8004b06:	f7ff ffdd 	bl	8004ac4 <_swiread>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	bf1f      	itttt	ne
 8004b0e:	6863      	ldrne	r3, [r4, #4]
 8004b10:	1a28      	subne	r0, r5, r0
 8004b12:	181b      	addne	r3, r3, r0
 8004b14:	6063      	strne	r3, [r4, #4]
 8004b16:	e7f2      	b.n	8004afe <_read+0x1a>

08004b18 <_swilseek>:
 8004b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	4616      	mov	r6, r2
 8004b1e:	f7ff ff99 	bl	8004a54 <findslot>
 8004b22:	4605      	mov	r5, r0
 8004b24:	b940      	cbnz	r0, 8004b38 <_swilseek+0x20>
 8004b26:	f000 fa3b 	bl	8004fa0 <__errno>
 8004b2a:	2309      	movs	r3, #9
 8004b2c:	6003      	str	r3, [r0, #0]
 8004b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8004b32:	4620      	mov	r0, r4
 8004b34:	b003      	add	sp, #12
 8004b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b38:	2e02      	cmp	r6, #2
 8004b3a:	d903      	bls.n	8004b44 <_swilseek+0x2c>
 8004b3c:	f000 fa30 	bl	8004fa0 <__errno>
 8004b40:	2316      	movs	r3, #22
 8004b42:	e7f3      	b.n	8004b2c <_swilseek+0x14>
 8004b44:	2e01      	cmp	r6, #1
 8004b46:	d112      	bne.n	8004b6e <_swilseek+0x56>
 8004b48:	6843      	ldr	r3, [r0, #4]
 8004b4a:	18e4      	adds	r4, r4, r3
 8004b4c:	d4f6      	bmi.n	8004b3c <_swilseek+0x24>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	260a      	movs	r6, #10
 8004b52:	466f      	mov	r7, sp
 8004b54:	e9cd 3400 	strd	r3, r4, [sp]
 8004b58:	4630      	mov	r0, r6
 8004b5a:	4639      	mov	r1, r7
 8004b5c:	beab      	bkpt	0x00ab
 8004b5e:	4606      	mov	r6, r0
 8004b60:	4630      	mov	r0, r6
 8004b62:	f7ff ff91 	bl	8004a88 <checkerror>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	dbe1      	blt.n	8004b2e <_swilseek+0x16>
 8004b6a:	606c      	str	r4, [r5, #4]
 8004b6c:	e7e1      	b.n	8004b32 <_swilseek+0x1a>
 8004b6e:	2e02      	cmp	r6, #2
 8004b70:	d1ed      	bne.n	8004b4e <_swilseek+0x36>
 8004b72:	6803      	ldr	r3, [r0, #0]
 8004b74:	260c      	movs	r6, #12
 8004b76:	466f      	mov	r7, sp
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	4639      	mov	r1, r7
 8004b7e:	beab      	bkpt	0x00ab
 8004b80:	4606      	mov	r6, r0
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7ff ff80 	bl	8004a88 <checkerror>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d0d0      	beq.n	8004b2e <_swilseek+0x16>
 8004b8c:	4404      	add	r4, r0
 8004b8e:	e7de      	b.n	8004b4e <_swilseek+0x36>

08004b90 <_lseek>:
 8004b90:	f7ff bfc2 	b.w	8004b18 <_swilseek>

08004b94 <_swiwrite>:
 8004b94:	b530      	push	{r4, r5, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	2405      	movs	r4, #5
 8004b9a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004b9e:	9203      	str	r2, [sp, #12]
 8004ba0:	ad01      	add	r5, sp, #4
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	beab      	bkpt	0x00ab
 8004ba8:	4604      	mov	r4, r0
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7ff ff6c 	bl	8004a88 <checkerror>
 8004bb0:	b005      	add	sp, #20
 8004bb2:	bd30      	pop	{r4, r5, pc}

08004bb4 <_write>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	460e      	mov	r6, r1
 8004bb8:	4615      	mov	r5, r2
 8004bba:	f7ff ff4b 	bl	8004a54 <findslot>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	b930      	cbnz	r0, 8004bd0 <_write+0x1c>
 8004bc2:	f000 f9ed 	bl	8004fa0 <__errno>
 8004bc6:	2309      	movs	r3, #9
 8004bc8:	6003      	str	r3, [r0, #0]
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	6800      	ldr	r0, [r0, #0]
 8004bd6:	f7ff ffdd 	bl	8004b94 <_swiwrite>
 8004bda:	1e03      	subs	r3, r0, #0
 8004bdc:	dbf5      	blt.n	8004bca <_write+0x16>
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	1ae8      	subs	r0, r5, r3
 8004be2:	4402      	add	r2, r0
 8004be4:	42ab      	cmp	r3, r5
 8004be6:	6062      	str	r2, [r4, #4]
 8004be8:	d1f1      	bne.n	8004bce <_write+0x1a>
 8004bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f7ff bf5a 	b.w	8004aa8 <error>

08004bf4 <_swiclose>:
 8004bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bf6:	2402      	movs	r4, #2
 8004bf8:	9001      	str	r0, [sp, #4]
 8004bfa:	ad01      	add	r5, sp, #4
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	4629      	mov	r1, r5
 8004c00:	beab      	bkpt	0x00ab
 8004c02:	4604      	mov	r4, r0
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ff3f 	bl	8004a88 <checkerror>
 8004c0a:	b003      	add	sp, #12
 8004c0c:	bd30      	pop	{r4, r5, pc}
	...

08004c10 <_close>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	f7ff ff1e 	bl	8004a54 <findslot>
 8004c18:	4604      	mov	r4, r0
 8004c1a:	b930      	cbnz	r0, 8004c2a <_close+0x1a>
 8004c1c:	f000 f9c0 	bl	8004fa0 <__errno>
 8004c20:	2309      	movs	r3, #9
 8004c22:	6003      	str	r3, [r0, #0]
 8004c24:	f04f 30ff 	mov.w	r0, #4294967295
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	3d01      	subs	r5, #1
 8004c2c:	2d01      	cmp	r5, #1
 8004c2e:	d809      	bhi.n	8004c44 <_close+0x34>
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <_close+0x48>)
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d104      	bne.n	8004c44 <_close+0x34>
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	6003      	str	r3, [r0, #0]
 8004c40:	2000      	movs	r0, #0
 8004c42:	e7f1      	b.n	8004c28 <_close+0x18>
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	f7ff ffd5 	bl	8004bf4 <_swiclose>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d1ec      	bne.n	8004c28 <_close+0x18>
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	e7e8      	b.n	8004c28 <_close+0x18>
 8004c56:	bf00      	nop
 8004c58:	200000b8 	.word	0x200000b8

08004c5c <_swistat>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	460c      	mov	r4, r1
 8004c60:	f7ff fef8 	bl	8004a54 <findslot>
 8004c64:	4605      	mov	r5, r0
 8004c66:	b930      	cbnz	r0, 8004c76 <_swistat+0x1a>
 8004c68:	f000 f99a 	bl	8004fa0 <__errno>
 8004c6c:	2309      	movs	r3, #9
 8004c6e:	6003      	str	r3, [r0, #0]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	6863      	ldr	r3, [r4, #4]
 8004c78:	260c      	movs	r6, #12
 8004c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c7e:	6063      	str	r3, [r4, #4]
 8004c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c84:	64a3      	str	r3, [r4, #72]	; 0x48
 8004c86:	4630      	mov	r0, r6
 8004c88:	4629      	mov	r1, r5
 8004c8a:	beab      	bkpt	0x00ab
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f7ff fefa 	bl	8004a88 <checkerror>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	bf1c      	itt	ne
 8004c98:	6120      	strne	r0, [r4, #16]
 8004c9a:	2000      	movne	r0, #0
 8004c9c:	e7ea      	b.n	8004c74 <_swistat+0x18>

08004c9e <_fstat>:
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	2258      	movs	r2, #88	; 0x58
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fab3 	bl	8005214 <memset>
 8004cae:	4601      	mov	r1, r0
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb6:	f7ff bfd1 	b.w	8004c5c <_swistat>

08004cba <_stat>:
 8004cba:	b538      	push	{r3, r4, r5, lr}
 8004cbc:	460d      	mov	r5, r1
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	2258      	movs	r2, #88	; 0x58
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f000 faa5 	bl	8005214 <memset>
 8004cca:	4620      	mov	r0, r4
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f000 f811 	bl	8004cf4 <_swiopen>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	d00b      	beq.n	8004cf0 <_stat+0x36>
 8004cd8:	686b      	ldr	r3, [r5, #4]
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ce0:	606b      	str	r3, [r5, #4]
 8004ce2:	f7ff ffbb 	bl	8004c5c <_swistat>
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7ff ff91 	bl	8004c10 <_close>
 8004cee:	462c      	mov	r4, r5
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bd38      	pop	{r3, r4, r5, pc}

08004cf4 <_swiopen>:
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <_swiopen+0xb0>)
 8004cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cfa:	4681      	mov	r9, r0
 8004cfc:	460f      	mov	r7, r1
 8004cfe:	2500      	movs	r5, #0
 8004d00:	461e      	mov	r6, r3
 8004d02:	b097      	sub	sp, #92	; 0x5c
 8004d04:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8004d08:	1c61      	adds	r1, r4, #1
 8004d0a:	d037      	beq.n	8004d7c <_swiopen+0x88>
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	2d14      	cmp	r5, #20
 8004d10:	d1f8      	bne.n	8004d04 <_swiopen+0x10>
 8004d12:	f000 f945 	bl	8004fa0 <__errno>
 8004d16:	2318      	movs	r3, #24
 8004d18:	f04f 34ff 	mov.w	r4, #4294967295
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	e03d      	b.n	8004d9c <_swiopen+0xa8>
 8004d20:	f240 6301 	movw	r3, #1537	; 0x601
 8004d24:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8004d28:	07ba      	lsls	r2, r7, #30
 8004d2a:	bf48      	it	mi
 8004d2c:	f044 0402 	orrmi.w	r4, r4, #2
 8004d30:	421f      	tst	r7, r3
 8004d32:	bf18      	it	ne
 8004d34:	f044 0404 	orrne.w	r4, r4, #4
 8004d38:	073b      	lsls	r3, r7, #28
 8004d3a:	bf48      	it	mi
 8004d3c:	f024 0404 	bicmi.w	r4, r4, #4
 8004d40:	4648      	mov	r0, r9
 8004d42:	bf48      	it	mi
 8004d44:	f044 0408 	orrmi.w	r4, r4, #8
 8004d48:	f8cd 9000 	str.w	r9, [sp]
 8004d4c:	f7fb f9fe 	bl	800014c <strlen>
 8004d50:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004d54:	2401      	movs	r4, #1
 8004d56:	4620      	mov	r0, r4
 8004d58:	4641      	mov	r1, r8
 8004d5a:	beab      	bkpt	0x00ab
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	db07      	blt.n	8004d72 <_swiopen+0x7e>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8004d68:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8004d6c:	462c      	mov	r4, r5
 8004d6e:	6073      	str	r3, [r6, #4]
 8004d70:	e014      	b.n	8004d9c <_swiopen+0xa8>
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff fe98 	bl	8004aa8 <error>
 8004d78:	4604      	mov	r4, r0
 8004d7a:	e00f      	b.n	8004d9c <_swiopen+0xa8>
 8004d7c:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8004d80:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004d84:	46e8      	mov	r8, sp
 8004d86:	d1cb      	bne.n	8004d20 <_swiopen+0x2c>
 8004d88:	4641      	mov	r1, r8
 8004d8a:	4648      	mov	r0, r9
 8004d8c:	f7ff ff95 	bl	8004cba <_stat>
 8004d90:	3001      	adds	r0, #1
 8004d92:	d0c5      	beq.n	8004d20 <_swiopen+0x2c>
 8004d94:	f000 f904 	bl	8004fa0 <__errno>
 8004d98:	2311      	movs	r3, #17
 8004d9a:	6003      	str	r3, [r0, #0]
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	b017      	add	sp, #92	; 0x5c
 8004da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004da4:	200000b8 	.word	0x200000b8

08004da8 <_get_semihosting_exts>:
 8004da8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004dac:	4606      	mov	r6, r0
 8004dae:	460f      	mov	r7, r1
 8004db0:	482a      	ldr	r0, [pc, #168]	; (8004e5c <_get_semihosting_exts+0xb4>)
 8004db2:	2100      	movs	r1, #0
 8004db4:	4615      	mov	r5, r2
 8004db6:	f7ff ff9d 	bl	8004cf4 <_swiopen>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	462a      	mov	r2, r5
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 fa27 	bl	8005214 <memset>
 8004dc6:	1c63      	adds	r3, r4, #1
 8004dc8:	d016      	beq.n	8004df8 <_get_semihosting_exts+0x50>
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f7ff fe42 	bl	8004a54 <findslot>
 8004dd0:	f04f 080c 	mov.w	r8, #12
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	4649      	mov	r1, r9
 8004dda:	beab      	bkpt	0x00ab
 8004ddc:	4680      	mov	r8, r0
 8004dde:	4640      	mov	r0, r8
 8004de0:	f7ff fe52 	bl	8004a88 <checkerror>
 8004de4:	2803      	cmp	r0, #3
 8004de6:	dd02      	ble.n	8004dee <_get_semihosting_exts+0x46>
 8004de8:	1ec3      	subs	r3, r0, #3
 8004dea:	42ab      	cmp	r3, r5
 8004dec:	dc08      	bgt.n	8004e00 <_get_semihosting_exts+0x58>
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7ff ff0e 	bl	8004c10 <_close>
 8004df4:	f04f 34ff 	mov.w	r4, #4294967295
 8004df8:	4620      	mov	r0, r4
 8004dfa:	b003      	add	sp, #12
 8004dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e00:	2204      	movs	r2, #4
 8004e02:	4620      	mov	r0, r4
 8004e04:	eb0d 0102 	add.w	r1, sp, r2
 8004e08:	f7ff fe6c 	bl	8004ae4 <_read>
 8004e0c:	2803      	cmp	r0, #3
 8004e0e:	ddee      	ble.n	8004dee <_get_semihosting_exts+0x46>
 8004e10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004e14:	2b53      	cmp	r3, #83	; 0x53
 8004e16:	d1ea      	bne.n	8004dee <_get_semihosting_exts+0x46>
 8004e18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004e1c:	2b48      	cmp	r3, #72	; 0x48
 8004e1e:	d1e6      	bne.n	8004dee <_get_semihosting_exts+0x46>
 8004e20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004e24:	2b46      	cmp	r3, #70	; 0x46
 8004e26:	d1e2      	bne.n	8004dee <_get_semihosting_exts+0x46>
 8004e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e2c:	2b42      	cmp	r3, #66	; 0x42
 8004e2e:	d1de      	bne.n	8004dee <_get_semihosting_exts+0x46>
 8004e30:	2201      	movs	r2, #1
 8004e32:	4639      	mov	r1, r7
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7ff fe6f 	bl	8004b18 <_swilseek>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	dbd7      	blt.n	8004dee <_get_semihosting_exts+0x46>
 8004e3e:	462a      	mov	r2, r5
 8004e40:	4631      	mov	r1, r6
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff fe4e 	bl	8004ae4 <_read>
 8004e48:	4605      	mov	r5, r0
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7ff fee0 	bl	8004c10 <_close>
 8004e50:	4628      	mov	r0, r5
 8004e52:	f7ff fe19 	bl	8004a88 <checkerror>
 8004e56:	4604      	mov	r4, r0
 8004e58:	e7ce      	b.n	8004df8 <_get_semihosting_exts+0x50>
 8004e5a:	bf00      	nop
 8004e5c:	0800720c 	.word	0x0800720c

08004e60 <initialise_semihosting_exts>:
 8004e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e62:	2100      	movs	r1, #0
 8004e64:	2201      	movs	r2, #1
 8004e66:	4d09      	ldr	r5, [pc, #36]	; (8004e8c <initialise_semihosting_exts+0x2c>)
 8004e68:	4c09      	ldr	r4, [pc, #36]	; (8004e90 <initialise_semihosting_exts+0x30>)
 8004e6a:	a801      	add	r0, sp, #4
 8004e6c:	6029      	str	r1, [r5, #0]
 8004e6e:	6022      	str	r2, [r4, #0]
 8004e70:	f7ff ff9a 	bl	8004da8 <_get_semihosting_exts>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	dd07      	ble.n	8004e88 <initialise_semihosting_exts+0x28>
 8004e78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004e7c:	f003 0201 	and.w	r2, r3, #1
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	b003      	add	sp, #12
 8004e8a:	bd30      	pop	{r4, r5, pc}
 8004e8c:	20000014 	.word	0x20000014
 8004e90:	20000018 	.word	0x20000018

08004e94 <_has_ext_stdout_stderr>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4c04      	ldr	r4, [pc, #16]	; (8004ea8 <_has_ext_stdout_stderr+0x14>)
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	da01      	bge.n	8004ea2 <_has_ext_stdout_stderr+0xe>
 8004e9e:	f7ff ffdf 	bl	8004e60 <initialise_semihosting_exts>
 8004ea2:	6820      	ldr	r0, [r4, #0]
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000018 	.word	0x20000018

08004eac <initialise_monitor_handles>:
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	2400      	movs	r4, #0
 8004eb4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004f64 <initialise_monitor_handles+0xb8>
 8004eb8:	b085      	sub	sp, #20
 8004eba:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ebe:	f10d 0804 	add.w	r8, sp, #4
 8004ec2:	9303      	str	r3, [sp, #12]
 8004ec4:	2501      	movs	r5, #1
 8004ec6:	9402      	str	r4, [sp, #8]
 8004ec8:	4628      	mov	r0, r5
 8004eca:	4641      	mov	r1, r8
 8004ecc:	beab      	bkpt	0x00ab
 8004ece:	4605      	mov	r5, r0
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <initialise_monitor_handles+0xa8>)
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed8:	4614      	mov	r4, r2
 8004eda:	4e1f      	ldr	r6, [pc, #124]	; (8004f58 <initialise_monitor_handles+0xac>)
 8004edc:	6035      	str	r5, [r6, #0]
 8004ede:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	2b14      	cmp	r3, #20
 8004ee6:	d1fa      	bne.n	8004ede <initialise_monitor_handles+0x32>
 8004ee8:	f7ff ffd4 	bl	8004e94 <_has_ext_stdout_stderr>
 8004eec:	4d1b      	ldr	r5, [pc, #108]	; (8004f5c <initialise_monitor_handles+0xb0>)
 8004eee:	b1d0      	cbz	r0, 8004f26 <initialise_monitor_handles+0x7a>
 8004ef0:	f04f 0a03 	mov.w	sl, #3
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f8cd 9004 	str.w	r9, [sp, #4]
 8004efa:	2701      	movs	r7, #1
 8004efc:	f8cd a00c 	str.w	sl, [sp, #12]
 8004f00:	9302      	str	r3, [sp, #8]
 8004f02:	4638      	mov	r0, r7
 8004f04:	4641      	mov	r1, r8
 8004f06:	beab      	bkpt	0x00ab
 8004f08:	4683      	mov	fp, r0
 8004f0a:	4b15      	ldr	r3, [pc, #84]	; (8004f60 <initialise_monitor_handles+0xb4>)
 8004f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f10:	f8c3 b000 	str.w	fp, [r3]
 8004f14:	2308      	movs	r3, #8
 8004f16:	f8cd a00c 	str.w	sl, [sp, #12]
 8004f1a:	9302      	str	r3, [sp, #8]
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	4641      	mov	r1, r8
 8004f20:	beab      	bkpt	0x00ab
 8004f22:	4607      	mov	r7, r0
 8004f24:	602f      	str	r7, [r5, #0]
 8004f26:	682b      	ldr	r3, [r5, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	bf02      	ittt	eq
 8004f2c:	4b0c      	ldreq	r3, [pc, #48]	; (8004f60 <initialise_monitor_handles+0xb4>)
 8004f2e:	681b      	ldreq	r3, [r3, #0]
 8004f30:	602b      	streq	r3, [r5, #0]
 8004f32:	6833      	ldr	r3, [r6, #0]
 8004f34:	2600      	movs	r6, #0
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	6066      	str	r6, [r4, #4]
 8004f3a:	f7ff ffab 	bl	8004e94 <_has_ext_stdout_stderr>
 8004f3e:	b130      	cbz	r0, 8004f4e <initialise_monitor_handles+0xa2>
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <initialise_monitor_handles+0xb4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004f4e:	b005      	add	sp, #20
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	200000b8 	.word	0x200000b8
 8004f58:	200000b0 	.word	0x200000b0
 8004f5c:	200000ac 	.word	0x200000ac
 8004f60:	200000b4 	.word	0x200000b4
 8004f64:	08007222 	.word	0x08007222

08004f68 <_isatty>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	f7ff fd73 	bl	8004a54 <findslot>
 8004f6e:	2509      	movs	r5, #9
 8004f70:	4604      	mov	r4, r0
 8004f72:	b920      	cbnz	r0, 8004f7e <_isatty+0x16>
 8004f74:	f000 f814 	bl	8004fa0 <__errno>
 8004f78:	6005      	str	r5, [r0, #0]
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	4628      	mov	r0, r5
 8004f80:	4621      	mov	r1, r4
 8004f82:	beab      	bkpt	0x00ab
 8004f84:	4604      	mov	r4, r0
 8004f86:	2c01      	cmp	r4, #1
 8004f88:	d0f7      	beq.n	8004f7a <_isatty+0x12>
 8004f8a:	f000 f809 	bl	8004fa0 <__errno>
 8004f8e:	2400      	movs	r4, #0
 8004f90:	4605      	mov	r5, r0
 8004f92:	2613      	movs	r6, #19
 8004f94:	4630      	mov	r0, r6
 8004f96:	4621      	mov	r1, r4
 8004f98:	beab      	bkpt	0x00ab
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	602e      	str	r6, [r5, #0]
 8004f9e:	e7ec      	b.n	8004f7a <_isatty+0x12>

08004fa0 <__errno>:
 8004fa0:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <__errno+0x8>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	2000001c 	.word	0x2000001c

08004fac <std>:
 8004fac:	2300      	movs	r3, #0
 8004fae:	b510      	push	{r4, lr}
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fba:	6083      	str	r3, [r0, #8]
 8004fbc:	8181      	strh	r1, [r0, #12]
 8004fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004fc0:	81c2      	strh	r2, [r0, #14]
 8004fc2:	6183      	str	r3, [r0, #24]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	2208      	movs	r2, #8
 8004fc8:	305c      	adds	r0, #92	; 0x5c
 8004fca:	f000 f923 	bl	8005214 <memset>
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <std+0x38>)
 8004fd0:	6224      	str	r4, [r4, #32]
 8004fd2:	6263      	str	r3, [r4, #36]	; 0x24
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <std+0x3c>)
 8004fd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <std+0x40>)
 8004fda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <std+0x44>)
 8004fde:	6323      	str	r3, [r4, #48]	; 0x30
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	bf00      	nop
 8004fe4:	080054ed 	.word	0x080054ed
 8004fe8:	0800550f 	.word	0x0800550f
 8004fec:	08005547 	.word	0x08005547
 8004ff0:	0800556b 	.word	0x0800556b

08004ff4 <_cleanup_r>:
 8004ff4:	4901      	ldr	r1, [pc, #4]	; (8004ffc <_cleanup_r+0x8>)
 8004ff6:	f000 b8af 	b.w	8005158 <_fwalk_reent>
 8004ffa:	bf00      	nop
 8004ffc:	080058b1 	.word	0x080058b1

08005000 <__sfmoreglue>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	2568      	movs	r5, #104	; 0x68
 8005004:	1e4a      	subs	r2, r1, #1
 8005006:	4355      	muls	r5, r2
 8005008:	460e      	mov	r6, r1
 800500a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800500e:	f000 f955 	bl	80052bc <_malloc_r>
 8005012:	4604      	mov	r4, r0
 8005014:	b140      	cbz	r0, 8005028 <__sfmoreglue+0x28>
 8005016:	2100      	movs	r1, #0
 8005018:	e9c0 1600 	strd	r1, r6, [r0]
 800501c:	300c      	adds	r0, #12
 800501e:	60a0      	str	r0, [r4, #8]
 8005020:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005024:	f000 f8f6 	bl	8005214 <memset>
 8005028:	4620      	mov	r0, r4
 800502a:	bd70      	pop	{r4, r5, r6, pc}

0800502c <__sfp_lock_acquire>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__sfp_lock_acquire+0x8>)
 800502e:	f000 b8d8 	b.w	80051e2 <__retarget_lock_acquire_recursive>
 8005032:	bf00      	nop
 8005034:	20001778 	.word	0x20001778

08005038 <__sfp_lock_release>:
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <__sfp_lock_release+0x8>)
 800503a:	f000 b8d3 	b.w	80051e4 <__retarget_lock_release_recursive>
 800503e:	bf00      	nop
 8005040:	20001778 	.word	0x20001778

08005044 <__sinit_lock_acquire>:
 8005044:	4801      	ldr	r0, [pc, #4]	; (800504c <__sinit_lock_acquire+0x8>)
 8005046:	f000 b8cc 	b.w	80051e2 <__retarget_lock_acquire_recursive>
 800504a:	bf00      	nop
 800504c:	20001773 	.word	0x20001773

08005050 <__sinit_lock_release>:
 8005050:	4801      	ldr	r0, [pc, #4]	; (8005058 <__sinit_lock_release+0x8>)
 8005052:	f000 b8c7 	b.w	80051e4 <__retarget_lock_release_recursive>
 8005056:	bf00      	nop
 8005058:	20001773 	.word	0x20001773

0800505c <__sinit>:
 800505c:	b510      	push	{r4, lr}
 800505e:	4604      	mov	r4, r0
 8005060:	f7ff fff0 	bl	8005044 <__sinit_lock_acquire>
 8005064:	69a3      	ldr	r3, [r4, #24]
 8005066:	b11b      	cbz	r3, 8005070 <__sinit+0x14>
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f7ff bff0 	b.w	8005050 <__sinit_lock_release>
 8005070:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005074:	6523      	str	r3, [r4, #80]	; 0x50
 8005076:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <__sinit+0x68>)
 8005078:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <__sinit+0x6c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	62a2      	str	r2, [r4, #40]	; 0x28
 800507e:	42a3      	cmp	r3, r4
 8005080:	bf08      	it	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	4620      	mov	r0, r4
 8005086:	bf08      	it	eq
 8005088:	61a3      	streq	r3, [r4, #24]
 800508a:	f000 f81f 	bl	80050cc <__sfp>
 800508e:	6060      	str	r0, [r4, #4]
 8005090:	4620      	mov	r0, r4
 8005092:	f000 f81b 	bl	80050cc <__sfp>
 8005096:	60a0      	str	r0, [r4, #8]
 8005098:	4620      	mov	r0, r4
 800509a:	f000 f817 	bl	80050cc <__sfp>
 800509e:	2200      	movs	r2, #0
 80050a0:	2104      	movs	r1, #4
 80050a2:	60e0      	str	r0, [r4, #12]
 80050a4:	6860      	ldr	r0, [r4, #4]
 80050a6:	f7ff ff81 	bl	8004fac <std>
 80050aa:	2201      	movs	r2, #1
 80050ac:	2109      	movs	r1, #9
 80050ae:	68a0      	ldr	r0, [r4, #8]
 80050b0:	f7ff ff7c 	bl	8004fac <std>
 80050b4:	2202      	movs	r2, #2
 80050b6:	2112      	movs	r1, #18
 80050b8:	68e0      	ldr	r0, [r4, #12]
 80050ba:	f7ff ff77 	bl	8004fac <std>
 80050be:	2301      	movs	r3, #1
 80050c0:	61a3      	str	r3, [r4, #24]
 80050c2:	e7d1      	b.n	8005068 <__sinit+0xc>
 80050c4:	08007288 	.word	0x08007288
 80050c8:	08004ff5 	.word	0x08004ff5

080050cc <__sfp>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	4607      	mov	r7, r0
 80050d0:	f7ff ffac 	bl	800502c <__sfp_lock_acquire>
 80050d4:	4b1e      	ldr	r3, [pc, #120]	; (8005150 <__sfp+0x84>)
 80050d6:	681e      	ldr	r6, [r3, #0]
 80050d8:	69b3      	ldr	r3, [r6, #24]
 80050da:	b913      	cbnz	r3, 80050e2 <__sfp+0x16>
 80050dc:	4630      	mov	r0, r6
 80050de:	f7ff ffbd 	bl	800505c <__sinit>
 80050e2:	3648      	adds	r6, #72	; 0x48
 80050e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	d503      	bpl.n	80050f4 <__sfp+0x28>
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	b30b      	cbz	r3, 8005134 <__sfp+0x68>
 80050f0:	6836      	ldr	r6, [r6, #0]
 80050f2:	e7f7      	b.n	80050e4 <__sfp+0x18>
 80050f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050f8:	b9d5      	cbnz	r5, 8005130 <__sfp+0x64>
 80050fa:	4b16      	ldr	r3, [pc, #88]	; (8005154 <__sfp+0x88>)
 80050fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005100:	60e3      	str	r3, [r4, #12]
 8005102:	6665      	str	r5, [r4, #100]	; 0x64
 8005104:	f000 f86c 	bl	80051e0 <__retarget_lock_init_recursive>
 8005108:	f7ff ff96 	bl	8005038 <__sfp_lock_release>
 800510c:	2208      	movs	r2, #8
 800510e:	4629      	mov	r1, r5
 8005110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005118:	6025      	str	r5, [r4, #0]
 800511a:	61a5      	str	r5, [r4, #24]
 800511c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005120:	f000 f878 	bl	8005214 <memset>
 8005124:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005128:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800512c:	4620      	mov	r0, r4
 800512e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005130:	3468      	adds	r4, #104	; 0x68
 8005132:	e7d9      	b.n	80050e8 <__sfp+0x1c>
 8005134:	2104      	movs	r1, #4
 8005136:	4638      	mov	r0, r7
 8005138:	f7ff ff62 	bl	8005000 <__sfmoreglue>
 800513c:	4604      	mov	r4, r0
 800513e:	6030      	str	r0, [r6, #0]
 8005140:	2800      	cmp	r0, #0
 8005142:	d1d5      	bne.n	80050f0 <__sfp+0x24>
 8005144:	f7ff ff78 	bl	8005038 <__sfp_lock_release>
 8005148:	230c      	movs	r3, #12
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	e7ee      	b.n	800512c <__sfp+0x60>
 800514e:	bf00      	nop
 8005150:	08007288 	.word	0x08007288
 8005154:	ffff0001 	.word	0xffff0001

08005158 <_fwalk_reent>:
 8005158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800515c:	4606      	mov	r6, r0
 800515e:	4688      	mov	r8, r1
 8005160:	2700      	movs	r7, #0
 8005162:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005166:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800516a:	f1b9 0901 	subs.w	r9, r9, #1
 800516e:	d505      	bpl.n	800517c <_fwalk_reent+0x24>
 8005170:	6824      	ldr	r4, [r4, #0]
 8005172:	2c00      	cmp	r4, #0
 8005174:	d1f7      	bne.n	8005166 <_fwalk_reent+0xe>
 8005176:	4638      	mov	r0, r7
 8005178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800517c:	89ab      	ldrh	r3, [r5, #12]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d907      	bls.n	8005192 <_fwalk_reent+0x3a>
 8005182:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005186:	3301      	adds	r3, #1
 8005188:	d003      	beq.n	8005192 <_fwalk_reent+0x3a>
 800518a:	4629      	mov	r1, r5
 800518c:	4630      	mov	r0, r6
 800518e:	47c0      	blx	r8
 8005190:	4307      	orrs	r7, r0
 8005192:	3568      	adds	r5, #104	; 0x68
 8005194:	e7e9      	b.n	800516a <_fwalk_reent+0x12>
	...

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	2600      	movs	r6, #0
 800519c:	4d0c      	ldr	r5, [pc, #48]	; (80051d0 <__libc_init_array+0x38>)
 800519e:	4c0d      	ldr	r4, [pc, #52]	; (80051d4 <__libc_init_array+0x3c>)
 80051a0:	1b64      	subs	r4, r4, r5
 80051a2:	10a4      	asrs	r4, r4, #2
 80051a4:	42a6      	cmp	r6, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	f001 f914 	bl	80063d4 <_init>
 80051ac:	2600      	movs	r6, #0
 80051ae:	4d0a      	ldr	r5, [pc, #40]	; (80051d8 <__libc_init_array+0x40>)
 80051b0:	4c0a      	ldr	r4, [pc, #40]	; (80051dc <__libc_init_array+0x44>)
 80051b2:	1b64      	subs	r4, r4, r5
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	42a6      	cmp	r6, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c0:	4798      	blx	r3
 80051c2:	3601      	adds	r6, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ca:	4798      	blx	r3
 80051cc:	3601      	adds	r6, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	080072c0 	.word	0x080072c0
 80051d4:	080072c0 	.word	0x080072c0
 80051d8:	080072c0 	.word	0x080072c0
 80051dc:	080072c4 	.word	0x080072c4

080051e0 <__retarget_lock_init_recursive>:
 80051e0:	4770      	bx	lr

080051e2 <__retarget_lock_acquire_recursive>:
 80051e2:	4770      	bx	lr

080051e4 <__retarget_lock_release_recursive>:
 80051e4:	4770      	bx	lr
	...

080051e8 <malloc>:
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <malloc+0xc>)
 80051ea:	4601      	mov	r1, r0
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	f000 b865 	b.w	80052bc <_malloc_r>
 80051f2:	bf00      	nop
 80051f4:	2000001c 	.word	0x2000001c

080051f8 <memcpy>:
 80051f8:	440a      	add	r2, r1
 80051fa:	4291      	cmp	r1, r2
 80051fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005200:	d100      	bne.n	8005204 <memcpy+0xc>
 8005202:	4770      	bx	lr
 8005204:	b510      	push	{r4, lr}
 8005206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520a:	4291      	cmp	r1, r2
 800520c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005210:	d1f9      	bne.n	8005206 <memcpy+0xe>
 8005212:	bd10      	pop	{r4, pc}

08005214 <memset>:
 8005214:	4603      	mov	r3, r0
 8005216:	4402      	add	r2, r0
 8005218:	4293      	cmp	r3, r2
 800521a:	d100      	bne.n	800521e <memset+0xa>
 800521c:	4770      	bx	lr
 800521e:	f803 1b01 	strb.w	r1, [r3], #1
 8005222:	e7f9      	b.n	8005218 <memset+0x4>

08005224 <_free_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4605      	mov	r5, r0
 8005228:	2900      	cmp	r1, #0
 800522a:	d043      	beq.n	80052b4 <_free_r+0x90>
 800522c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005230:	1f0c      	subs	r4, r1, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	bfb8      	it	lt
 8005236:	18e4      	addlt	r4, r4, r3
 8005238:	f000 fbec 	bl	8005a14 <__malloc_lock>
 800523c:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <_free_r+0x94>)
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	4610      	mov	r0, r2
 8005242:	b933      	cbnz	r3, 8005252 <_free_r+0x2e>
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	6014      	str	r4, [r2, #0]
 8005248:	4628      	mov	r0, r5
 800524a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800524e:	f000 bbe7 	b.w	8005a20 <__malloc_unlock>
 8005252:	42a3      	cmp	r3, r4
 8005254:	d90a      	bls.n	800526c <_free_r+0x48>
 8005256:	6821      	ldr	r1, [r4, #0]
 8005258:	1862      	adds	r2, r4, r1
 800525a:	4293      	cmp	r3, r2
 800525c:	bf01      	itttt	eq
 800525e:	681a      	ldreq	r2, [r3, #0]
 8005260:	685b      	ldreq	r3, [r3, #4]
 8005262:	1852      	addeq	r2, r2, r1
 8005264:	6022      	streq	r2, [r4, #0]
 8005266:	6063      	str	r3, [r4, #4]
 8005268:	6004      	str	r4, [r0, #0]
 800526a:	e7ed      	b.n	8005248 <_free_r+0x24>
 800526c:	461a      	mov	r2, r3
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	b10b      	cbz	r3, 8005276 <_free_r+0x52>
 8005272:	42a3      	cmp	r3, r4
 8005274:	d9fa      	bls.n	800526c <_free_r+0x48>
 8005276:	6811      	ldr	r1, [r2, #0]
 8005278:	1850      	adds	r0, r2, r1
 800527a:	42a0      	cmp	r0, r4
 800527c:	d10b      	bne.n	8005296 <_free_r+0x72>
 800527e:	6820      	ldr	r0, [r4, #0]
 8005280:	4401      	add	r1, r0
 8005282:	1850      	adds	r0, r2, r1
 8005284:	4283      	cmp	r3, r0
 8005286:	6011      	str	r1, [r2, #0]
 8005288:	d1de      	bne.n	8005248 <_free_r+0x24>
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4401      	add	r1, r0
 8005290:	6011      	str	r1, [r2, #0]
 8005292:	6053      	str	r3, [r2, #4]
 8005294:	e7d8      	b.n	8005248 <_free_r+0x24>
 8005296:	d902      	bls.n	800529e <_free_r+0x7a>
 8005298:	230c      	movs	r3, #12
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	e7d4      	b.n	8005248 <_free_r+0x24>
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	1821      	adds	r1, r4, r0
 80052a2:	428b      	cmp	r3, r1
 80052a4:	bf01      	itttt	eq
 80052a6:	6819      	ldreq	r1, [r3, #0]
 80052a8:	685b      	ldreq	r3, [r3, #4]
 80052aa:	1809      	addeq	r1, r1, r0
 80052ac:	6021      	streq	r1, [r4, #0]
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	6054      	str	r4, [r2, #4]
 80052b2:	e7c9      	b.n	8005248 <_free_r+0x24>
 80052b4:	bd38      	pop	{r3, r4, r5, pc}
 80052b6:	bf00      	nop
 80052b8:	20000158 	.word	0x20000158

080052bc <_malloc_r>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	1ccd      	adds	r5, r1, #3
 80052c0:	f025 0503 	bic.w	r5, r5, #3
 80052c4:	3508      	adds	r5, #8
 80052c6:	2d0c      	cmp	r5, #12
 80052c8:	bf38      	it	cc
 80052ca:	250c      	movcc	r5, #12
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	4606      	mov	r6, r0
 80052d0:	db01      	blt.n	80052d6 <_malloc_r+0x1a>
 80052d2:	42a9      	cmp	r1, r5
 80052d4:	d903      	bls.n	80052de <_malloc_r+0x22>
 80052d6:	230c      	movs	r3, #12
 80052d8:	6033      	str	r3, [r6, #0]
 80052da:	2000      	movs	r0, #0
 80052dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052de:	f000 fb99 	bl	8005a14 <__malloc_lock>
 80052e2:	4921      	ldr	r1, [pc, #132]	; (8005368 <_malloc_r+0xac>)
 80052e4:	680a      	ldr	r2, [r1, #0]
 80052e6:	4614      	mov	r4, r2
 80052e8:	b99c      	cbnz	r4, 8005312 <_malloc_r+0x56>
 80052ea:	4f20      	ldr	r7, [pc, #128]	; (800536c <_malloc_r+0xb0>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	b923      	cbnz	r3, 80052fa <_malloc_r+0x3e>
 80052f0:	4621      	mov	r1, r4
 80052f2:	4630      	mov	r0, r6
 80052f4:	f000 f8ca 	bl	800548c <_sbrk_r>
 80052f8:	6038      	str	r0, [r7, #0]
 80052fa:	4629      	mov	r1, r5
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 f8c5 	bl	800548c <_sbrk_r>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d123      	bne.n	800534e <_malloc_r+0x92>
 8005306:	230c      	movs	r3, #12
 8005308:	4630      	mov	r0, r6
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	f000 fb88 	bl	8005a20 <__malloc_unlock>
 8005310:	e7e3      	b.n	80052da <_malloc_r+0x1e>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	1b5b      	subs	r3, r3, r5
 8005316:	d417      	bmi.n	8005348 <_malloc_r+0x8c>
 8005318:	2b0b      	cmp	r3, #11
 800531a:	d903      	bls.n	8005324 <_malloc_r+0x68>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	441c      	add	r4, r3
 8005320:	6025      	str	r5, [r4, #0]
 8005322:	e004      	b.n	800532e <_malloc_r+0x72>
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	42a2      	cmp	r2, r4
 8005328:	bf0c      	ite	eq
 800532a:	600b      	streq	r3, [r1, #0]
 800532c:	6053      	strne	r3, [r2, #4]
 800532e:	4630      	mov	r0, r6
 8005330:	f000 fb76 	bl	8005a20 <__malloc_unlock>
 8005334:	f104 000b 	add.w	r0, r4, #11
 8005338:	1d23      	adds	r3, r4, #4
 800533a:	f020 0007 	bic.w	r0, r0, #7
 800533e:	1ac2      	subs	r2, r0, r3
 8005340:	d0cc      	beq.n	80052dc <_malloc_r+0x20>
 8005342:	1a1b      	subs	r3, r3, r0
 8005344:	50a3      	str	r3, [r4, r2]
 8005346:	e7c9      	b.n	80052dc <_malloc_r+0x20>
 8005348:	4622      	mov	r2, r4
 800534a:	6864      	ldr	r4, [r4, #4]
 800534c:	e7cc      	b.n	80052e8 <_malloc_r+0x2c>
 800534e:	1cc4      	adds	r4, r0, #3
 8005350:	f024 0403 	bic.w	r4, r4, #3
 8005354:	42a0      	cmp	r0, r4
 8005356:	d0e3      	beq.n	8005320 <_malloc_r+0x64>
 8005358:	1a21      	subs	r1, r4, r0
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f896 	bl	800548c <_sbrk_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d1dd      	bne.n	8005320 <_malloc_r+0x64>
 8005364:	e7cf      	b.n	8005306 <_malloc_r+0x4a>
 8005366:	bf00      	nop
 8005368:	20000158 	.word	0x20000158
 800536c:	2000015c 	.word	0x2000015c

08005370 <iprintf>:
 8005370:	b40f      	push	{r0, r1, r2, r3}
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <iprintf+0x2c>)
 8005374:	b513      	push	{r0, r1, r4, lr}
 8005376:	681c      	ldr	r4, [r3, #0]
 8005378:	b124      	cbz	r4, 8005384 <iprintf+0x14>
 800537a:	69a3      	ldr	r3, [r4, #24]
 800537c:	b913      	cbnz	r3, 8005384 <iprintf+0x14>
 800537e:	4620      	mov	r0, r4
 8005380:	f7ff fe6c 	bl	800505c <__sinit>
 8005384:	ab05      	add	r3, sp, #20
 8005386:	4620      	mov	r0, r4
 8005388:	9a04      	ldr	r2, [sp, #16]
 800538a:	68a1      	ldr	r1, [r4, #8]
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	f000 fcf7 	bl	8005d80 <_vfiprintf_r>
 8005392:	b002      	add	sp, #8
 8005394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005398:	b004      	add	sp, #16
 800539a:	4770      	bx	lr
 800539c:	2000001c 	.word	0x2000001c

080053a0 <_puts_r>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	460e      	mov	r6, r1
 80053a4:	4605      	mov	r5, r0
 80053a6:	b118      	cbz	r0, 80053b0 <_puts_r+0x10>
 80053a8:	6983      	ldr	r3, [r0, #24]
 80053aa:	b90b      	cbnz	r3, 80053b0 <_puts_r+0x10>
 80053ac:	f7ff fe56 	bl	800505c <__sinit>
 80053b0:	69ab      	ldr	r3, [r5, #24]
 80053b2:	68ac      	ldr	r4, [r5, #8]
 80053b4:	b913      	cbnz	r3, 80053bc <_puts_r+0x1c>
 80053b6:	4628      	mov	r0, r5
 80053b8:	f7ff fe50 	bl	800505c <__sinit>
 80053bc:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <_puts_r+0xd0>)
 80053be:	429c      	cmp	r4, r3
 80053c0:	d120      	bne.n	8005404 <_puts_r+0x64>
 80053c2:	686c      	ldr	r4, [r5, #4]
 80053c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053c6:	07db      	lsls	r3, r3, #31
 80053c8:	d405      	bmi.n	80053d6 <_puts_r+0x36>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	0598      	lsls	r0, r3, #22
 80053ce:	d402      	bmi.n	80053d6 <_puts_r+0x36>
 80053d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d2:	f7ff ff06 	bl	80051e2 <__retarget_lock_acquire_recursive>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	0719      	lsls	r1, r3, #28
 80053da:	d51d      	bpl.n	8005418 <_puts_r+0x78>
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	b1db      	cbz	r3, 8005418 <_puts_r+0x78>
 80053e0:	3e01      	subs	r6, #1
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053e8:	3b01      	subs	r3, #1
 80053ea:	60a3      	str	r3, [r4, #8]
 80053ec:	bb39      	cbnz	r1, 800543e <_puts_r+0x9e>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da38      	bge.n	8005464 <_puts_r+0xc4>
 80053f2:	4622      	mov	r2, r4
 80053f4:	210a      	movs	r1, #10
 80053f6:	4628      	mov	r0, r5
 80053f8:	f000 f8f2 	bl	80055e0 <__swbuf_r>
 80053fc:	3001      	adds	r0, #1
 80053fe:	d011      	beq.n	8005424 <_puts_r+0x84>
 8005400:	250a      	movs	r5, #10
 8005402:	e011      	b.n	8005428 <_puts_r+0x88>
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <_puts_r+0xd4>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d101      	bne.n	800540e <_puts_r+0x6e>
 800540a:	68ac      	ldr	r4, [r5, #8]
 800540c:	e7da      	b.n	80053c4 <_puts_r+0x24>
 800540e:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <_puts_r+0xd8>)
 8005410:	429c      	cmp	r4, r3
 8005412:	bf08      	it	eq
 8005414:	68ec      	ldreq	r4, [r5, #12]
 8005416:	e7d5      	b.n	80053c4 <_puts_r+0x24>
 8005418:	4621      	mov	r1, r4
 800541a:	4628      	mov	r0, r5
 800541c:	f000 f944 	bl	80056a8 <__swsetup_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	d0dd      	beq.n	80053e0 <_puts_r+0x40>
 8005424:	f04f 35ff 	mov.w	r5, #4294967295
 8005428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800542a:	07da      	lsls	r2, r3, #31
 800542c:	d405      	bmi.n	800543a <_puts_r+0x9a>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	059b      	lsls	r3, r3, #22
 8005432:	d402      	bmi.n	800543a <_puts_r+0x9a>
 8005434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005436:	f7ff fed5 	bl	80051e4 <__retarget_lock_release_recursive>
 800543a:	4628      	mov	r0, r5
 800543c:	bd70      	pop	{r4, r5, r6, pc}
 800543e:	2b00      	cmp	r3, #0
 8005440:	da04      	bge.n	800544c <_puts_r+0xac>
 8005442:	69a2      	ldr	r2, [r4, #24]
 8005444:	429a      	cmp	r2, r3
 8005446:	dc06      	bgt.n	8005456 <_puts_r+0xb6>
 8005448:	290a      	cmp	r1, #10
 800544a:	d004      	beq.n	8005456 <_puts_r+0xb6>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	7019      	strb	r1, [r3, #0]
 8005454:	e7c5      	b.n	80053e2 <_puts_r+0x42>
 8005456:	4622      	mov	r2, r4
 8005458:	4628      	mov	r0, r5
 800545a:	f000 f8c1 	bl	80055e0 <__swbuf_r>
 800545e:	3001      	adds	r0, #1
 8005460:	d1bf      	bne.n	80053e2 <_puts_r+0x42>
 8005462:	e7df      	b.n	8005424 <_puts_r+0x84>
 8005464:	250a      	movs	r5, #10
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	6022      	str	r2, [r4, #0]
 800546c:	701d      	strb	r5, [r3, #0]
 800546e:	e7db      	b.n	8005428 <_puts_r+0x88>
 8005470:	08007248 	.word	0x08007248
 8005474:	08007268 	.word	0x08007268
 8005478:	08007228 	.word	0x08007228

0800547c <puts>:
 800547c:	4b02      	ldr	r3, [pc, #8]	; (8005488 <puts+0xc>)
 800547e:	4601      	mov	r1, r0
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	f7ff bf8d 	b.w	80053a0 <_puts_r>
 8005486:	bf00      	nop
 8005488:	2000001c 	.word	0x2000001c

0800548c <_sbrk_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	2300      	movs	r3, #0
 8005490:	4d05      	ldr	r5, [pc, #20]	; (80054a8 <_sbrk_r+0x1c>)
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fb ffe0 	bl	800145c <_sbrk>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_sbrk_r+0x1a>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_sbrk_r+0x1a>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	2000177c 	.word	0x2000177c

080054ac <siprintf>:
 80054ac:	b40e      	push	{r1, r2, r3}
 80054ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054b2:	b500      	push	{lr}
 80054b4:	b09c      	sub	sp, #112	; 0x70
 80054b6:	ab1d      	add	r3, sp, #116	; 0x74
 80054b8:	9002      	str	r0, [sp, #8]
 80054ba:	9006      	str	r0, [sp, #24]
 80054bc:	9107      	str	r1, [sp, #28]
 80054be:	9104      	str	r1, [sp, #16]
 80054c0:	4808      	ldr	r0, [pc, #32]	; (80054e4 <siprintf+0x38>)
 80054c2:	4909      	ldr	r1, [pc, #36]	; (80054e8 <siprintf+0x3c>)
 80054c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c8:	9105      	str	r1, [sp, #20]
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	a902      	add	r1, sp, #8
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	f000 fb2e 	bl	8005b30 <_svfiprintf_r>
 80054d4:	2200      	movs	r2, #0
 80054d6:	9b02      	ldr	r3, [sp, #8]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	b01c      	add	sp, #112	; 0x70
 80054dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e0:	b003      	add	sp, #12
 80054e2:	4770      	bx	lr
 80054e4:	2000001c 	.word	0x2000001c
 80054e8:	ffff0208 	.word	0xffff0208

080054ec <__sread>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	460c      	mov	r4, r1
 80054f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f4:	f000 ff0a 	bl	800630c <_read_r>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	bfab      	itete	ge
 80054fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005500:	181b      	addge	r3, r3, r0
 8005502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005506:	bfac      	ite	ge
 8005508:	6563      	strge	r3, [r4, #84]	; 0x54
 800550a:	81a3      	strhlt	r3, [r4, #12]
 800550c:	bd10      	pop	{r4, pc}

0800550e <__swrite>:
 800550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005512:	461f      	mov	r7, r3
 8005514:	898b      	ldrh	r3, [r1, #12]
 8005516:	4605      	mov	r5, r0
 8005518:	05db      	lsls	r3, r3, #23
 800551a:	460c      	mov	r4, r1
 800551c:	4616      	mov	r6, r2
 800551e:	d505      	bpl.n	800552c <__swrite+0x1e>
 8005520:	2302      	movs	r3, #2
 8005522:	2200      	movs	r2, #0
 8005524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005528:	f000 f9fe 	bl	8005928 <_lseek_r>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	4632      	mov	r2, r6
 8005530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	4628      	mov	r0, r5
 8005538:	463b      	mov	r3, r7
 800553a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	f000 b89f 	b.w	8005684 <_write_r>

08005546 <__sseek>:
 8005546:	b510      	push	{r4, lr}
 8005548:	460c      	mov	r4, r1
 800554a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554e:	f000 f9eb 	bl	8005928 <_lseek_r>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	bf15      	itete	ne
 8005558:	6560      	strne	r0, [r4, #84]	; 0x54
 800555a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800555e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005562:	81a3      	strheq	r3, [r4, #12]
 8005564:	bf18      	it	ne
 8005566:	81a3      	strhne	r3, [r4, #12]
 8005568:	bd10      	pop	{r4, pc}

0800556a <__sclose>:
 800556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556e:	f000 b909 	b.w	8005784 <_close_r>

08005572 <strstr>:
 8005572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005574:	780c      	ldrb	r4, [r1, #0]
 8005576:	b164      	cbz	r4, 8005592 <strstr+0x20>
 8005578:	4603      	mov	r3, r0
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	1c5e      	adds	r6, r3, #1
 8005580:	b90a      	cbnz	r2, 8005586 <strstr+0x14>
 8005582:	4610      	mov	r0, r2
 8005584:	e005      	b.n	8005592 <strstr+0x20>
 8005586:	4294      	cmp	r4, r2
 8005588:	d108      	bne.n	800559c <strstr+0x2a>
 800558a:	460d      	mov	r5, r1
 800558c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005590:	b902      	cbnz	r2, 8005594 <strstr+0x22>
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005598:	4297      	cmp	r7, r2
 800559a:	d0f7      	beq.n	800558c <strstr+0x1a>
 800559c:	4633      	mov	r3, r6
 800559e:	e7ec      	b.n	800557a <strstr+0x8>

080055a0 <_vsiprintf_r>:
 80055a0:	b500      	push	{lr}
 80055a2:	b09b      	sub	sp, #108	; 0x6c
 80055a4:	9100      	str	r1, [sp, #0]
 80055a6:	9104      	str	r1, [sp, #16]
 80055a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055ac:	9105      	str	r1, [sp, #20]
 80055ae:	9102      	str	r1, [sp, #8]
 80055b0:	4905      	ldr	r1, [pc, #20]	; (80055c8 <_vsiprintf_r+0x28>)
 80055b2:	9103      	str	r1, [sp, #12]
 80055b4:	4669      	mov	r1, sp
 80055b6:	f000 fabb 	bl	8005b30 <_svfiprintf_r>
 80055ba:	2200      	movs	r2, #0
 80055bc:	9b00      	ldr	r3, [sp, #0]
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	b01b      	add	sp, #108	; 0x6c
 80055c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80055c6:	bf00      	nop
 80055c8:	ffff0208 	.word	0xffff0208

080055cc <vsiprintf>:
 80055cc:	4613      	mov	r3, r2
 80055ce:	460a      	mov	r2, r1
 80055d0:	4601      	mov	r1, r0
 80055d2:	4802      	ldr	r0, [pc, #8]	; (80055dc <vsiprintf+0x10>)
 80055d4:	6800      	ldr	r0, [r0, #0]
 80055d6:	f7ff bfe3 	b.w	80055a0 <_vsiprintf_r>
 80055da:	bf00      	nop
 80055dc:	2000001c 	.word	0x2000001c

080055e0 <__swbuf_r>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	460e      	mov	r6, r1
 80055e4:	4614      	mov	r4, r2
 80055e6:	4605      	mov	r5, r0
 80055e8:	b118      	cbz	r0, 80055f2 <__swbuf_r+0x12>
 80055ea:	6983      	ldr	r3, [r0, #24]
 80055ec:	b90b      	cbnz	r3, 80055f2 <__swbuf_r+0x12>
 80055ee:	f7ff fd35 	bl	800505c <__sinit>
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <__swbuf_r+0x98>)
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d12b      	bne.n	8005650 <__swbuf_r+0x70>
 80055f8:	686c      	ldr	r4, [r5, #4]
 80055fa:	69a3      	ldr	r3, [r4, #24]
 80055fc:	60a3      	str	r3, [r4, #8]
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	071a      	lsls	r2, r3, #28
 8005602:	d52f      	bpl.n	8005664 <__swbuf_r+0x84>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	b36b      	cbz	r3, 8005664 <__swbuf_r+0x84>
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	6820      	ldr	r0, [r4, #0]
 800560c:	b2f6      	uxtb	r6, r6
 800560e:	1ac0      	subs	r0, r0, r3
 8005610:	6963      	ldr	r3, [r4, #20]
 8005612:	4637      	mov	r7, r6
 8005614:	4283      	cmp	r3, r0
 8005616:	dc04      	bgt.n	8005622 <__swbuf_r+0x42>
 8005618:	4621      	mov	r1, r4
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f948 	bl	80058b0 <_fflush_r>
 8005620:	bb30      	cbnz	r0, 8005670 <__swbuf_r+0x90>
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	3001      	adds	r0, #1
 8005626:	3b01      	subs	r3, #1
 8005628:	60a3      	str	r3, [r4, #8]
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	6022      	str	r2, [r4, #0]
 8005630:	701e      	strb	r6, [r3, #0]
 8005632:	6963      	ldr	r3, [r4, #20]
 8005634:	4283      	cmp	r3, r0
 8005636:	d004      	beq.n	8005642 <__swbuf_r+0x62>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	07db      	lsls	r3, r3, #31
 800563c:	d506      	bpl.n	800564c <__swbuf_r+0x6c>
 800563e:	2e0a      	cmp	r6, #10
 8005640:	d104      	bne.n	800564c <__swbuf_r+0x6c>
 8005642:	4621      	mov	r1, r4
 8005644:	4628      	mov	r0, r5
 8005646:	f000 f933 	bl	80058b0 <_fflush_r>
 800564a:	b988      	cbnz	r0, 8005670 <__swbuf_r+0x90>
 800564c:	4638      	mov	r0, r7
 800564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <__swbuf_r+0x9c>)
 8005652:	429c      	cmp	r4, r3
 8005654:	d101      	bne.n	800565a <__swbuf_r+0x7a>
 8005656:	68ac      	ldr	r4, [r5, #8]
 8005658:	e7cf      	b.n	80055fa <__swbuf_r+0x1a>
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <__swbuf_r+0xa0>)
 800565c:	429c      	cmp	r4, r3
 800565e:	bf08      	it	eq
 8005660:	68ec      	ldreq	r4, [r5, #12]
 8005662:	e7ca      	b.n	80055fa <__swbuf_r+0x1a>
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f81e 	bl	80056a8 <__swsetup_r>
 800566c:	2800      	cmp	r0, #0
 800566e:	d0cb      	beq.n	8005608 <__swbuf_r+0x28>
 8005670:	f04f 37ff 	mov.w	r7, #4294967295
 8005674:	e7ea      	b.n	800564c <__swbuf_r+0x6c>
 8005676:	bf00      	nop
 8005678:	08007248 	.word	0x08007248
 800567c:	08007268 	.word	0x08007268
 8005680:	08007228 	.word	0x08007228

08005684 <_write_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	2200      	movs	r2, #0
 800568e:	4d05      	ldr	r5, [pc, #20]	; (80056a4 <_write_r+0x20>)
 8005690:	602a      	str	r2, [r5, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f7ff fa8e 	bl	8004bb4 <_write>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_write_r+0x1e>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_write_r+0x1e>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	2000177c 	.word	0x2000177c

080056a8 <__swsetup_r>:
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <__swsetup_r+0xcc>)
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	681d      	ldr	r5, [r3, #0]
 80056ae:	4606      	mov	r6, r0
 80056b0:	460c      	mov	r4, r1
 80056b2:	b125      	cbz	r5, 80056be <__swsetup_r+0x16>
 80056b4:	69ab      	ldr	r3, [r5, #24]
 80056b6:	b913      	cbnz	r3, 80056be <__swsetup_r+0x16>
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff fccf 	bl	800505c <__sinit>
 80056be:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <__swsetup_r+0xd0>)
 80056c0:	429c      	cmp	r4, r3
 80056c2:	d10f      	bne.n	80056e4 <__swsetup_r+0x3c>
 80056c4:	686c      	ldr	r4, [r5, #4]
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056cc:	0719      	lsls	r1, r3, #28
 80056ce:	d42c      	bmi.n	800572a <__swsetup_r+0x82>
 80056d0:	06dd      	lsls	r5, r3, #27
 80056d2:	d411      	bmi.n	80056f8 <__swsetup_r+0x50>
 80056d4:	2309      	movs	r3, #9
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	e03e      	b.n	8005762 <__swsetup_r+0xba>
 80056e4:	4b25      	ldr	r3, [pc, #148]	; (800577c <__swsetup_r+0xd4>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d101      	bne.n	80056ee <__swsetup_r+0x46>
 80056ea:	68ac      	ldr	r4, [r5, #8]
 80056ec:	e7eb      	b.n	80056c6 <__swsetup_r+0x1e>
 80056ee:	4b24      	ldr	r3, [pc, #144]	; (8005780 <__swsetup_r+0xd8>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	bf08      	it	eq
 80056f4:	68ec      	ldreq	r4, [r5, #12]
 80056f6:	e7e6      	b.n	80056c6 <__swsetup_r+0x1e>
 80056f8:	0758      	lsls	r0, r3, #29
 80056fa:	d512      	bpl.n	8005722 <__swsetup_r+0x7a>
 80056fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056fe:	b141      	cbz	r1, 8005712 <__swsetup_r+0x6a>
 8005700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005704:	4299      	cmp	r1, r3
 8005706:	d002      	beq.n	800570e <__swsetup_r+0x66>
 8005708:	4630      	mov	r0, r6
 800570a:	f7ff fd8b 	bl	8005224 <_free_r>
 800570e:	2300      	movs	r3, #0
 8005710:	6363      	str	r3, [r4, #52]	; 0x34
 8005712:	89a3      	ldrh	r3, [r4, #12]
 8005714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	2300      	movs	r3, #0
 800571c:	6063      	str	r3, [r4, #4]
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	89a3      	ldrh	r3, [r4, #12]
 8005724:	f043 0308 	orr.w	r3, r3, #8
 8005728:	81a3      	strh	r3, [r4, #12]
 800572a:	6923      	ldr	r3, [r4, #16]
 800572c:	b94b      	cbnz	r3, 8005742 <__swsetup_r+0x9a>
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d003      	beq.n	8005742 <__swsetup_r+0x9a>
 800573a:	4621      	mov	r1, r4
 800573c:	4630      	mov	r0, r6
 800573e:	f000 f929 	bl	8005994 <__smakebuf_r>
 8005742:	89a0      	ldrh	r0, [r4, #12]
 8005744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005748:	f010 0301 	ands.w	r3, r0, #1
 800574c:	d00a      	beq.n	8005764 <__swsetup_r+0xbc>
 800574e:	2300      	movs	r3, #0
 8005750:	60a3      	str	r3, [r4, #8]
 8005752:	6963      	ldr	r3, [r4, #20]
 8005754:	425b      	negs	r3, r3
 8005756:	61a3      	str	r3, [r4, #24]
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	b943      	cbnz	r3, 800576e <__swsetup_r+0xc6>
 800575c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005760:	d1ba      	bne.n	80056d8 <__swsetup_r+0x30>
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	0781      	lsls	r1, r0, #30
 8005766:	bf58      	it	pl
 8005768:	6963      	ldrpl	r3, [r4, #20]
 800576a:	60a3      	str	r3, [r4, #8]
 800576c:	e7f4      	b.n	8005758 <__swsetup_r+0xb0>
 800576e:	2000      	movs	r0, #0
 8005770:	e7f7      	b.n	8005762 <__swsetup_r+0xba>
 8005772:	bf00      	nop
 8005774:	2000001c 	.word	0x2000001c
 8005778:	08007248 	.word	0x08007248
 800577c:	08007268 	.word	0x08007268
 8005780:	08007228 	.word	0x08007228

08005784 <_close_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	2300      	movs	r3, #0
 8005788:	4d05      	ldr	r5, [pc, #20]	; (80057a0 <_close_r+0x1c>)
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	602b      	str	r3, [r5, #0]
 8005790:	f7ff fa3e 	bl	8004c10 <_close>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_close_r+0x1a>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_close_r+0x1a>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	2000177c 	.word	0x2000177c

080057a4 <__sflush_r>:
 80057a4:	898a      	ldrh	r2, [r1, #12]
 80057a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057aa:	4605      	mov	r5, r0
 80057ac:	0710      	lsls	r0, r2, #28
 80057ae:	460c      	mov	r4, r1
 80057b0:	d458      	bmi.n	8005864 <__sflush_r+0xc0>
 80057b2:	684b      	ldr	r3, [r1, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	dc05      	bgt.n	80057c4 <__sflush_r+0x20>
 80057b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	dc02      	bgt.n	80057c4 <__sflush_r+0x20>
 80057be:	2000      	movs	r0, #0
 80057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057c6:	2e00      	cmp	r6, #0
 80057c8:	d0f9      	beq.n	80057be <__sflush_r+0x1a>
 80057ca:	2300      	movs	r3, #0
 80057cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057d0:	682f      	ldr	r7, [r5, #0]
 80057d2:	602b      	str	r3, [r5, #0]
 80057d4:	d032      	beq.n	800583c <__sflush_r+0x98>
 80057d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	075a      	lsls	r2, r3, #29
 80057dc:	d505      	bpl.n	80057ea <__sflush_r+0x46>
 80057de:	6863      	ldr	r3, [r4, #4]
 80057e0:	1ac0      	subs	r0, r0, r3
 80057e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057e4:	b10b      	cbz	r3, 80057ea <__sflush_r+0x46>
 80057e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057e8:	1ac0      	subs	r0, r0, r3
 80057ea:	2300      	movs	r3, #0
 80057ec:	4602      	mov	r2, r0
 80057ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f0:	4628      	mov	r0, r5
 80057f2:	6a21      	ldr	r1, [r4, #32]
 80057f4:	47b0      	blx	r6
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	89a3      	ldrh	r3, [r4, #12]
 80057fa:	d106      	bne.n	800580a <__sflush_r+0x66>
 80057fc:	6829      	ldr	r1, [r5, #0]
 80057fe:	291d      	cmp	r1, #29
 8005800:	d82c      	bhi.n	800585c <__sflush_r+0xb8>
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <__sflush_r+0x108>)
 8005804:	40ca      	lsrs	r2, r1
 8005806:	07d6      	lsls	r6, r2, #31
 8005808:	d528      	bpl.n	800585c <__sflush_r+0xb8>
 800580a:	2200      	movs	r2, #0
 800580c:	6062      	str	r2, [r4, #4]
 800580e:	6922      	ldr	r2, [r4, #16]
 8005810:	04d9      	lsls	r1, r3, #19
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	d504      	bpl.n	8005820 <__sflush_r+0x7c>
 8005816:	1c42      	adds	r2, r0, #1
 8005818:	d101      	bne.n	800581e <__sflush_r+0x7a>
 800581a:	682b      	ldr	r3, [r5, #0]
 800581c:	b903      	cbnz	r3, 8005820 <__sflush_r+0x7c>
 800581e:	6560      	str	r0, [r4, #84]	; 0x54
 8005820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005822:	602f      	str	r7, [r5, #0]
 8005824:	2900      	cmp	r1, #0
 8005826:	d0ca      	beq.n	80057be <__sflush_r+0x1a>
 8005828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800582c:	4299      	cmp	r1, r3
 800582e:	d002      	beq.n	8005836 <__sflush_r+0x92>
 8005830:	4628      	mov	r0, r5
 8005832:	f7ff fcf7 	bl	8005224 <_free_r>
 8005836:	2000      	movs	r0, #0
 8005838:	6360      	str	r0, [r4, #52]	; 0x34
 800583a:	e7c1      	b.n	80057c0 <__sflush_r+0x1c>
 800583c:	6a21      	ldr	r1, [r4, #32]
 800583e:	2301      	movs	r3, #1
 8005840:	4628      	mov	r0, r5
 8005842:	47b0      	blx	r6
 8005844:	1c41      	adds	r1, r0, #1
 8005846:	d1c7      	bne.n	80057d8 <__sflush_r+0x34>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0c4      	beq.n	80057d8 <__sflush_r+0x34>
 800584e:	2b1d      	cmp	r3, #29
 8005850:	d001      	beq.n	8005856 <__sflush_r+0xb2>
 8005852:	2b16      	cmp	r3, #22
 8005854:	d101      	bne.n	800585a <__sflush_r+0xb6>
 8005856:	602f      	str	r7, [r5, #0]
 8005858:	e7b1      	b.n	80057be <__sflush_r+0x1a>
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005860:	81a3      	strh	r3, [r4, #12]
 8005862:	e7ad      	b.n	80057c0 <__sflush_r+0x1c>
 8005864:	690f      	ldr	r7, [r1, #16]
 8005866:	2f00      	cmp	r7, #0
 8005868:	d0a9      	beq.n	80057be <__sflush_r+0x1a>
 800586a:	0793      	lsls	r3, r2, #30
 800586c:	bf18      	it	ne
 800586e:	2300      	movne	r3, #0
 8005870:	680e      	ldr	r6, [r1, #0]
 8005872:	bf08      	it	eq
 8005874:	694b      	ldreq	r3, [r1, #20]
 8005876:	eba6 0807 	sub.w	r8, r6, r7
 800587a:	600f      	str	r7, [r1, #0]
 800587c:	608b      	str	r3, [r1, #8]
 800587e:	f1b8 0f00 	cmp.w	r8, #0
 8005882:	dd9c      	ble.n	80057be <__sflush_r+0x1a>
 8005884:	4643      	mov	r3, r8
 8005886:	463a      	mov	r2, r7
 8005888:	4628      	mov	r0, r5
 800588a:	6a21      	ldr	r1, [r4, #32]
 800588c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800588e:	47b0      	blx	r6
 8005890:	2800      	cmp	r0, #0
 8005892:	dc06      	bgt.n	80058a2 <__sflush_r+0xfe>
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	f04f 30ff 	mov.w	r0, #4294967295
 800589a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	e78e      	b.n	80057c0 <__sflush_r+0x1c>
 80058a2:	4407      	add	r7, r0
 80058a4:	eba8 0800 	sub.w	r8, r8, r0
 80058a8:	e7e9      	b.n	800587e <__sflush_r+0xda>
 80058aa:	bf00      	nop
 80058ac:	20400001 	.word	0x20400001

080058b0 <_fflush_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	690b      	ldr	r3, [r1, #16]
 80058b4:	4605      	mov	r5, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	b913      	cbnz	r3, 80058c0 <_fflush_r+0x10>
 80058ba:	2500      	movs	r5, #0
 80058bc:	4628      	mov	r0, r5
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	b118      	cbz	r0, 80058ca <_fflush_r+0x1a>
 80058c2:	6983      	ldr	r3, [r0, #24]
 80058c4:	b90b      	cbnz	r3, 80058ca <_fflush_r+0x1a>
 80058c6:	f7ff fbc9 	bl	800505c <__sinit>
 80058ca:	4b14      	ldr	r3, [pc, #80]	; (800591c <_fflush_r+0x6c>)
 80058cc:	429c      	cmp	r4, r3
 80058ce:	d11b      	bne.n	8005908 <_fflush_r+0x58>
 80058d0:	686c      	ldr	r4, [r5, #4]
 80058d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ef      	beq.n	80058ba <_fflush_r+0xa>
 80058da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058dc:	07d0      	lsls	r0, r2, #31
 80058de:	d404      	bmi.n	80058ea <_fflush_r+0x3a>
 80058e0:	0599      	lsls	r1, r3, #22
 80058e2:	d402      	bmi.n	80058ea <_fflush_r+0x3a>
 80058e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058e6:	f7ff fc7c 	bl	80051e2 <__retarget_lock_acquire_recursive>
 80058ea:	4628      	mov	r0, r5
 80058ec:	4621      	mov	r1, r4
 80058ee:	f7ff ff59 	bl	80057a4 <__sflush_r>
 80058f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058f4:	4605      	mov	r5, r0
 80058f6:	07da      	lsls	r2, r3, #31
 80058f8:	d4e0      	bmi.n	80058bc <_fflush_r+0xc>
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	059b      	lsls	r3, r3, #22
 80058fe:	d4dd      	bmi.n	80058bc <_fflush_r+0xc>
 8005900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005902:	f7ff fc6f 	bl	80051e4 <__retarget_lock_release_recursive>
 8005906:	e7d9      	b.n	80058bc <_fflush_r+0xc>
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <_fflush_r+0x70>)
 800590a:	429c      	cmp	r4, r3
 800590c:	d101      	bne.n	8005912 <_fflush_r+0x62>
 800590e:	68ac      	ldr	r4, [r5, #8]
 8005910:	e7df      	b.n	80058d2 <_fflush_r+0x22>
 8005912:	4b04      	ldr	r3, [pc, #16]	; (8005924 <_fflush_r+0x74>)
 8005914:	429c      	cmp	r4, r3
 8005916:	bf08      	it	eq
 8005918:	68ec      	ldreq	r4, [r5, #12]
 800591a:	e7da      	b.n	80058d2 <_fflush_r+0x22>
 800591c:	08007248 	.word	0x08007248
 8005920:	08007268 	.word	0x08007268
 8005924:	08007228 	.word	0x08007228

08005928 <_lseek_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	2200      	movs	r2, #0
 8005932:	4d05      	ldr	r5, [pc, #20]	; (8005948 <_lseek_r+0x20>)
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7ff f92a 	bl	8004b90 <_lseek>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_lseek_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_lseek_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	2000177c 	.word	0x2000177c

0800594c <__swhatbuf_r>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	460e      	mov	r6, r1
 8005950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005954:	4614      	mov	r4, r2
 8005956:	2900      	cmp	r1, #0
 8005958:	461d      	mov	r5, r3
 800595a:	b096      	sub	sp, #88	; 0x58
 800595c:	da07      	bge.n	800596e <__swhatbuf_r+0x22>
 800595e:	2300      	movs	r3, #0
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	89b3      	ldrh	r3, [r6, #12]
 8005964:	061a      	lsls	r2, r3, #24
 8005966:	d410      	bmi.n	800598a <__swhatbuf_r+0x3e>
 8005968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596c:	e00e      	b.n	800598c <__swhatbuf_r+0x40>
 800596e:	466a      	mov	r2, sp
 8005970:	f000 fcde 	bl	8006330 <_fstat_r>
 8005974:	2800      	cmp	r0, #0
 8005976:	dbf2      	blt.n	800595e <__swhatbuf_r+0x12>
 8005978:	9a01      	ldr	r2, [sp, #4]
 800597a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800597e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005982:	425a      	negs	r2, r3
 8005984:	415a      	adcs	r2, r3
 8005986:	602a      	str	r2, [r5, #0]
 8005988:	e7ee      	b.n	8005968 <__swhatbuf_r+0x1c>
 800598a:	2340      	movs	r3, #64	; 0x40
 800598c:	2000      	movs	r0, #0
 800598e:	6023      	str	r3, [r4, #0]
 8005990:	b016      	add	sp, #88	; 0x58
 8005992:	bd70      	pop	{r4, r5, r6, pc}

08005994 <__smakebuf_r>:
 8005994:	898b      	ldrh	r3, [r1, #12]
 8005996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005998:	079d      	lsls	r5, r3, #30
 800599a:	4606      	mov	r6, r0
 800599c:	460c      	mov	r4, r1
 800599e:	d507      	bpl.n	80059b0 <__smakebuf_r+0x1c>
 80059a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	6123      	str	r3, [r4, #16]
 80059a8:	2301      	movs	r3, #1
 80059aa:	6163      	str	r3, [r4, #20]
 80059ac:	b002      	add	sp, #8
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	466a      	mov	r2, sp
 80059b2:	ab01      	add	r3, sp, #4
 80059b4:	f7ff ffca 	bl	800594c <__swhatbuf_r>
 80059b8:	9900      	ldr	r1, [sp, #0]
 80059ba:	4605      	mov	r5, r0
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fc7d 	bl	80052bc <_malloc_r>
 80059c2:	b948      	cbnz	r0, 80059d8 <__smakebuf_r+0x44>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	059a      	lsls	r2, r3, #22
 80059ca:	d4ef      	bmi.n	80059ac <__smakebuf_r+0x18>
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	e7e3      	b.n	80059a0 <__smakebuf_r+0xc>
 80059d8:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <__smakebuf_r+0x7c>)
 80059da:	62b3      	str	r3, [r6, #40]	; 0x28
 80059dc:	89a3      	ldrh	r3, [r4, #12]
 80059de:	6020      	str	r0, [r4, #0]
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	6120      	str	r0, [r4, #16]
 80059ea:	6163      	str	r3, [r4, #20]
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	b15b      	cbz	r3, 8005a08 <__smakebuf_r+0x74>
 80059f0:	4630      	mov	r0, r6
 80059f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f6:	f000 fcad 	bl	8006354 <_isatty_r>
 80059fa:	b128      	cbz	r0, 8005a08 <__smakebuf_r+0x74>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f023 0303 	bic.w	r3, r3, #3
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	89a0      	ldrh	r0, [r4, #12]
 8005a0a:	4305      	orrs	r5, r0
 8005a0c:	81a5      	strh	r5, [r4, #12]
 8005a0e:	e7cd      	b.n	80059ac <__smakebuf_r+0x18>
 8005a10:	08004ff5 	.word	0x08004ff5

08005a14 <__malloc_lock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	; (8005a1c <__malloc_lock+0x8>)
 8005a16:	f7ff bbe4 	b.w	80051e2 <__retarget_lock_acquire_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20001774 	.word	0x20001774

08005a20 <__malloc_unlock>:
 8005a20:	4801      	ldr	r0, [pc, #4]	; (8005a28 <__malloc_unlock+0x8>)
 8005a22:	f7ff bbdf 	b.w	80051e4 <__retarget_lock_release_recursive>
 8005a26:	bf00      	nop
 8005a28:	20001774 	.word	0x20001774

08005a2c <_realloc_r>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	4607      	mov	r7, r0
 8005a30:	4614      	mov	r4, r2
 8005a32:	460e      	mov	r6, r1
 8005a34:	b921      	cbnz	r1, 8005a40 <_realloc_r+0x14>
 8005a36:	4611      	mov	r1, r2
 8005a38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a3c:	f7ff bc3e 	b.w	80052bc <_malloc_r>
 8005a40:	b922      	cbnz	r2, 8005a4c <_realloc_r+0x20>
 8005a42:	f7ff fbef 	bl	8005224 <_free_r>
 8005a46:	4625      	mov	r5, r4
 8005a48:	4628      	mov	r0, r5
 8005a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a4c:	f000 fcba 	bl	80063c4 <_malloc_usable_size_r>
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d20f      	bcs.n	8005a74 <_realloc_r+0x48>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4638      	mov	r0, r7
 8005a58:	f7ff fc30 	bl	80052bc <_malloc_r>
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d0f2      	beq.n	8005a48 <_realloc_r+0x1c>
 8005a62:	4631      	mov	r1, r6
 8005a64:	4622      	mov	r2, r4
 8005a66:	f7ff fbc7 	bl	80051f8 <memcpy>
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff fbd9 	bl	8005224 <_free_r>
 8005a72:	e7e9      	b.n	8005a48 <_realloc_r+0x1c>
 8005a74:	4635      	mov	r5, r6
 8005a76:	e7e7      	b.n	8005a48 <_realloc_r+0x1c>

08005a78 <__ssputs_r>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	688e      	ldr	r6, [r1, #8]
 8005a7e:	4682      	mov	sl, r0
 8005a80:	429e      	cmp	r6, r3
 8005a82:	460c      	mov	r4, r1
 8005a84:	4690      	mov	r8, r2
 8005a86:	461f      	mov	r7, r3
 8005a88:	d838      	bhi.n	8005afc <__ssputs_r+0x84>
 8005a8a:	898a      	ldrh	r2, [r1, #12]
 8005a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a90:	d032      	beq.n	8005af8 <__ssputs_r+0x80>
 8005a92:	6825      	ldr	r5, [r4, #0]
 8005a94:	6909      	ldr	r1, [r1, #16]
 8005a96:	3301      	adds	r3, #1
 8005a98:	eba5 0901 	sub.w	r9, r5, r1
 8005a9c:	6965      	ldr	r5, [r4, #20]
 8005a9e:	444b      	add	r3, r9
 8005aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aa8:	106d      	asrs	r5, r5, #1
 8005aaa:	429d      	cmp	r5, r3
 8005aac:	bf38      	it	cc
 8005aae:	461d      	movcc	r5, r3
 8005ab0:	0553      	lsls	r3, r2, #21
 8005ab2:	d531      	bpl.n	8005b18 <__ssputs_r+0xa0>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7ff fc01 	bl	80052bc <_malloc_r>
 8005aba:	4606      	mov	r6, r0
 8005abc:	b950      	cbnz	r0, 8005ad4 <__ssputs_r+0x5c>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	f8ca 3000 	str.w	r3, [sl]
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad4:	464a      	mov	r2, r9
 8005ad6:	6921      	ldr	r1, [r4, #16]
 8005ad8:	f7ff fb8e 	bl	80051f8 <memcpy>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	6126      	str	r6, [r4, #16]
 8005aea:	444e      	add	r6, r9
 8005aec:	6026      	str	r6, [r4, #0]
 8005aee:	463e      	mov	r6, r7
 8005af0:	6165      	str	r5, [r4, #20]
 8005af2:	eba5 0509 	sub.w	r5, r5, r9
 8005af6:	60a5      	str	r5, [r4, #8]
 8005af8:	42be      	cmp	r6, r7
 8005afa:	d900      	bls.n	8005afe <__ssputs_r+0x86>
 8005afc:	463e      	mov	r6, r7
 8005afe:	4632      	mov	r2, r6
 8005b00:	4641      	mov	r1, r8
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	f000 fc44 	bl	8006390 <memmove>
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	1b9b      	subs	r3, r3, r6
 8005b0e:	4432      	add	r2, r6
 8005b10:	2000      	movs	r0, #0
 8005b12:	60a3      	str	r3, [r4, #8]
 8005b14:	6022      	str	r2, [r4, #0]
 8005b16:	e7db      	b.n	8005ad0 <__ssputs_r+0x58>
 8005b18:	462a      	mov	r2, r5
 8005b1a:	f7ff ff87 	bl	8005a2c <_realloc_r>
 8005b1e:	4606      	mov	r6, r0
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d1e1      	bne.n	8005ae8 <__ssputs_r+0x70>
 8005b24:	4650      	mov	r0, sl
 8005b26:	6921      	ldr	r1, [r4, #16]
 8005b28:	f7ff fb7c 	bl	8005224 <_free_r>
 8005b2c:	e7c7      	b.n	8005abe <__ssputs_r+0x46>
	...

08005b30 <_svfiprintf_r>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	4698      	mov	r8, r3
 8005b36:	898b      	ldrh	r3, [r1, #12]
 8005b38:	4607      	mov	r7, r0
 8005b3a:	061b      	lsls	r3, r3, #24
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	4614      	mov	r4, r2
 8005b40:	b09d      	sub	sp, #116	; 0x74
 8005b42:	d50e      	bpl.n	8005b62 <_svfiprintf_r+0x32>
 8005b44:	690b      	ldr	r3, [r1, #16]
 8005b46:	b963      	cbnz	r3, 8005b62 <_svfiprintf_r+0x32>
 8005b48:	2140      	movs	r1, #64	; 0x40
 8005b4a:	f7ff fbb7 	bl	80052bc <_malloc_r>
 8005b4e:	6028      	str	r0, [r5, #0]
 8005b50:	6128      	str	r0, [r5, #16]
 8005b52:	b920      	cbnz	r0, 8005b5e <_svfiprintf_r+0x2e>
 8005b54:	230c      	movs	r3, #12
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e0d1      	b.n	8005d02 <_svfiprintf_r+0x1d2>
 8005b5e:	2340      	movs	r3, #64	; 0x40
 8005b60:	616b      	str	r3, [r5, #20]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9309      	str	r3, [sp, #36]	; 0x24
 8005b66:	2320      	movs	r3, #32
 8005b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b6c:	2330      	movs	r3, #48	; 0x30
 8005b6e:	f04f 0901 	mov.w	r9, #1
 8005b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d1c <_svfiprintf_r+0x1ec>
 8005b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b7e:	4623      	mov	r3, r4
 8005b80:	469a      	mov	sl, r3
 8005b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b86:	b10a      	cbz	r2, 8005b8c <_svfiprintf_r+0x5c>
 8005b88:	2a25      	cmp	r2, #37	; 0x25
 8005b8a:	d1f9      	bne.n	8005b80 <_svfiprintf_r+0x50>
 8005b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b90:	d00b      	beq.n	8005baa <_svfiprintf_r+0x7a>
 8005b92:	465b      	mov	r3, fp
 8005b94:	4622      	mov	r2, r4
 8005b96:	4629      	mov	r1, r5
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f7ff ff6d 	bl	8005a78 <__ssputs_r>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f000 80aa 	beq.w	8005cf8 <_svfiprintf_r+0x1c8>
 8005ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba6:	445a      	add	r2, fp
 8005ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8005baa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80a2 	beq.w	8005cf8 <_svfiprintf_r+0x1c8>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bbe:	f10a 0a01 	add.w	sl, sl, #1
 8005bc2:	9304      	str	r3, [sp, #16]
 8005bc4:	9307      	str	r3, [sp, #28]
 8005bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bca:	931a      	str	r3, [sp, #104]	; 0x68
 8005bcc:	4654      	mov	r4, sl
 8005bce:	2205      	movs	r2, #5
 8005bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd4:	4851      	ldr	r0, [pc, #324]	; (8005d1c <_svfiprintf_r+0x1ec>)
 8005bd6:	f000 fbcd 	bl	8006374 <memchr>
 8005bda:	9a04      	ldr	r2, [sp, #16]
 8005bdc:	b9d8      	cbnz	r0, 8005c16 <_svfiprintf_r+0xe6>
 8005bde:	06d0      	lsls	r0, r2, #27
 8005be0:	bf44      	itt	mi
 8005be2:	2320      	movmi	r3, #32
 8005be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be8:	0711      	lsls	r1, r2, #28
 8005bea:	bf44      	itt	mi
 8005bec:	232b      	movmi	r3, #43	; 0x2b
 8005bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf8:	d015      	beq.n	8005c26 <_svfiprintf_r+0xf6>
 8005bfa:	4654      	mov	r4, sl
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f04f 0c0a 	mov.w	ip, #10
 8005c02:	9a07      	ldr	r2, [sp, #28]
 8005c04:	4621      	mov	r1, r4
 8005c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c0a:	3b30      	subs	r3, #48	; 0x30
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d94e      	bls.n	8005cae <_svfiprintf_r+0x17e>
 8005c10:	b1b0      	cbz	r0, 8005c40 <_svfiprintf_r+0x110>
 8005c12:	9207      	str	r2, [sp, #28]
 8005c14:	e014      	b.n	8005c40 <_svfiprintf_r+0x110>
 8005c16:	eba0 0308 	sub.w	r3, r0, r8
 8005c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	46a2      	mov	sl, r4
 8005c22:	9304      	str	r3, [sp, #16]
 8005c24:	e7d2      	b.n	8005bcc <_svfiprintf_r+0x9c>
 8005c26:	9b03      	ldr	r3, [sp, #12]
 8005c28:	1d19      	adds	r1, r3, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	9103      	str	r1, [sp, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bfbb      	ittet	lt
 8005c32:	425b      	neglt	r3, r3
 8005c34:	f042 0202 	orrlt.w	r2, r2, #2
 8005c38:	9307      	strge	r3, [sp, #28]
 8005c3a:	9307      	strlt	r3, [sp, #28]
 8005c3c:	bfb8      	it	lt
 8005c3e:	9204      	strlt	r2, [sp, #16]
 8005c40:	7823      	ldrb	r3, [r4, #0]
 8005c42:	2b2e      	cmp	r3, #46	; 0x2e
 8005c44:	d10c      	bne.n	8005c60 <_svfiprintf_r+0x130>
 8005c46:	7863      	ldrb	r3, [r4, #1]
 8005c48:	2b2a      	cmp	r3, #42	; 0x2a
 8005c4a:	d135      	bne.n	8005cb8 <_svfiprintf_r+0x188>
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	3402      	adds	r4, #2
 8005c50:	1d1a      	adds	r2, r3, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	9203      	str	r2, [sp, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	bfb8      	it	lt
 8005c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c5e:	9305      	str	r3, [sp, #20]
 8005c60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005d2c <_svfiprintf_r+0x1fc>
 8005c64:	2203      	movs	r2, #3
 8005c66:	4650      	mov	r0, sl
 8005c68:	7821      	ldrb	r1, [r4, #0]
 8005c6a:	f000 fb83 	bl	8006374 <memchr>
 8005c6e:	b140      	cbz	r0, 8005c82 <_svfiprintf_r+0x152>
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	eba0 000a 	sub.w	r0, r0, sl
 8005c76:	fa03 f000 	lsl.w	r0, r3, r0
 8005c7a:	9b04      	ldr	r3, [sp, #16]
 8005c7c:	3401      	adds	r4, #1
 8005c7e:	4303      	orrs	r3, r0
 8005c80:	9304      	str	r3, [sp, #16]
 8005c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c86:	2206      	movs	r2, #6
 8005c88:	4825      	ldr	r0, [pc, #148]	; (8005d20 <_svfiprintf_r+0x1f0>)
 8005c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c8e:	f000 fb71 	bl	8006374 <memchr>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d038      	beq.n	8005d08 <_svfiprintf_r+0x1d8>
 8005c96:	4b23      	ldr	r3, [pc, #140]	; (8005d24 <_svfiprintf_r+0x1f4>)
 8005c98:	bb1b      	cbnz	r3, 8005ce2 <_svfiprintf_r+0x1b2>
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	3307      	adds	r3, #7
 8005c9e:	f023 0307 	bic.w	r3, r3, #7
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	9303      	str	r3, [sp, #12]
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	4433      	add	r3, r6
 8005caa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cac:	e767      	b.n	8005b7e <_svfiprintf_r+0x4e>
 8005cae:	460c      	mov	r4, r1
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cb6:	e7a5      	b.n	8005c04 <_svfiprintf_r+0xd4>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f04f 0c0a 	mov.w	ip, #10
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	9305      	str	r3, [sp, #20]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cca:	3a30      	subs	r2, #48	; 0x30
 8005ccc:	2a09      	cmp	r2, #9
 8005cce:	d903      	bls.n	8005cd8 <_svfiprintf_r+0x1a8>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0c5      	beq.n	8005c60 <_svfiprintf_r+0x130>
 8005cd4:	9105      	str	r1, [sp, #20]
 8005cd6:	e7c3      	b.n	8005c60 <_svfiprintf_r+0x130>
 8005cd8:	4604      	mov	r4, r0
 8005cda:	2301      	movs	r3, #1
 8005cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ce0:	e7f0      	b.n	8005cc4 <_svfiprintf_r+0x194>
 8005ce2:	ab03      	add	r3, sp, #12
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4638      	mov	r0, r7
 8005cea:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <_svfiprintf_r+0x1f8>)
 8005cec:	a904      	add	r1, sp, #16
 8005cee:	f3af 8000 	nop.w
 8005cf2:	1c42      	adds	r2, r0, #1
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	d1d6      	bne.n	8005ca6 <_svfiprintf_r+0x176>
 8005cf8:	89ab      	ldrh	r3, [r5, #12]
 8005cfa:	065b      	lsls	r3, r3, #25
 8005cfc:	f53f af2c 	bmi.w	8005b58 <_svfiprintf_r+0x28>
 8005d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d02:	b01d      	add	sp, #116	; 0x74
 8005d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d08:	ab03      	add	r3, sp, #12
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	4638      	mov	r0, r7
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <_svfiprintf_r+0x1f8>)
 8005d12:	a904      	add	r1, sp, #16
 8005d14:	f000 f9d4 	bl	80060c0 <_printf_i>
 8005d18:	e7eb      	b.n	8005cf2 <_svfiprintf_r+0x1c2>
 8005d1a:	bf00      	nop
 8005d1c:	0800728c 	.word	0x0800728c
 8005d20:	08007296 	.word	0x08007296
 8005d24:	00000000 	.word	0x00000000
 8005d28:	08005a79 	.word	0x08005a79
 8005d2c:	08007292 	.word	0x08007292

08005d30 <__sfputc_r>:
 8005d30:	6893      	ldr	r3, [r2, #8]
 8005d32:	b410      	push	{r4}
 8005d34:	3b01      	subs	r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	6093      	str	r3, [r2, #8]
 8005d3a:	da07      	bge.n	8005d4c <__sfputc_r+0x1c>
 8005d3c:	6994      	ldr	r4, [r2, #24]
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	db01      	blt.n	8005d46 <__sfputc_r+0x16>
 8005d42:	290a      	cmp	r1, #10
 8005d44:	d102      	bne.n	8005d4c <__sfputc_r+0x1c>
 8005d46:	bc10      	pop	{r4}
 8005d48:	f7ff bc4a 	b.w	80055e0 <__swbuf_r>
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	1c58      	adds	r0, r3, #1
 8005d50:	6010      	str	r0, [r2, #0]
 8005d52:	7019      	strb	r1, [r3, #0]
 8005d54:	4608      	mov	r0, r1
 8005d56:	bc10      	pop	{r4}
 8005d58:	4770      	bx	lr

08005d5a <__sfputs_r>:
 8005d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	460f      	mov	r7, r1
 8005d60:	4614      	mov	r4, r2
 8005d62:	18d5      	adds	r5, r2, r3
 8005d64:	42ac      	cmp	r4, r5
 8005d66:	d101      	bne.n	8005d6c <__sfputs_r+0x12>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e007      	b.n	8005d7c <__sfputs_r+0x22>
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d74:	f7ff ffdc 	bl	8005d30 <__sfputc_r>
 8005d78:	1c43      	adds	r3, r0, #1
 8005d7a:	d1f3      	bne.n	8005d64 <__sfputs_r+0xa>
 8005d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d80 <_vfiprintf_r>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	460d      	mov	r5, r1
 8005d86:	4614      	mov	r4, r2
 8005d88:	4698      	mov	r8, r3
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	b09d      	sub	sp, #116	; 0x74
 8005d8e:	b118      	cbz	r0, 8005d98 <_vfiprintf_r+0x18>
 8005d90:	6983      	ldr	r3, [r0, #24]
 8005d92:	b90b      	cbnz	r3, 8005d98 <_vfiprintf_r+0x18>
 8005d94:	f7ff f962 	bl	800505c <__sinit>
 8005d98:	4b89      	ldr	r3, [pc, #548]	; (8005fc0 <_vfiprintf_r+0x240>)
 8005d9a:	429d      	cmp	r5, r3
 8005d9c:	d11b      	bne.n	8005dd6 <_vfiprintf_r+0x56>
 8005d9e:	6875      	ldr	r5, [r6, #4]
 8005da0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da2:	07d9      	lsls	r1, r3, #31
 8005da4:	d405      	bmi.n	8005db2 <_vfiprintf_r+0x32>
 8005da6:	89ab      	ldrh	r3, [r5, #12]
 8005da8:	059a      	lsls	r2, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_vfiprintf_r+0x32>
 8005dac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dae:	f7ff fa18 	bl	80051e2 <__retarget_lock_acquire_recursive>
 8005db2:	89ab      	ldrh	r3, [r5, #12]
 8005db4:	071b      	lsls	r3, r3, #28
 8005db6:	d501      	bpl.n	8005dbc <_vfiprintf_r+0x3c>
 8005db8:	692b      	ldr	r3, [r5, #16]
 8005dba:	b9eb      	cbnz	r3, 8005df8 <_vfiprintf_r+0x78>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7ff fc72 	bl	80056a8 <__swsetup_r>
 8005dc4:	b1c0      	cbz	r0, 8005df8 <_vfiprintf_r+0x78>
 8005dc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc8:	07dc      	lsls	r4, r3, #31
 8005dca:	d50e      	bpl.n	8005dea <_vfiprintf_r+0x6a>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	b01d      	add	sp, #116	; 0x74
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	4b7b      	ldr	r3, [pc, #492]	; (8005fc4 <_vfiprintf_r+0x244>)
 8005dd8:	429d      	cmp	r5, r3
 8005dda:	d101      	bne.n	8005de0 <_vfiprintf_r+0x60>
 8005ddc:	68b5      	ldr	r5, [r6, #8]
 8005dde:	e7df      	b.n	8005da0 <_vfiprintf_r+0x20>
 8005de0:	4b79      	ldr	r3, [pc, #484]	; (8005fc8 <_vfiprintf_r+0x248>)
 8005de2:	429d      	cmp	r5, r3
 8005de4:	bf08      	it	eq
 8005de6:	68f5      	ldreq	r5, [r6, #12]
 8005de8:	e7da      	b.n	8005da0 <_vfiprintf_r+0x20>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	0598      	lsls	r0, r3, #22
 8005dee:	d4ed      	bmi.n	8005dcc <_vfiprintf_r+0x4c>
 8005df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005df2:	f7ff f9f7 	bl	80051e4 <__retarget_lock_release_recursive>
 8005df6:	e7e9      	b.n	8005dcc <_vfiprintf_r+0x4c>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e02:	2330      	movs	r3, #48	; 0x30
 8005e04:	f04f 0901 	mov.w	r9, #1
 8005e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fcc <_vfiprintf_r+0x24c>
 8005e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e14:	4623      	mov	r3, r4
 8005e16:	469a      	mov	sl, r3
 8005e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1c:	b10a      	cbz	r2, 8005e22 <_vfiprintf_r+0xa2>
 8005e1e:	2a25      	cmp	r2, #37	; 0x25
 8005e20:	d1f9      	bne.n	8005e16 <_vfiprintf_r+0x96>
 8005e22:	ebba 0b04 	subs.w	fp, sl, r4
 8005e26:	d00b      	beq.n	8005e40 <_vfiprintf_r+0xc0>
 8005e28:	465b      	mov	r3, fp
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ff93 	bl	8005d5a <__sfputs_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	f000 80aa 	beq.w	8005f8e <_vfiprintf_r+0x20e>
 8005e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e3c:	445a      	add	r2, fp
 8005e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e40:	f89a 3000 	ldrb.w	r3, [sl]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80a2 	beq.w	8005f8e <_vfiprintf_r+0x20e>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e54:	f10a 0a01 	add.w	sl, sl, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	9307      	str	r3, [sp, #28]
 8005e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e60:	931a      	str	r3, [sp, #104]	; 0x68
 8005e62:	4654      	mov	r4, sl
 8005e64:	2205      	movs	r2, #5
 8005e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6a:	4858      	ldr	r0, [pc, #352]	; (8005fcc <_vfiprintf_r+0x24c>)
 8005e6c:	f000 fa82 	bl	8006374 <memchr>
 8005e70:	9a04      	ldr	r2, [sp, #16]
 8005e72:	b9d8      	cbnz	r0, 8005eac <_vfiprintf_r+0x12c>
 8005e74:	06d1      	lsls	r1, r2, #27
 8005e76:	bf44      	itt	mi
 8005e78:	2320      	movmi	r3, #32
 8005e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e7e:	0713      	lsls	r3, r2, #28
 8005e80:	bf44      	itt	mi
 8005e82:	232b      	movmi	r3, #43	; 0x2b
 8005e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e88:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8e:	d015      	beq.n	8005ebc <_vfiprintf_r+0x13c>
 8005e90:	4654      	mov	r4, sl
 8005e92:	2000      	movs	r0, #0
 8005e94:	f04f 0c0a 	mov.w	ip, #10
 8005e98:	9a07      	ldr	r2, [sp, #28]
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea0:	3b30      	subs	r3, #48	; 0x30
 8005ea2:	2b09      	cmp	r3, #9
 8005ea4:	d94e      	bls.n	8005f44 <_vfiprintf_r+0x1c4>
 8005ea6:	b1b0      	cbz	r0, 8005ed6 <_vfiprintf_r+0x156>
 8005ea8:	9207      	str	r2, [sp, #28]
 8005eaa:	e014      	b.n	8005ed6 <_vfiprintf_r+0x156>
 8005eac:	eba0 0308 	sub.w	r3, r0, r8
 8005eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	46a2      	mov	sl, r4
 8005eb8:	9304      	str	r3, [sp, #16]
 8005eba:	e7d2      	b.n	8005e62 <_vfiprintf_r+0xe2>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1d19      	adds	r1, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	9103      	str	r1, [sp, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bfbb      	ittet	lt
 8005ec8:	425b      	neglt	r3, r3
 8005eca:	f042 0202 	orrlt.w	r2, r2, #2
 8005ece:	9307      	strge	r3, [sp, #28]
 8005ed0:	9307      	strlt	r3, [sp, #28]
 8005ed2:	bfb8      	it	lt
 8005ed4:	9204      	strlt	r2, [sp, #16]
 8005ed6:	7823      	ldrb	r3, [r4, #0]
 8005ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8005eda:	d10c      	bne.n	8005ef6 <_vfiprintf_r+0x176>
 8005edc:	7863      	ldrb	r3, [r4, #1]
 8005ede:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee0:	d135      	bne.n	8005f4e <_vfiprintf_r+0x1ce>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	3402      	adds	r4, #2
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	9203      	str	r2, [sp, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfb8      	it	lt
 8005ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ef4:	9305      	str	r3, [sp, #20]
 8005ef6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005fdc <_vfiprintf_r+0x25c>
 8005efa:	2203      	movs	r2, #3
 8005efc:	4650      	mov	r0, sl
 8005efe:	7821      	ldrb	r1, [r4, #0]
 8005f00:	f000 fa38 	bl	8006374 <memchr>
 8005f04:	b140      	cbz	r0, 8005f18 <_vfiprintf_r+0x198>
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	eba0 000a 	sub.w	r0, r0, sl
 8005f0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	3401      	adds	r4, #1
 8005f14:	4303      	orrs	r3, r0
 8005f16:	9304      	str	r3, [sp, #16]
 8005f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	482c      	ldr	r0, [pc, #176]	; (8005fd0 <_vfiprintf_r+0x250>)
 8005f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f24:	f000 fa26 	bl	8006374 <memchr>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d03f      	beq.n	8005fac <_vfiprintf_r+0x22c>
 8005f2c:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <_vfiprintf_r+0x254>)
 8005f2e:	bb1b      	cbnz	r3, 8005f78 <_vfiprintf_r+0x1f8>
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	3307      	adds	r3, #7
 8005f34:	f023 0307 	bic.w	r3, r3, #7
 8005f38:	3308      	adds	r3, #8
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3e:	443b      	add	r3, r7
 8005f40:	9309      	str	r3, [sp, #36]	; 0x24
 8005f42:	e767      	b.n	8005e14 <_vfiprintf_r+0x94>
 8005f44:	460c      	mov	r4, r1
 8005f46:	2001      	movs	r0, #1
 8005f48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f4c:	e7a5      	b.n	8005e9a <_vfiprintf_r+0x11a>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4619      	mov	r1, r3
 8005f56:	3401      	adds	r4, #1
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f60:	3a30      	subs	r2, #48	; 0x30
 8005f62:	2a09      	cmp	r2, #9
 8005f64:	d903      	bls.n	8005f6e <_vfiprintf_r+0x1ee>
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0c5      	beq.n	8005ef6 <_vfiprintf_r+0x176>
 8005f6a:	9105      	str	r1, [sp, #20]
 8005f6c:	e7c3      	b.n	8005ef6 <_vfiprintf_r+0x176>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	2301      	movs	r3, #1
 8005f72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f76:	e7f0      	b.n	8005f5a <_vfiprintf_r+0x1da>
 8005f78:	ab03      	add	r3, sp, #12
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	462a      	mov	r2, r5
 8005f7e:	4630      	mov	r0, r6
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <_vfiprintf_r+0x258>)
 8005f82:	a904      	add	r1, sp, #16
 8005f84:	f3af 8000 	nop.w
 8005f88:	4607      	mov	r7, r0
 8005f8a:	1c78      	adds	r0, r7, #1
 8005f8c:	d1d6      	bne.n	8005f3c <_vfiprintf_r+0x1bc>
 8005f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f90:	07d9      	lsls	r1, r3, #31
 8005f92:	d405      	bmi.n	8005fa0 <_vfiprintf_r+0x220>
 8005f94:	89ab      	ldrh	r3, [r5, #12]
 8005f96:	059a      	lsls	r2, r3, #22
 8005f98:	d402      	bmi.n	8005fa0 <_vfiprintf_r+0x220>
 8005f9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f9c:	f7ff f922 	bl	80051e4 <__retarget_lock_release_recursive>
 8005fa0:	89ab      	ldrh	r3, [r5, #12]
 8005fa2:	065b      	lsls	r3, r3, #25
 8005fa4:	f53f af12 	bmi.w	8005dcc <_vfiprintf_r+0x4c>
 8005fa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005faa:	e711      	b.n	8005dd0 <_vfiprintf_r+0x50>
 8005fac:	ab03      	add	r3, sp, #12
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <_vfiprintf_r+0x258>)
 8005fb6:	a904      	add	r1, sp, #16
 8005fb8:	f000 f882 	bl	80060c0 <_printf_i>
 8005fbc:	e7e4      	b.n	8005f88 <_vfiprintf_r+0x208>
 8005fbe:	bf00      	nop
 8005fc0:	08007248 	.word	0x08007248
 8005fc4:	08007268 	.word	0x08007268
 8005fc8:	08007228 	.word	0x08007228
 8005fcc:	0800728c 	.word	0x0800728c
 8005fd0:	08007296 	.word	0x08007296
 8005fd4:	00000000 	.word	0x00000000
 8005fd8:	08005d5b 	.word	0x08005d5b
 8005fdc:	08007292 	.word	0x08007292

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	4607      	mov	r7, r0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	bfb8      	it	lt
 8005ff2:	4613      	movlt	r3, r2
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc28      	bgt.n	800607a <_printf_common+0x9a>
 8006028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800602c:	1e13      	subs	r3, r2, #0
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d42d      	bmi.n	8006094 <_printf_common+0xb4>
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d020      	beq.n	8006088 <_printf_common+0xa8>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	68e5      	ldr	r5, [r4, #12]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf18      	it	ne
 8006052:	2500      	movne	r5, #0
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	f04f 0600 	mov.w	r6, #0
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	bf08      	it	eq
 800605e:	1aad      	subeq	r5, r5, r2
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	bf08      	it	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	4293      	cmp	r3, r2
 800606a:	bfc4      	itt	gt
 800606c:	1a9b      	subgt	r3, r3, r2
 800606e:	18ed      	addgt	r5, r5, r3
 8006070:	341a      	adds	r4, #26
 8006072:	42b5      	cmp	r5, r6
 8006074:	d11a      	bne.n	80060ac <_printf_common+0xcc>
 8006076:	2000      	movs	r0, #0
 8006078:	e008      	b.n	800608c <_printf_common+0xac>
 800607a:	2301      	movs	r3, #1
 800607c:	4652      	mov	r2, sl
 800607e:	4649      	mov	r1, r9
 8006080:	4638      	mov	r0, r7
 8006082:	47c0      	blx	r8
 8006084:	3001      	adds	r0, #1
 8006086:	d103      	bne.n	8006090 <_printf_common+0xb0>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006090:	3501      	adds	r5, #1
 8006092:	e7c4      	b.n	800601e <_printf_common+0x3e>
 8006094:	2030      	movs	r0, #48	; 0x30
 8006096:	18e1      	adds	r1, r4, r3
 8006098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a2:	4422      	add	r2, r4
 80060a4:	3302      	adds	r3, #2
 80060a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060aa:	e7c5      	b.n	8006038 <_printf_common+0x58>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4622      	mov	r2, r4
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d0e6      	beq.n	8006088 <_printf_common+0xa8>
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7d9      	b.n	8006072 <_printf_common+0x92>
	...

080060c0 <_printf_i>:
 80060c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	7e27      	ldrb	r7, [r4, #24]
 80060c8:	4691      	mov	r9, r2
 80060ca:	2f78      	cmp	r7, #120	; 0x78
 80060cc:	4680      	mov	r8, r0
 80060ce:	469a      	mov	sl, r3
 80060d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80060d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d6:	d807      	bhi.n	80060e8 <_printf_i+0x28>
 80060d8:	2f62      	cmp	r7, #98	; 0x62
 80060da:	d80a      	bhi.n	80060f2 <_printf_i+0x32>
 80060dc:	2f00      	cmp	r7, #0
 80060de:	f000 80d9 	beq.w	8006294 <_printf_i+0x1d4>
 80060e2:	2f58      	cmp	r7, #88	; 0x58
 80060e4:	f000 80a4 	beq.w	8006230 <_printf_i+0x170>
 80060e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f0:	e03a      	b.n	8006168 <_printf_i+0xa8>
 80060f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060f6:	2b15      	cmp	r3, #21
 80060f8:	d8f6      	bhi.n	80060e8 <_printf_i+0x28>
 80060fa:	a001      	add	r0, pc, #4	; (adr r0, 8006100 <_printf_i+0x40>)
 80060fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006100:	08006159 	.word	0x08006159
 8006104:	0800616d 	.word	0x0800616d
 8006108:	080060e9 	.word	0x080060e9
 800610c:	080060e9 	.word	0x080060e9
 8006110:	080060e9 	.word	0x080060e9
 8006114:	080060e9 	.word	0x080060e9
 8006118:	0800616d 	.word	0x0800616d
 800611c:	080060e9 	.word	0x080060e9
 8006120:	080060e9 	.word	0x080060e9
 8006124:	080060e9 	.word	0x080060e9
 8006128:	080060e9 	.word	0x080060e9
 800612c:	0800627b 	.word	0x0800627b
 8006130:	0800619d 	.word	0x0800619d
 8006134:	0800625d 	.word	0x0800625d
 8006138:	080060e9 	.word	0x080060e9
 800613c:	080060e9 	.word	0x080060e9
 8006140:	0800629d 	.word	0x0800629d
 8006144:	080060e9 	.word	0x080060e9
 8006148:	0800619d 	.word	0x0800619d
 800614c:	080060e9 	.word	0x080060e9
 8006150:	080060e9 	.word	0x080060e9
 8006154:	08006265 	.word	0x08006265
 8006158:	680b      	ldr	r3, [r1, #0]
 800615a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800615e:	1d1a      	adds	r2, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	600a      	str	r2, [r1, #0]
 8006164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006168:	2301      	movs	r3, #1
 800616a:	e0a4      	b.n	80062b6 <_printf_i+0x1f6>
 800616c:	6825      	ldr	r5, [r4, #0]
 800616e:	6808      	ldr	r0, [r1, #0]
 8006170:	062e      	lsls	r6, r5, #24
 8006172:	f100 0304 	add.w	r3, r0, #4
 8006176:	d50a      	bpl.n	800618e <_printf_i+0xce>
 8006178:	6805      	ldr	r5, [r0, #0]
 800617a:	600b      	str	r3, [r1, #0]
 800617c:	2d00      	cmp	r5, #0
 800617e:	da03      	bge.n	8006188 <_printf_i+0xc8>
 8006180:	232d      	movs	r3, #45	; 0x2d
 8006182:	426d      	negs	r5, r5
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	230a      	movs	r3, #10
 800618a:	485e      	ldr	r0, [pc, #376]	; (8006304 <_printf_i+0x244>)
 800618c:	e019      	b.n	80061c2 <_printf_i+0x102>
 800618e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006192:	6805      	ldr	r5, [r0, #0]
 8006194:	600b      	str	r3, [r1, #0]
 8006196:	bf18      	it	ne
 8006198:	b22d      	sxthne	r5, r5
 800619a:	e7ef      	b.n	800617c <_printf_i+0xbc>
 800619c:	680b      	ldr	r3, [r1, #0]
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	1d18      	adds	r0, r3, #4
 80061a2:	6008      	str	r0, [r1, #0]
 80061a4:	0628      	lsls	r0, r5, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xec>
 80061a8:	681d      	ldr	r5, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0xf2>
 80061ac:	0669      	lsls	r1, r5, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xe8>
 80061b0:	881d      	ldrh	r5, [r3, #0]
 80061b2:	2f6f      	cmp	r7, #111	; 0x6f
 80061b4:	bf0c      	ite	eq
 80061b6:	2308      	moveq	r3, #8
 80061b8:	230a      	movne	r3, #10
 80061ba:	4852      	ldr	r0, [pc, #328]	; (8006304 <_printf_i+0x244>)
 80061bc:	2100      	movs	r1, #0
 80061be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c2:	6866      	ldr	r6, [r4, #4]
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	bfa8      	it	ge
 80061c8:	6821      	ldrge	r1, [r4, #0]
 80061ca:	60a6      	str	r6, [r4, #8]
 80061cc:	bfa4      	itt	ge
 80061ce:	f021 0104 	bicge.w	r1, r1, #4
 80061d2:	6021      	strge	r1, [r4, #0]
 80061d4:	b90d      	cbnz	r5, 80061da <_printf_i+0x11a>
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d04d      	beq.n	8006276 <_printf_i+0x1b6>
 80061da:	4616      	mov	r6, r2
 80061dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80061e0:	fb03 5711 	mls	r7, r3, r1, r5
 80061e4:	5dc7      	ldrb	r7, [r0, r7]
 80061e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ea:	462f      	mov	r7, r5
 80061ec:	42bb      	cmp	r3, r7
 80061ee:	460d      	mov	r5, r1
 80061f0:	d9f4      	bls.n	80061dc <_printf_i+0x11c>
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d10b      	bne.n	800620e <_printf_i+0x14e>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	07df      	lsls	r7, r3, #31
 80061fa:	d508      	bpl.n	800620e <_printf_i+0x14e>
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	6861      	ldr	r1, [r4, #4]
 8006200:	4299      	cmp	r1, r3
 8006202:	bfde      	ittt	le
 8006204:	2330      	movle	r3, #48	; 0x30
 8006206:	f806 3c01 	strble.w	r3, [r6, #-1]
 800620a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800620e:	1b92      	subs	r2, r2, r6
 8006210:	6122      	str	r2, [r4, #16]
 8006212:	464b      	mov	r3, r9
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	aa03      	add	r2, sp, #12
 800621e:	f7ff fedf 	bl	8005fe0 <_printf_common>
 8006222:	3001      	adds	r0, #1
 8006224:	d14c      	bne.n	80062c0 <_printf_i+0x200>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	b004      	add	sp, #16
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	4834      	ldr	r0, [pc, #208]	; (8006304 <_printf_i+0x244>)
 8006232:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006236:	680e      	ldr	r6, [r1, #0]
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f856 5b04 	ldr.w	r5, [r6], #4
 800623e:	061f      	lsls	r7, r3, #24
 8006240:	600e      	str	r6, [r1, #0]
 8006242:	d514      	bpl.n	800626e <_printf_i+0x1ae>
 8006244:	07d9      	lsls	r1, r3, #31
 8006246:	bf44      	itt	mi
 8006248:	f043 0320 	orrmi.w	r3, r3, #32
 800624c:	6023      	strmi	r3, [r4, #0]
 800624e:	b91d      	cbnz	r5, 8006258 <_printf_i+0x198>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	2310      	movs	r3, #16
 800625a:	e7af      	b.n	80061bc <_printf_i+0xfc>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f043 0320 	orr.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	2378      	movs	r3, #120	; 0x78
 8006266:	4828      	ldr	r0, [pc, #160]	; (8006308 <_printf_i+0x248>)
 8006268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800626c:	e7e3      	b.n	8006236 <_printf_i+0x176>
 800626e:	065e      	lsls	r6, r3, #25
 8006270:	bf48      	it	mi
 8006272:	b2ad      	uxthmi	r5, r5
 8006274:	e7e6      	b.n	8006244 <_printf_i+0x184>
 8006276:	4616      	mov	r6, r2
 8006278:	e7bb      	b.n	80061f2 <_printf_i+0x132>
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	6826      	ldr	r6, [r4, #0]
 800627e:	1d1d      	adds	r5, r3, #4
 8006280:	6960      	ldr	r0, [r4, #20]
 8006282:	600d      	str	r5, [r1, #0]
 8006284:	0635      	lsls	r5, r6, #24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	d501      	bpl.n	800628e <_printf_i+0x1ce>
 800628a:	6018      	str	r0, [r3, #0]
 800628c:	e002      	b.n	8006294 <_printf_i+0x1d4>
 800628e:	0671      	lsls	r1, r6, #25
 8006290:	d5fb      	bpl.n	800628a <_printf_i+0x1ca>
 8006292:	8018      	strh	r0, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	4616      	mov	r6, r2
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	e7ba      	b.n	8006212 <_printf_i+0x152>
 800629c:	680b      	ldr	r3, [r1, #0]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	600a      	str	r2, [r1, #0]
 80062a2:	681e      	ldr	r6, [r3, #0]
 80062a4:	2100      	movs	r1, #0
 80062a6:	4630      	mov	r0, r6
 80062a8:	6862      	ldr	r2, [r4, #4]
 80062aa:	f000 f863 	bl	8006374 <memchr>
 80062ae:	b108      	cbz	r0, 80062b4 <_printf_i+0x1f4>
 80062b0:	1b80      	subs	r0, r0, r6
 80062b2:	6060      	str	r0, [r4, #4]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	2300      	movs	r3, #0
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062be:	e7a8      	b.n	8006212 <_printf_i+0x152>
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	47d0      	blx	sl
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0ab      	beq.n	8006226 <_printf_i+0x166>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	079b      	lsls	r3, r3, #30
 80062d2:	d413      	bmi.n	80062fc <_printf_i+0x23c>
 80062d4:	68e0      	ldr	r0, [r4, #12]
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	4298      	cmp	r0, r3
 80062da:	bfb8      	it	lt
 80062dc:	4618      	movlt	r0, r3
 80062de:	e7a4      	b.n	800622a <_printf_i+0x16a>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4632      	mov	r2, r6
 80062e4:	4649      	mov	r1, r9
 80062e6:	4640      	mov	r0, r8
 80062e8:	47d0      	blx	sl
 80062ea:	3001      	adds	r0, #1
 80062ec:	d09b      	beq.n	8006226 <_printf_i+0x166>
 80062ee:	3501      	adds	r5, #1
 80062f0:	68e3      	ldr	r3, [r4, #12]
 80062f2:	9903      	ldr	r1, [sp, #12]
 80062f4:	1a5b      	subs	r3, r3, r1
 80062f6:	42ab      	cmp	r3, r5
 80062f8:	dcf2      	bgt.n	80062e0 <_printf_i+0x220>
 80062fa:	e7eb      	b.n	80062d4 <_printf_i+0x214>
 80062fc:	2500      	movs	r5, #0
 80062fe:	f104 0619 	add.w	r6, r4, #25
 8006302:	e7f5      	b.n	80062f0 <_printf_i+0x230>
 8006304:	0800729d 	.word	0x0800729d
 8006308:	080072ae 	.word	0x080072ae

0800630c <_read_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	2200      	movs	r2, #0
 8006316:	4d05      	ldr	r5, [pc, #20]	; (800632c <_read_r+0x20>)
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fe fbe2 	bl	8004ae4 <_read>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_read_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_read_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	2000177c 	.word	0x2000177c

08006330 <_fstat_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	2300      	movs	r3, #0
 8006334:	4d06      	ldr	r5, [pc, #24]	; (8006350 <_fstat_r+0x20>)
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	f7fe fcae 	bl	8004c9e <_fstat>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d102      	bne.n	800634c <_fstat_r+0x1c>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	b103      	cbz	r3, 800634c <_fstat_r+0x1c>
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	2000177c 	.word	0x2000177c

08006354 <_isatty_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	2300      	movs	r3, #0
 8006358:	4d05      	ldr	r5, [pc, #20]	; (8006370 <_isatty_r+0x1c>)
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fe fe02 	bl	8004f68 <_isatty>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_isatty_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_isatty_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	2000177c 	.word	0x2000177c

08006374 <memchr>:
 8006374:	4603      	mov	r3, r0
 8006376:	b510      	push	{r4, lr}
 8006378:	b2c9      	uxtb	r1, r1
 800637a:	4402      	add	r2, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	4618      	mov	r0, r3
 8006380:	d101      	bne.n	8006386 <memchr+0x12>
 8006382:	2000      	movs	r0, #0
 8006384:	e003      	b.n	800638e <memchr+0x1a>
 8006386:	7804      	ldrb	r4, [r0, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	428c      	cmp	r4, r1
 800638c:	d1f6      	bne.n	800637c <memchr+0x8>
 800638e:	bd10      	pop	{r4, pc}

08006390 <memmove>:
 8006390:	4288      	cmp	r0, r1
 8006392:	b510      	push	{r4, lr}
 8006394:	eb01 0402 	add.w	r4, r1, r2
 8006398:	d902      	bls.n	80063a0 <memmove+0x10>
 800639a:	4284      	cmp	r4, r0
 800639c:	4623      	mov	r3, r4
 800639e:	d807      	bhi.n	80063b0 <memmove+0x20>
 80063a0:	1e43      	subs	r3, r0, #1
 80063a2:	42a1      	cmp	r1, r4
 80063a4:	d008      	beq.n	80063b8 <memmove+0x28>
 80063a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ae:	e7f8      	b.n	80063a2 <memmove+0x12>
 80063b0:	4601      	mov	r1, r0
 80063b2:	4402      	add	r2, r0
 80063b4:	428a      	cmp	r2, r1
 80063b6:	d100      	bne.n	80063ba <memmove+0x2a>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063c2:	e7f7      	b.n	80063b4 <memmove+0x24>

080063c4 <_malloc_usable_size_r>:
 80063c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c8:	1f18      	subs	r0, r3, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfbc      	itt	lt
 80063ce:	580b      	ldrlt	r3, [r1, r0]
 80063d0:	18c0      	addlt	r0, r0, r3
 80063d2:	4770      	bx	lr

080063d4 <_init>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr

080063e0 <_fini>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr
